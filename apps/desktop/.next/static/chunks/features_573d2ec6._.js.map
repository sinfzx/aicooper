{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/ai-knowledge/src/components/KnowledgeFramework.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { \n  Card, \n  Text, \n  Button, \n  Stack, \n  Group, \n  Select, \n  Badge, \n  Paper, \n  Loader,\n  Alert,\n  ActionIcon,\n  Collapse,\n  Divider,\n  Box,\n  Title\n} from '@mantine/core'\nimport { \n  IconBrain, \n  IconFolder, \n  IconFolderOpen, \n  IconFile, \n  IconRobot, \n  IconEye, \n  IconEyeOff,\n  IconSearch,\n  IconChevronDown,\n  IconChevronRight\n} from '@tabler/icons-react'\nimport { KnowledgeFramework as KnowledgeFrameworkType, KnowledgeNode, SearchProvider } from '@my-platform/types'\nimport { builtInFrameworks } from '@/data/builtInFrameworks'\n\n// Safely import Tauri API with fallback\nconst getTauriInvoke = async () => {\n  try {\n    if (typeof window !== 'undefined' && (window as any).__TAURI__) {\n      const { invoke } = await import('@tauri-apps/api/core');\n      return invoke;\n    }\n  } catch (error) {\n    console.warn('Tauri API not available:', error);\n  }\n  return null;\n};\n\ninterface NodeComponentProps {\n  node: KnowledgeNode\n  onToggleExpand: (nodeId: string) => void\n  onGenerateChildren: (node: KnowledgeNode) => void\n  onSearch: (query: string) => void\n  searchProviders: SearchProvider[]\n}\n\nconst NodeComponent: React.FC<NodeComponentProps> = ({\n  node,\n  onToggleExpand,\n  onGenerateChildren,\n  onSearch,\n  searchProviders\n}) => {\n  const [showQuestions, setShowQuestions] = useState(false)\n\n  const getNodeIcon = () => {\n    if (node.children.length > 0) {\n      return node.expanded ? <IconFolderOpen size={18} /> : <IconFolder size={18} />\n    }\n    return <IconFile size={18} />\n  }\n\n  return (\n    <Box mb=\"md\">\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Group justify=\"space-between\" mb=\"xs\">\n          <Group gap=\"sm\">\n            <ActionIcon\n              variant=\"subtle\"\n              onClick={() => onToggleExpand(node.id)}\n              size=\"sm\"\n            >\n              {getNodeIcon()}\n            </ActionIcon>\n            <Title order={4} size=\"md\">{node.title}</Title>\n          </Group>\n          \n          <Group gap=\"xs\">\n            <ActionIcon\n              variant=\"subtle\"\n              onClick={() => setShowQuestions(!showQuestions)}\n              size=\"sm\"\n            >\n              {showQuestions ? <IconEyeOff size={16} /> : <IconEye size={16} />}\n            </ActionIcon>\n            <Button\n              variant=\"light\"\n              size=\"xs\"\n              leftSection={<IconRobot size={14} />}\n              onClick={() => onGenerateChildren(node)}\n            >\n              AI扩展\n            </Button>\n          </Group>\n        </Group>\n\n        {node.description && (\n          <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">\n            {node.description}\n          </Text>\n        )}\n\n        <Collapse in={showQuestions && node.questions.length > 0}>\n          <Paper p=\"sm\" bg=\"gray.0\" radius=\"sm\" mt=\"sm\">\n            <Text size=\"sm\" fw={500} mb=\"xs\">相关问题：</Text>\n            <Stack gap=\"xs\">\n              {node.questions.map((question, index) => (\n                <Group key={index} justify=\"space-between\" align=\"flex-start\">\n                  <Text size=\"sm\" style={{ flex: 1 }}>\n                    • {question}\n                  </Text>\n                  <Group gap=\"xs\">\n                    {searchProviders.filter(p => p.enabled).map(provider => (\n                      <ActionIcon\n                        key={provider.id}\n                        size=\"xs\"\n                        variant=\"light\"\n                        onClick={() => onSearch(`${question} ${node.title}`)}\n                        title={`在${provider.name}中搜索`}\n                      >\n                        <IconSearch size={12} />\n                      </ActionIcon>\n                    ))}\n                  </Group>\n                </Group>\n              ))}\n            </Stack>\n          </Paper>\n        </Collapse>\n      </Card>\n\n      <Collapse in={node.expanded && node.children.length > 0}>\n        <Box ml=\"xl\" pl=\"md\" style={{ borderLeft: '2px solid var(--mantine-color-gray-3)' }}>\n          <Stack gap=\"sm\" mt=\"sm\">\n            {node.children.map(child => (\n              <NodeComponent\n                key={child.id}\n                node={child}\n                onToggleExpand={onToggleExpand}\n                onGenerateChildren={onGenerateChildren}\n                onSearch={onSearch}\n                searchProviders={searchProviders}\n              />\n            ))}\n          </Stack>\n        </Box>\n      </Collapse>\n    </Box>\n  )\n}\n\nexport const KnowledgeFramework: React.FC = () => {\n  const [frameworks, setFrameworks] = useState<KnowledgeFrameworkType[]>([])\n  const [selectedFramework, setSelectedFramework] = useState<KnowledgeFrameworkType | null>(null)\n  const [searchProviders, setSearchProviders] = useState<SearchProvider[]>([])\n  const [isGenerating, setIsGenerating] = useState(false)\n\n  useEffect(() => {\n    loadFrameworks()\n    loadSearchProviders()\n  }, [])\n\n  const loadFrameworks = async () => {\n    try {\n      const invoke = await getTauriInvoke();\n      if (!invoke) {\n        // Fallback to built-in frameworks if Tauri is not available\n        setFrameworks(builtInFrameworks);\n        if (builtInFrameworks.length > 0 && !selectedFramework) {\n          setSelectedFramework(builtInFrameworks[0]);\n        }\n        return;\n      }\n\n      let frameworks = await invoke<KnowledgeFrameworkType[]>('get_knowledge_frameworks')\n\n      // 如果没有框架，初始化内置框架\n      if (frameworks.length === 0) {\n        for (const framework of builtInFrameworks) {\n          await invoke('save_knowledge_framework', { framework })\n        }\n        frameworks = builtInFrameworks\n      }\n\n      setFrameworks(frameworks)\n      if (frameworks.length > 0 && !selectedFramework) {\n        setSelectedFramework(frameworks[0])\n      }\n    } catch (error) {\n      console.error('Failed to load frameworks:', error)\n      // Fallback to built-in frameworks on error\n      setFrameworks(builtInFrameworks);\n      if (builtInFrameworks.length > 0 && !selectedFramework) {\n        setSelectedFramework(builtInFrameworks[0]);\n      }\n    }\n  }\n\n  const loadSearchProviders = async () => {\n    try {\n      const invoke = await getTauriInvoke();\n      if (!invoke) {\n        // Fallback to default search providers\n        const defaultProviders: SearchProvider[] = [\n          {\n            id: 'google',\n            name: 'Google',\n            icon: '🔍',\n            baseUrl: 'https://www.google.com/search',\n            searchParam: 'q',\n            enabled: true\n          }\n        ];\n        setSearchProviders(defaultProviders);\n        return;\n      }\n\n      const providers = await invoke<SearchProvider[]>('get_search_providers')\n      setSearchProviders(providers)\n    } catch (error) {\n      console.error('Failed to load search providers:', error)\n      // Fallback to default providers\n      const defaultProviders: SearchProvider[] = [\n        {\n          id: 'google',\n          name: 'Google',\n          icon: '🔍',\n          baseUrl: 'https://www.google.com/search',\n          searchParam: 'q',\n          enabled: true\n        }\n      ];\n      setSearchProviders(defaultProviders);\n    }\n  }\n\n  const handleToggleExpand = useCallback((nodeId: string) => {\n    if (!selectedFramework) return\n\n    const updateNodeExpansion = (nodes: KnowledgeNode[]): KnowledgeNode[] => {\n      return nodes.map(node => {\n        if (node.id === nodeId) {\n          return { ...node, expanded: !node.expanded }\n        }\n        if (node.children.length > 0) {\n          return { ...node, children: updateNodeExpansion(node.children) }\n        }\n        return node\n      })\n    }\n\n    const updatedFramework = {\n      ...selectedFramework,\n      rootNodes: updateNodeExpansion(selectedFramework.rootNodes),\n      updatedAt: new Date().toISOString()\n    }\n\n    setSelectedFramework(updatedFramework)\n\n    // 保存到本地 (如果Tauri可用)\n    getTauriInvoke().then(invoke => {\n      if (invoke) {\n        invoke('save_knowledge_framework', { framework: updatedFramework })\n          .catch(error => console.error('Failed to save framework:', error));\n      }\n    });\n  }, [selectedFramework])\n\n  const handleGenerateChildren = async (parentNode: KnowledgeNode) => {\n    if (!selectedFramework) return\n\n    setIsGenerating(true)\n    try {\n      const invoke = await getTauriInvoke();\n      if (!invoke) {\n        alert('AI扩展功能需要在桌面应用中使用');\n        return;\n      }\n\n      // 获取用户的 API Key\n      const apiKeys = await invoke<any[]>('get_api_keys')\n      const defaultKey = apiKeys.find(k => k.is_default && k.is_active) || apiKeys[0]\n\n      let response: string\n      if (defaultKey) {\n        response = await invoke<string>('generate_child_nodes', {\n          provider: defaultKey.provider,\n          apiKey: defaultKey.api_key,\n          model: defaultKey.model || 'gpt-3.5-turbo',\n          parentTitle: parentNode.title,\n          parentDescription: parentNode.description || '',\n          domainContext: selectedFramework.domain,\n          nodeCount: 3,\n          targetUser: '进阶学习者',\n          baseUrl: defaultKey.base_url || null\n        })\n      } else {\n        // 使用兜底服务\n        response = await invoke<string>('generate_child_nodes', {\n          provider: 'pollinations',\n          apiKey: '',\n          model: '',\n          parentTitle: parentNode.title,\n          parentDescription: parentNode.description || '',\n          domainContext: selectedFramework.domain,\n          nodeCount: 3,\n          targetUser: '进阶学习者',\n          baseUrl: null\n        })\n      }\n\n      // 解析 AI 响应并创建子节点\n      const childNodes = parseAIResponseToNodes(response, parentNode.level + 1)\n\n      // 更新框架\n      const updateNodeChildren = (nodes: KnowledgeNode[]): KnowledgeNode[] => {\n        return nodes.map(node => {\n          if (node.id === parentNode.id) {\n            return {\n              ...node,\n              children: [...node.children, ...childNodes],\n              expanded: true\n            }\n          }\n          if (node.children.length > 0) {\n            return { ...node, children: updateNodeChildren(node.children) }\n          }\n          return node\n        })\n      }\n\n      const updatedFramework = {\n        ...selectedFramework,\n        rootNodes: updateNodeChildren(selectedFramework.rootNodes),\n        updatedAt: new Date().toISOString()\n      }\n\n      setSelectedFramework(updatedFramework)\n      await invoke('save_knowledge_framework', { framework: updatedFramework })\n\n    } catch (error) {\n      console.error('Failed to generate child nodes:', error)\n      alert(`生成失败: ${error}`)\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  const parseAIResponseToNodes = (response: string, level: number): KnowledgeNode[] => {\n    const nodes: KnowledgeNode[] = []\n    const sections = response.split('---').filter(s => s.trim())\n\n    sections.forEach((section, index) => {\n      const lines = section.trim().split('\\n')\n      let title = ''\n      let description = ''\n      const questions: string[] = []\n\n      for (const line of lines) {\n        if (line.startsWith('## ')) {\n          title = line.replace('## ', '').replace(/节点\\d+：/, '').trim()\n        } else if (line.startsWith('**描述**：')) {\n          description = line.replace('**描述**：', '').trim()\n        } else if (line.match(/^\\d+\\. /)) {\n          questions.push(line.replace(/^\\d+\\. /, '').trim())\n        }\n      }\n\n      if (title) {\n        nodes.push({\n          id: `node-${Date.now()}-${index}`,\n          title,\n          description: description || undefined,\n          children: [],\n          questions,\n          urls: [],\n          expanded: false,\n          level,\n          position: { x: index * 200, y: level * 150 }\n        })\n      }\n    })\n\n    return nodes\n  }\n\n  const handleSearch = async (query: string) => {\n    try {\n      const invoke = await getTauriInvoke();\n      if (!invoke) {\n        // Fallback to direct search URL\n        const enabledProviders = searchProviders.filter(p => p.enabled)\n        if (enabledProviders.length > 0) {\n          const provider = enabledProviders[0];\n          const searchUrl = `${provider.baseUrl}?${provider.searchParam}=${encodeURIComponent(query)}`;\n          window.open(searchUrl, '_blank');\n        }\n        return;\n      }\n\n      const enabledProviders = searchProviders.filter(p => p.enabled)\n      if (enabledProviders.length > 0) {\n        const searchUrl = await invoke<string>('search_with_provider', {\n          providerId: enabledProviders[0].id,\n          query\n        })\n\n        // 使用 Tauri 的 opener 插件打开搜索链接\n        await invoke('plugin:opener|open', { path: searchUrl })\n      }\n    } catch (error) {\n      console.error('Search failed:', error)\n      // Fallback to direct search\n      const enabledProviders = searchProviders.filter(p => p.enabled)\n      if (enabledProviders.length > 0) {\n        const provider = enabledProviders[0];\n        const searchUrl = `${provider.baseUrl}?${provider.searchParam}=${encodeURIComponent(query)}`;\n        window.open(searchUrl, '_blank');\n      }\n    }\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      <Group justify=\"space-between\">\n        <Stack gap=\"xs\">\n          <Group>\n            <IconBrain size={28} color=\"var(--mantine-color-blue-6)\" />\n            <Title order={2}>知识框架</Title>\n          </Group>\n          <Text c=\"dimmed\">系统性地构建和管理领域知识</Text>\n        </Stack>\n        \n        <Select\n          placeholder=\"选择知识框架\"\n          value={selectedFramework?.id || null}\n          onChange={(value) => {\n            const framework = frameworks.find(f => f.id === value)\n            setSelectedFramework(framework || null)\n          }}\n          data={frameworks.map(framework => ({\n            value: framework.id,\n            label: framework.name\n          }))}\n          w={250}\n        />\n      </Group>\n\n      {selectedFramework ? (\n        <Stack gap=\"md\">\n          <Paper p=\"lg\" radius=\"md\" bg=\"blue.0\" withBorder>\n            <Group justify=\"space-between\" mb=\"sm\">\n              <Title order={3} c=\"blue.8\">\n                {selectedFramework.name}\n              </Title>\n              <Group gap=\"xs\">\n                <Badge variant=\"light\" color=\"blue\">\n                  {selectedFramework.domain}\n                </Badge>\n                <Badge variant=\"outline\" size=\"sm\">\n                  v{selectedFramework.version}\n                </Badge>\n              </Group>\n            </Group>\n            <Text c=\"blue.7\">{selectedFramework.description}</Text>\n          </Paper>\n\n          {isGenerating && (\n            <Alert \n              icon={<Loader size={16} />} \n              color=\"yellow\" \n              variant=\"light\"\n              radius=\"md\"\n            >\n              <Text>AI 正在生成新的知识节点...</Text>\n            </Alert>\n          )}\n\n          <Stack gap=\"sm\">\n            {selectedFramework.rootNodes.map(node => (\n              <NodeComponent\n                key={node.id}\n                node={node}\n                onToggleExpand={handleToggleExpand}\n                onGenerateChildren={handleGenerateChildren}\n                onSearch={handleSearch}\n                searchProviders={searchProviders}\n              />\n            ))}\n          </Stack>\n        </Stack>\n      ) : (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Stack align=\"center\" gap=\"md\">\n            <IconBrain size={64} color=\"var(--mantine-color-gray-5)\" />\n            <Title order={3} ta=\"center\">选择知识框架</Title>\n            <Text c=\"dimmed\" ta=\"center\" maw={400}>\n              选择一个领域开始构建您的知识体系\n            </Text>\n            {frameworks.length === 0 && (\n              <Button \n                variant=\"filled\" \n                onClick={loadFrameworks}\n                leftSection={<IconBrain size={16} />}\n              >\n                初始化内置框架\n              </Button>\n            )}\n          </Stack>\n        </Card>\n      )}\n    </Stack>\n  )\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;;;;AAEA,wCAAwC;AACxC,MAAM,iBAAiB;IACrB,IAAI;QACF,IAAI,aAAkB,eAAe,AAAC,OAAe,SAAS,EAAE;YAC9D,MAAM,EAAE,MAAM,EAAE,GAAG;YACnB,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,4BAA4B;IAC3C;IACA,OAAO;AACT;AAUA,MAAM,gBAA8C;QAAC,EACnD,IAAI,EACJ,cAAc,EACd,kBAAkB,EAClB,QAAQ,EACR,eAAe,EAChB;;IACC,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,MAAM,cAAc;QAClB,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG,GAAG;YAC5B,OAAO,KAAK,QAAQ,iBAAG,8VAAC,mUAAA,CAAA,iBAAc;gBAAC,MAAM;;;;;yEAAS,8VAAC,2TAAA,CAAA,aAAU;gBAAC,MAAM;;;;;;QAC1E;QACA,qBAAO,8VAAC,uTAAA,CAAA,WAAQ;YAAC,MAAM;;;;;;IACzB;IAEA,qBACE,8VAAC,4YAAA,CAAA,MAAG;QAAC,IAAG;;0BACN,8VAAC,oZAAA,CAAA,OAAI;gBAAC,QAAO;gBAAK,SAAQ;gBAAK,QAAO;gBAAK,UAAU;;kCACnD,8VAAC,sZAAA,CAAA,QAAK;wBAAC,SAAQ;wBAAgB,IAAG;;0CAChC,8VAAC,sZAAA,CAAA,QAAK;gCAAC,KAAI;;kDACT,8VAAC,gaAAA,CAAA,aAAU;wCACT,SAAQ;wCACR,SAAS,IAAM,eAAe,KAAK,EAAE;wCACrC,MAAK;kDAEJ;;;;;;kDAEH,8VAAC,sZAAA,CAAA,QAAK;wCAAC,OAAO;wCAAG,MAAK;kDAAM,KAAK,KAAK;;;;;;;;;;;;0CAGxC,8VAAC,sZAAA,CAAA,QAAK;gCAAC,KAAI;;kDACT,8VAAC,gaAAA,CAAA,aAAU;wCACT,SAAQ;wCACR,SAAS,IAAM,iBAAiB,CAAC;wCACjC,MAAK;kDAEJ,8BAAgB,8VAAC,2TAAA,CAAA,aAAU;4CAAC,MAAM;;;;;qGAAS,8VAAC,qTAAA,CAAA,UAAO;4CAAC,MAAM;;;;;;;;;;;kDAE7D,8VAAC,wZAAA,CAAA,SAAM;wCACL,SAAQ;wCACR,MAAK;wCACL,2BAAa,8VAAC,yTAAA,CAAA,YAAS;4CAAC,MAAM;;;;;;wCAC9B,SAAS,IAAM,mBAAmB;kDACnC;;;;;;;;;;;;;;;;;;oBAMJ,KAAK,WAAW,kBACf,8VAAC,oZAAA,CAAA,OAAI;wBAAC,MAAK;wBAAK,GAAE;wBAAS,IAAG;kCAC3B,KAAK,WAAW;;;;;;kCAIrB,8VAAC,4ZAAA,CAAA,WAAQ;wBAAC,IAAI,iBAAiB,KAAK,SAAS,CAAC,MAAM,GAAG;kCACrD,cAAA,8VAAC,sZAAA,CAAA,QAAK;4BAAC,GAAE;4BAAK,IAAG;4BAAS,QAAO;4BAAK,IAAG;;8CACvC,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,IAAI;oCAAK,IAAG;8CAAK;;;;;;8CACjC,8VAAC,sZAAA,CAAA,QAAK;oCAAC,KAAI;8CACR,KAAK,SAAS,CAAC,GAAG,CAAC,CAAC,UAAU,sBAC7B,8VAAC,sZAAA,CAAA,QAAK;4CAAa,SAAQ;4CAAgB,OAAM;;8DAC/C,8VAAC,oZAAA,CAAA,OAAI;oDAAC,MAAK;oDAAK,OAAO;wDAAE,MAAM;oDAAE;;wDAAG;wDAC/B;;;;;;;8DAEL,8VAAC,sZAAA,CAAA,QAAK;oDAAC,KAAI;8DACR,gBAAgB,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAA,yBAC1C,8VAAC,gaAAA,CAAA,aAAU;4DAET,MAAK;4DACL,SAAQ;4DACR,SAAS,IAAM,SAAS,AAAC,GAAc,OAAZ,UAAS,KAAc,OAAX,KAAK,KAAK;4DACjD,OAAO,AAAC,IAAiB,OAAd,SAAS,IAAI,EAAC;sEAEzB,cAAA,8VAAC,2TAAA,CAAA,aAAU;gEAAC,MAAM;;;;;;2DANb,SAAS,EAAE;;;;;;;;;;;2CAPZ;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAwBtB,8VAAC,4ZAAA,CAAA,WAAQ;gBAAC,IAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG;0BACpD,cAAA,8VAAC,4YAAA,CAAA,MAAG;oBAAC,IAAG;oBAAK,IAAG;oBAAK,OAAO;wBAAE,YAAY;oBAAwC;8BAChF,cAAA,8VAAC,sZAAA,CAAA,QAAK;wBAAC,KAAI;wBAAK,IAAG;kCAChB,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAA,sBACjB,8VAAC;gCAEC,MAAM;gCACN,gBAAgB;gCAChB,oBAAoB;gCACpB,UAAU;gCACV,iBAAiB;+BALZ,MAAM,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;AAa7B;GAvGM;KAAA;AAyGC,MAAM,qBAA+B;;IAC1C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAA4B,EAAE;IACzE,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAiC;IAC1F,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAoB,EAAE;IAC3E,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,CAAA,GAAA,8TAAA,CAAA,YAAS,AAAD;wCAAE;YACR;YACA;QACF;uCAAG,EAAE;IAEL,MAAM,iBAAiB;QACrB,IAAI;YACF,MAAM,SAAS,MAAM;YACrB,IAAI,CAAC,QAAQ;gBACX,4DAA4D;gBAC5D,cAAc,sJAAA,CAAA,oBAAiB;gBAC/B,IAAI,sJAAA,CAAA,oBAAiB,CAAC,MAAM,GAAG,KAAK,CAAC,mBAAmB;oBACtD,qBAAqB,sJAAA,CAAA,oBAAiB,CAAC,EAAE;gBAC3C;gBACA;YACF;YAEA,IAAI,aAAa,MAAM,OAAiC;YAExD,iBAAiB;YACjB,IAAI,WAAW,MAAM,KAAK,GAAG;gBAC3B,KAAK,MAAM,aAAa,sJAAA,CAAA,oBAAiB,CAAE;oBACzC,MAAM,OAAO,4BAA4B;wBAAE;oBAAU;gBACvD;gBACA,aAAa,sJAAA,CAAA,oBAAiB;YAChC;YAEA,cAAc;YACd,IAAI,WAAW,MAAM,GAAG,KAAK,CAAC,mBAAmB;gBAC/C,qBAAqB,UAAU,CAAC,EAAE;YACpC;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,2CAA2C;YAC3C,cAAc,sJAAA,CAAA,oBAAiB;YAC/B,IAAI,sJAAA,CAAA,oBAAiB,CAAC,MAAM,GAAG,KAAK,CAAC,mBAAmB;gBACtD,qBAAqB,sJAAA,CAAA,oBAAiB,CAAC,EAAE;YAC3C;QACF;IACF;IAEA,MAAM,sBAAsB;QAC1B,IAAI;YACF,MAAM,SAAS,MAAM;YACrB,IAAI,CAAC,QAAQ;gBACX,uCAAuC;gBACvC,MAAM,mBAAqC;oBACzC;wBACE,IAAI;wBACJ,MAAM;wBACN,MAAM;wBACN,SAAS;wBACT,aAAa;wBACb,SAAS;oBACX;iBACD;gBACD,mBAAmB;gBACnB;YACF;YAEA,MAAM,YAAY,MAAM,OAAyB;YACjD,mBAAmB;QACrB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,gCAAgC;YAChC,MAAM,mBAAqC;gBACzC;oBACE,IAAI;oBACJ,MAAM;oBACN,MAAM;oBACN,SAAS;oBACT,aAAa;oBACb,SAAS;gBACX;aACD;YACD,mBAAmB;QACrB;IACF;IAEA,MAAM,qBAAqB,CAAA,GAAA,8TAAA,CAAA,cAAW,AAAD;8DAAE,CAAC;YACtC,IAAI,CAAC,mBAAmB;YAExB,MAAM;0FAAsB,CAAC;oBAC3B,OAAO,MAAM,GAAG;kGAAC,CAAA;4BACf,IAAI,KAAK,EAAE,KAAK,QAAQ;gCACtB,OAAO;oCAAE,GAAG,IAAI;oCAAE,UAAU,CAAC,KAAK,QAAQ;gCAAC;4BAC7C;4BACA,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG,GAAG;gCAC5B,OAAO;oCAAE,GAAG,IAAI;oCAAE,UAAU,oBAAoB,KAAK,QAAQ;gCAAE;4BACjE;4BACA,OAAO;wBACT;;gBACF;;YAEA,MAAM,mBAAmB;gBACvB,GAAG,iBAAiB;gBACpB,WAAW,oBAAoB,kBAAkB,SAAS;gBAC1D,WAAW,IAAI,OAAO,WAAW;YACnC;YAEA,qBAAqB;YAErB,oBAAoB;YACpB,iBAAiB,IAAI;sEAAC,CAAA;oBACpB,IAAI,QAAQ;wBACV,OAAO,4BAA4B;4BAAE,WAAW;wBAAiB,GAC9D,KAAK;kFAAC,CAAA,QAAS,QAAQ,KAAK,CAAC,6BAA6B;;oBAC/D;gBACF;;QACF;6DAAG;QAAC;KAAkB;IAEtB,MAAM,yBAAyB,OAAO;QACpC,IAAI,CAAC,mBAAmB;QAExB,gBAAgB;QAChB,IAAI;YACF,MAAM,SAAS,MAAM;YACrB,IAAI,CAAC,QAAQ;gBACX,MAAM;gBACN;YACF;YAEA,gBAAgB;YAChB,MAAM,UAAU,MAAM,OAAc;YACpC,MAAM,aAAa,QAAQ,IAAI,CAAC,CAAA,IAAK,EAAE,UAAU,IAAI,EAAE,SAAS,KAAK,OAAO,CAAC,EAAE;YAE/E,IAAI;YACJ,IAAI,YAAY;gBACd,WAAW,MAAM,OAAe,wBAAwB;oBACtD,UAAU,WAAW,QAAQ;oBAC7B,QAAQ,WAAW,OAAO;oBAC1B,OAAO,WAAW,KAAK,IAAI;oBAC3B,aAAa,WAAW,KAAK;oBAC7B,mBAAmB,WAAW,WAAW,IAAI;oBAC7C,eAAe,kBAAkB,MAAM;oBACvC,WAAW;oBACX,YAAY;oBACZ,SAAS,WAAW,QAAQ,IAAI;gBAClC;YACF,OAAO;gBACL,SAAS;gBACT,WAAW,MAAM,OAAe,wBAAwB;oBACtD,UAAU;oBACV,QAAQ;oBACR,OAAO;oBACP,aAAa,WAAW,KAAK;oBAC7B,mBAAmB,WAAW,WAAW,IAAI;oBAC7C,eAAe,kBAAkB,MAAM;oBACvC,WAAW;oBACX,YAAY;oBACZ,SAAS;gBACX;YACF;YAEA,iBAAiB;YACjB,MAAM,aAAa,uBAAuB,UAAU,WAAW,KAAK,GAAG;YAEvE,OAAO;YACP,MAAM,qBAAqB,CAAC;gBAC1B,OAAO,MAAM,GAAG,CAAC,CAAA;oBACf,IAAI,KAAK,EAAE,KAAK,WAAW,EAAE,EAAE;wBAC7B,OAAO;4BACL,GAAG,IAAI;4BACP,UAAU;mCAAI,KAAK,QAAQ;mCAAK;6BAAW;4BAC3C,UAAU;wBACZ;oBACF;oBACA,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG,GAAG;wBAC5B,OAAO;4BAAE,GAAG,IAAI;4BAAE,UAAU,mBAAmB,KAAK,QAAQ;wBAAE;oBAChE;oBACA,OAAO;gBACT;YACF;YAEA,MAAM,mBAAmB;gBACvB,GAAG,iBAAiB;gBACpB,WAAW,mBAAmB,kBAAkB,SAAS;gBACzD,WAAW,IAAI,OAAO,WAAW;YACnC;YAEA,qBAAqB;YACrB,MAAM,OAAO,4BAA4B;gBAAE,WAAW;YAAiB;QAEzE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,MAAM,AAAC,SAAc,OAAN;QACjB,SAAU;YACR,gBAAgB;QAClB;IACF;IAEA,MAAM,yBAAyB,CAAC,UAAkB;QAChD,MAAM,QAAyB,EAAE;QACjC,MAAM,WAAW,SAAS,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI;QAEzD,SAAS,OAAO,CAAC,CAAC,SAAS;YACzB,MAAM,QAAQ,QAAQ,IAAI,GAAG,KAAK,CAAC;YACnC,IAAI,QAAQ;YACZ,IAAI,cAAc;YAClB,MAAM,YAAsB,EAAE;YAE9B,KAAK,MAAM,QAAQ,MAAO;gBACxB,IAAI,KAAK,UAAU,CAAC,QAAQ;oBAC1B,QAAQ,KAAK,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI;gBAC5D,OAAO,IAAI,KAAK,UAAU,CAAC,YAAY;oBACrC,cAAc,KAAK,OAAO,CAAC,WAAW,IAAI,IAAI;gBAChD,OAAO,IAAI,KAAK,KAAK,CAAC,YAAY;oBAChC,UAAU,IAAI,CAAC,KAAK,OAAO,CAAC,WAAW,IAAI,IAAI;gBACjD;YACF;YAEA,IAAI,OAAO;gBACT,MAAM,IAAI,CAAC;oBACT,IAAI,AAAC,QAAqB,OAAd,KAAK,GAAG,IAAG,KAAS,OAAN;oBAC1B;oBACA,aAAa,eAAe;oBAC5B,UAAU,EAAE;oBACZ;oBACA,MAAM,EAAE;oBACR,UAAU;oBACV;oBACA,UAAU;wBAAE,GAAG,QAAQ;wBAAK,GAAG,QAAQ;oBAAI;gBAC7C;YACF;QACF;QAEA,OAAO;IACT;IAEA,MAAM,eAAe,OAAO;QAC1B,IAAI;YACF,MAAM,SAAS,MAAM;YACrB,IAAI,CAAC,QAAQ;gBACX,gCAAgC;gBAChC,MAAM,mBAAmB,gBAAgB,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO;gBAC9D,IAAI,iBAAiB,MAAM,GAAG,GAAG;oBAC/B,MAAM,WAAW,gBAAgB,CAAC,EAAE;oBACpC,MAAM,YAAY,AAAC,GAAsB,OAApB,SAAS,OAAO,EAAC,KAA2B,OAAxB,SAAS,WAAW,EAAC,KAA6B,OAA1B,mBAAmB;oBACpF,OAAO,IAAI,CAAC,WAAW;gBACzB;gBACA;YACF;YAEA,MAAM,mBAAmB,gBAAgB,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO;YAC9D,IAAI,iBAAiB,MAAM,GAAG,GAAG;gBAC/B,MAAM,YAAY,MAAM,OAAe,wBAAwB;oBAC7D,YAAY,gBAAgB,CAAC,EAAE,CAAC,EAAE;oBAClC;gBACF;gBAEA,6BAA6B;gBAC7B,MAAM,OAAO,sBAAsB;oBAAE,MAAM;gBAAU;YACvD;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kBAAkB;YAChC,4BAA4B;YAC5B,MAAM,mBAAmB,gBAAgB,MAAM,CAAC,CAAA,IAAK,EAAE,OAAO;YAC9D,IAAI,iBAAiB,MAAM,GAAG,GAAG;gBAC/B,MAAM,WAAW,gBAAgB,CAAC,EAAE;gBACpC,MAAM,YAAY,AAAC,GAAsB,OAApB,SAAS,OAAO,EAAC,KAA2B,OAAxB,SAAS,WAAW,EAAC,KAA6B,OAA1B,mBAAmB;gBACpF,OAAO,IAAI,CAAC,WAAW;YACzB;QACF;IACF;IAEA,qBACE,8VAAC,sZAAA,CAAA,QAAK;QAAC,KAAI;QAAK,GAAE;;0BAChB,8VAAC,sZAAA,CAAA,QAAK;gBAAC,SAAQ;;kCACb,8VAAC,sZAAA,CAAA,QAAK;wBAAC,KAAI;;0CACT,8VAAC,sZAAA,CAAA,QAAK;;kDACJ,8VAAC,yTAAA,CAAA,YAAS;wCAAC,MAAM;wCAAI,OAAM;;;;;;kDAC3B,8VAAC,sZAAA,CAAA,QAAK;wCAAC,OAAO;kDAAG;;;;;;;;;;;;0CAEnB,8VAAC,oZAAA,CAAA,OAAI;gCAAC,GAAE;0CAAS;;;;;;;;;;;;kCAGnB,8VAAC,wZAAA,CAAA,SAAM;wBACL,aAAY;wBACZ,OAAO,CAAA,8BAAA,wCAAA,kBAAmB,EAAE,KAAI;wBAChC,UAAU,CAAC;4BACT,MAAM,YAAY,WAAW,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;4BAChD,qBAAqB,aAAa;wBACpC;wBACA,MAAM,WAAW,GAAG,CAAC,CAAA,YAAa,CAAC;gCACjC,OAAO,UAAU,EAAE;gCACnB,OAAO,UAAU,IAAI;4BACvB,CAAC;wBACD,GAAG;;;;;;;;;;;;YAIN,kCACC,8VAAC,sZAAA,CAAA,QAAK;gBAAC,KAAI;;kCACT,8VAAC,sZAAA,CAAA,QAAK;wBAAC,GAAE;wBAAK,QAAO;wBAAK,IAAG;wBAAS,UAAU;;0CAC9C,8VAAC,sZAAA,CAAA,QAAK;gCAAC,SAAQ;gCAAgB,IAAG;;kDAChC,8VAAC,sZAAA,CAAA,QAAK;wCAAC,OAAO;wCAAG,GAAE;kDAChB,kBAAkB,IAAI;;;;;;kDAEzB,8VAAC,sZAAA,CAAA,QAAK;wCAAC,KAAI;;0DACT,8VAAC,sZAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAQ,OAAM;0DAC1B,kBAAkB,MAAM;;;;;;0DAE3B,8VAAC,sZAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAU,MAAK;;oDAAK;oDAC/B,kBAAkB,OAAO;;;;;;;;;;;;;;;;;;;0CAIjC,8VAAC,oZAAA,CAAA,OAAI;gCAAC,GAAE;0CAAU,kBAAkB,WAAW;;;;;;;;;;;;oBAGhD,8BACC,8VAAC,sZAAA,CAAA,QAAK;wBACJ,oBAAM,8VAAC,wZAAA,CAAA,SAAM;4BAAC,MAAM;;;;;;wBACpB,OAAM;wBACN,SAAQ;wBACR,QAAO;kCAEP,cAAA,8VAAC,oZAAA,CAAA,OAAI;sCAAC;;;;;;;;;;;kCAIV,8VAAC,sZAAA,CAAA,QAAK;wBAAC,KAAI;kCACR,kBAAkB,SAAS,CAAC,GAAG,CAAC,CAAA,qBAC/B,8VAAC;gCAEC,MAAM;gCACN,gBAAgB;gCAChB,oBAAoB;gCACpB,UAAU;gCACV,iBAAiB;+BALZ,KAAK,EAAE;;;;;;;;;;;;;;;yEAWpB,8VAAC,oZAAA,CAAA,OAAI;gBAAC,QAAO;gBAAK,SAAQ;gBAAK,QAAO;gBAAK,UAAU;0BACnD,cAAA,8VAAC,sZAAA,CAAA,QAAK;oBAAC,OAAM;oBAAS,KAAI;;sCACxB,8VAAC,yTAAA,CAAA,YAAS;4BAAC,MAAM;4BAAI,OAAM;;;;;;sCAC3B,8VAAC,sZAAA,CAAA,QAAK;4BAAC,OAAO;4BAAG,IAAG;sCAAS;;;;;;sCAC7B,8VAAC,oZAAA,CAAA,OAAI;4BAAC,GAAE;4BAAS,IAAG;4BAAS,KAAK;sCAAK;;;;;;wBAGtC,WAAW,MAAM,KAAK,mBACrB,8VAAC,wZAAA,CAAA,SAAM;4BACL,SAAQ;4BACR,SAAS;4BACT,2BAAa,8VAAC,yTAAA,CAAA,YAAS;gCAAC,MAAM;;;;;;sCAC/B;;;;;;;;;;;;;;;;;;;;;;;AASf;IA1Wa;MAAA","debugId":null}},
    {"offset": {"line": 873, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/ai-knowledge/src/components/KnowledgeFrameworkManager.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n    Stack,\n    Group,\n    Title,\n    Text,\n    Button,\n    Card,\n    Badge,\n    ActionIcon,\n    Modal,\n    TextInput,\n    Textarea,\n    Select,\n    Grid,\n    Center,\n    Divider,\n    Box\n} from '@mantine/core';\nimport {\n    IconBrain,\n    IconPlus,\n    IconEdit,\n    IconTrash,\n    IconEye,\n    IconRobot,\n    IconExternalLink\n} from '@tabler/icons-react';\nimport { notifications } from '@mantine/notifications';\n// 暂时注释掉PageLayout导入，直接使用Stack布局\n// import { PageLayout } from '../../../apps/desktop/src/components/layout/PageLayout';\n\n// 临时类型定义，应该从@my-platform/types导入\ninterface KnowledgeFramework {\n    id: string;\n    title: string;\n    description: string;\n    domain: string;\n    version: number;\n    is_built_in: boolean;\n    is_public: boolean;\n    local_only: boolean;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface KnowledgeFrameworkManagerProps {\n    onFrameworkSelect?: (framework: KnowledgeFramework) => void;\n}\n\nexport const KnowledgeFrameworkManager: React.FC<KnowledgeFrameworkManagerProps> = ({\n    onFrameworkSelect\n}) => {\n    const [frameworks, setFrameworks] = useState<KnowledgeFramework[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [createModalOpen, setCreateModalOpen] = useState(false);\n    const [aiCreateModalOpen, setAiCreateModalOpen] = useState(false);\n    const [selectedFramework, setSelectedFramework] = useState<KnowledgeFramework | null>(null);\n\n    // 表单状态\n    const [formData, setFormData] = useState({\n        title: '',\n        description: '',\n        domain: ''\n    });\n\n    // AI 创建状态\n    const [aiFormData, setAiFormData] = useState({\n        title: '',\n        description: '',\n        domain: '',\n        targetUser: '',\n        complexity: 'medium'\n    });\n    const [aiGenerating, setAiGenerating] = useState(false);\n\n    useEffect(() => {\n        loadFrameworks();\n    }, []);\n\n    const loadFrameworks = async () => {\n        try {\n            setLoading(true);\n            // 这里应该调用实际的API或Tauri命令\n            // const frameworks = await dbApi.getKnowledgeFrameworks();\n            // setFrameworks(frameworks.data || []);\n\n            // 临时使用空数组\n            setFrameworks([]);\n        } catch (error) {\n            console.error('Failed to load frameworks:', error);\n            notifications.show({\n                title: '加载失败',\n                message: '无法加载知识框架',\n                color: 'red'\n            });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleCreateFramework = async () => {\n        try {\n            // 这里应该调用实际的创建API\n            notifications.show({\n                title: '创建成功',\n                message: '知识框架已创建',\n                color: 'green'\n            });\n            setCreateModalOpen(false);\n            resetFormData();\n            loadFrameworks();\n        } catch (error) {\n            notifications.show({\n                title: '创建失败',\n                message: '无法创建知识框架',\n                color: 'red'\n            });\n        }\n    };\n\n    const handleAICreate = async () => {\n        try {\n            setAiGenerating(true);\n            // 这里应该调用AI创建API\n            notifications.show({\n                title: 'AI 创建成功',\n                message: '知识框架已通过 AI 辅助创建',\n                color: 'green'\n            });\n            setAiCreateModalOpen(false);\n            setAiFormData({\n                title: '',\n                description: '',\n                domain: '',\n                targetUser: '',\n                complexity: 'medium'\n            });\n            loadFrameworks();\n        } catch (error) {\n            notifications.show({\n                title: 'AI 创建失败',\n                message: '无法通过 AI 创建知识框架',\n                color: 'red'\n            });\n        } finally {\n            setAiGenerating(false);\n        }\n    };\n\n    const resetFormData = () => {\n        setFormData({\n            title: '',\n            description: '',\n            domain: ''\n        });\n    };\n\n    if (loading) {\n        return (\n            <Center h={400}>\n                <Stack align=\"center\">\n                    <IconBrain size={64} color=\"var(--mantine-color-gray-5)\" />\n                    <Text c=\"dimmed\">加载知识框架...</Text>\n                </Stack>\n            </Center>\n        );\n    }\n\n    return (\n        <Stack gap=\"lg\" p=\"md\">\n            {/* 头部操作栏 */}\n            <Group justify=\"space-between\">\n                <Group>\n                    <IconBrain size={28} color=\"var(--mantine-color-violet-6)\" />\n                    <Box>\n                        <Title order={2}>知识框架</Title>\n                        <Text c=\"dimmed\" size=\"sm\">创建和管理结构化知识体系</Text>\n                    </Box>\n                </Group>\n\n                <Group>\n                    <Button\n                        leftSection={<IconRobot size={16} />}\n                        variant=\"gradient\"\n                        gradient={{ from: 'violet', to: 'purple' }}\n                        onClick={() => setAiCreateModalOpen(true)}\n                    >\n                        AI 创建\n                    </Button>\n                    <Button\n                        leftSection={<IconPlus size={16} />}\n                        onClick={() => setCreateModalOpen(true)}\n                    >\n                        手动创建\n                    </Button>\n                </Group>\n            </Group>\n\n            {/* 框架列表 */}\n            {frameworks.length === 0 ? (\n                <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n                    <Center>\n                        <Stack align=\"center\" gap=\"md\">\n                            <IconBrain size={64} color=\"var(--mantine-color-gray-5)\" />\n                            <Title order={3} ta=\"center\">还没有知识框架</Title>\n                            <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                                创建您的第一个知识框架来组织和管理知识体系\n                            </Text>\n                            <Group>\n                                <Button\n                                    leftSection={<IconRobot size={16} />}\n                                    variant=\"gradient\"\n                                    gradient={{ from: 'violet', to: 'purple' }}\n                                    onClick={() => setAiCreateModalOpen(true)}\n                                >\n                                    AI 辅助创建\n                                </Button>\n                                <Button\n                                    leftSection={<IconPlus size={16} />}\n                                    variant=\"light\"\n                                    onClick={() => setCreateModalOpen(true)}\n                                >\n                                    手动创建\n                                </Button>\n                            </Group>\n                        </Stack>\n                    </Center>\n                </Card>\n            ) : (\n                <Grid>\n                    {frameworks.map((framework) => (\n                        <Grid.Col key={framework.id} span={{ base: 12, md: 6, lg: 4 }}>\n                            <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder h=\"100%\">\n                                <Stack gap=\"sm\" h=\"100%\">\n                                    <Group justify=\"space-between\">\n                                        <Badge\n                                            variant=\"light\"\n                                            color={framework.local_only ? 'orange' : 'green'}\n                                            size=\"sm\"\n                                        >\n                                            {framework.local_only ? '本地' : '已同步'}\n                                        </Badge>\n                                        <Badge variant=\"outline\" size=\"xs\">\n                                            {framework.domain}\n                                        </Badge>\n                                    </Group>\n\n                                    <Box style={{ flex: 1 }}>\n                                        <Title order={4} mb=\"xs\">{framework.title}</Title>\n                                        <Text size=\"sm\" c=\"dimmed\" mb=\"sm\" lineClamp={3}>\n                                            {framework.description}\n                                        </Text>\n                                    </Box>\n\n                                    <Divider />\n\n                                    <Group justify=\"space-between\">\n                                        <Group gap=\"xs\">\n                                            <ActionIcon\n                                                variant=\"light\"\n                                                size=\"sm\"\n                                                onClick={() => {\n                                                    // 导航到详情页面\n                                                    if (typeof window !== 'undefined') {\n                                                        window.location.href = `/knowledge/${framework.id}`;\n                                                    }\n                                                }}\n                                            >\n                                                <IconEye size={14} />\n                                            </ActionIcon>\n                                            <ActionIcon\n                                                variant=\"light\"\n                                                size=\"sm\"\n                                                onClick={() => {\n                                                    // 编辑功能\n                                                }}\n                                            >\n                                                <IconEdit size={14} />\n                                            </ActionIcon>\n                                        </Group>\n\n                                        <ActionIcon\n                                            variant=\"light\"\n                                            color=\"red\"\n                                            size=\"sm\"\n                                            onClick={() => {\n                                                // 删除功能\n                                            }}\n                                        >\n                                            <IconTrash size={14} />\n                                        </ActionIcon>\n                                    </Group>\n                                </Stack>\n                            </Card>\n                        </Grid.Col>\n                    ))}\n                </Grid>\n            )}\n\n            {/* 创建模态框 */}\n            <Modal\n                opened={createModalOpen}\n                onClose={() => setCreateModalOpen(false)}\n                title=\"创建知识框架\"\n                size=\"md\"\n            >\n                <Stack gap=\"md\">\n                    <TextInput\n                        label=\"标题\"\n                        placeholder=\"React 开发框架\"\n                        value={formData.title}\n                        onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                        required\n                    />\n                    <Textarea\n                        label=\"描述\"\n                        placeholder=\"一个完整的React开发学习框架\"\n                        value={formData.description}\n                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                        minRows={3}\n                        required\n                    />\n                    <TextInput\n                        label=\"领域\"\n                        placeholder=\"前端开发\"\n                        value={formData.domain}\n                        onChange={(e) => setFormData({ ...formData, domain: e.target.value })}\n                        required\n                    />\n                    <Button onClick={handleCreateFramework} loading={loading}>\n                        创建框架\n                    </Button>\n                </Stack>\n            </Modal>\n\n            {/* AI 创建模态框 */}\n            <Modal\n                opened={aiCreateModalOpen}\n                onClose={() => setAiCreateModalOpen(false)}\n                title=\"AI 辅助创建知识框架\"\n                size=\"md\"\n            >\n                <Stack gap=\"md\">\n                    <TextInput\n                        label=\"标题\"\n                        placeholder=\"React 开发框架\"\n                        value={aiFormData.title}\n                        onChange={(e) => setAiFormData({ ...aiFormData, title: e.target.value })}\n                        required\n                    />\n                    <Textarea\n                        label=\"描述\"\n                        placeholder=\"一个完整的React开发学习框架\"\n                        value={aiFormData.description}\n                        onChange={(e) => setAiFormData({ ...aiFormData, description: e.target.value })}\n                        minRows={3}\n                        required\n                    />\n                    <TextInput\n                        label=\"领域\"\n                        placeholder=\"前端开发\"\n                        value={aiFormData.domain}\n                        onChange={(e) => setAiFormData({ ...aiFormData, domain: e.target.value })}\n                        required\n                    />\n                    <TextInput\n                        label=\"目标用户\"\n                        placeholder=\"初学者/中级开发者/高级开发者\"\n                        value={aiFormData.targetUser}\n                        onChange={(e) => setAiFormData({ ...aiFormData, targetUser: e.target.value })}\n                    />\n                    <Select\n                        label=\"复杂度\"\n                        value={aiFormData.complexity}\n                        onChange={(value) => setAiFormData({ ...aiFormData, complexity: value || 'medium' })}\n                        data={[\n                            { value: 'simple', label: '简单' },\n                            { value: 'medium', label: '中等' },\n                            { value: 'complex', label: '复杂' },\n                        ]}\n                    />\n                    <Button onClick={handleAICreate} loading={aiGenerating}>\n                        AI 创建框架\n                    </Button>\n                </Stack>\n            </Modal>\n        </Stack>\n    );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1615, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/ai-knowledge/src/data/builtInFrameworks.ts"],"sourcesContent":["import { KnowledgeFramework } from '@my-platform/types';\n\nexport const builtInFrameworks: KnowledgeFramework[] = [\n  {\n    id: 'framework-office-efficiency',\n    name: '办公效率',\n    description: '提升工作效率的系统性方法',\n    domain: 'productivity',\n    version: 1,\n    isBuiltIn: true,\n    rootNodes: [\n      {\n        id: 'node-time-management',\n        title: '时间管理',\n        description: '科学管理时间，提高工作效率',\n        children: [],\n        questions: [\n          '如何使用番茄工作法？',\n          '什么是时间块管理？',\n          '如何处理时间碎片？'\n        ],\n        urls: [],\n        expanded: false,\n        level: 0,\n        position: { x: 0, y: 0 }\n      },\n      {\n        id: 'node-communication',\n        title: '沟通技巧',\n        description: '有效沟通的方法和技巧',\n        children: [],\n        questions: [\n          '如何进行有效的会议？',\n          '怎样写出清晰的邮件？',\n          '如何处理工作冲突？'\n        ],\n        urls: [],\n        expanded: false,\n        level: 0,\n        position: { x: 200, y: 0 }\n      }\n    ],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: 'framework-digital-marketing',\n    name: '数字营销',\n    description: '数字化时代的营销策略和方法',\n    domain: 'marketing',\n    version: 1,\n    isBuiltIn: true,\n    rootNodes: [\n      {\n        id: 'node-content-marketing',\n        title: '内容营销',\n        description: '通过优质内容吸引和转化客户',\n        children: [],\n        questions: [\n          '如何创作吸引人的内容？',\n          '什么是内容营销漏斗？',\n          '如何分发内容？'\n        ],\n        urls: [],\n        expanded: false,\n        level: 0,\n        position: { x: 0, y: 0 }\n      },\n      {\n        id: 'node-seo',\n        title: 'SEO优化',\n        description: '搜索引擎优化的策略和技巧',\n        children: [],\n        questions: [\n          '什么是关键词研究？',\n          '如何优化网站结构？',\n          '怎样建设外链？'\n        ],\n        urls: [],\n        expanded: false,\n        level: 0,\n        position: { x: 200, y: 0 }\n      }\n    ],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n];"],"names":[],"mappings":";;;AAEO,MAAM,oBAA0C;IACrD;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,QAAQ;QACR,SAAS;QACT,WAAW;QACX,WAAW;YACT;gBACE,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,UAAU,EAAE;gBACZ,WAAW;oBACT;oBACA;oBACA;iBACD;gBACD,MAAM,EAAE;gBACR,UAAU;gBACV,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAG,GAAG;gBAAE;YACzB;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,UAAU,EAAE;gBACZ,WAAW;oBACT;oBACA;oBACA;iBACD;gBACD,MAAM,EAAE;gBACR,UAAU;gBACV,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAK,GAAG;gBAAE;YAC3B;SACD;QACD,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,QAAQ;QACR,SAAS;QACT,WAAW;QACX,WAAW;YACT;gBACE,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,UAAU,EAAE;gBACZ,WAAW;oBACT;oBACA;oBACA;iBACD;gBACD,MAAM,EAAE;gBACR,UAAU;gBACV,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAG,GAAG;gBAAE;YACzB;YACA;gBACE,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,UAAU,EAAE;gBACZ,WAAW;oBACT;oBACA;oBACA;iBACD;gBACD,MAAM,EAAE;gBACR,UAAU;gBACV,OAAO;gBACP,UAAU;oBAAE,GAAG;oBAAK,GAAG;gBAAE;YAC3B;SACD;QACD,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;CACD","debugId":null}},
    {"offset": {"line": 1725, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/ai-knowledge/src/index.ts"],"sourcesContent":["export { KnowledgeFramework } from './components/KnowledgeFramework';\nexport { KnowledgeFrameworkManager } from './components/KnowledgeFrameworkManager';\nexport { builtInFrameworks } from './data/builtInFrameworks';"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 1750, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/flow-design/src/hooks/useFlowDesign.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { FlowDesign } from '@my-platform/types';\n\nexport interface UseFlowDesignOptions {\n  flowId?: string;\n  autoLoad?: boolean;\n}\n\nexport interface UseFlowDesignReturn {\n  flow: FlowDesign | null;\n  flows: FlowDesign[];\n  loading: boolean;\n  error: string | null;\n  createFlow: (flowData: Partial<FlowDesign>) => Promise<FlowDesign>;\n  updateFlow: (flowId: string, updates: Partial<FlowDesign>) => Promise<FlowDesign>;\n  deleteFlow: (flowId: string) => Promise<void>;\n  loadFlow: (flowId: string) => Promise<FlowDesign>;\n  loadFlows: () => Promise<FlowDesign[]>;\n  duplicateFlow: (flowId: string) => Promise<FlowDesign>;\n}\n\nexport const useFlowDesign = (options: UseFlowDesignOptions = {}): UseFlowDesignReturn => {\n  const { flowId, autoLoad = true } = options;\n  \n  const [flow, setFlow] = useState<FlowDesign | null>(null);\n  const [flows, setFlows] = useState<FlowDesign[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (autoLoad) {\n      if (flowId) {\n        loadFlow(flowId);\n      } else {\n        loadFlows();\n      }\n    }\n  }, [flowId, autoLoad]);\n\n  const loadFlow = async (id: string): Promise<FlowDesign> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`/api/flows/${id}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setFlow(data.data);\n        return data.data;\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to load flow';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadFlows = async (): Promise<FlowDesign[]> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch('/api/flows');\n      const data = await response.json();\n      \n      if (data.success) {\n        setFlows(data.data.items);\n        return data.data.items;\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to load flows';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createFlow = async (flowData: Partial<FlowDesign>): Promise<FlowDesign> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch('/api/flows', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(flowData)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        const newFlow = data.data;\n        setFlows(prev => [newFlow, ...prev]);\n        return newFlow;\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create flow';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateFlow = async (id: string, updates: Partial<FlowDesign>): Promise<FlowDesign> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`/api/flows/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        const updatedFlow = data.data;\n        setFlows(prev => prev.map(f => f.id === id ? updatedFlow : f));\n        if (flow?.id === id) {\n          setFlow(updatedFlow);\n        }\n        return updatedFlow;\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update flow';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteFlow = async (id: string): Promise<void> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`/api/flows/${id}`, {\n        method: 'DELETE'\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setFlows(prev => prev.filter(f => f.id !== id));\n        if (flow?.id === id) {\n          setFlow(null);\n        }\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete flow';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const duplicateFlow = async (id: string): Promise<FlowDesign> => {\n    const originalFlow = flows.find(f => f.id === id) || flow;\n    if (!originalFlow) {\n      throw new Error('Flow not found');\n    }\n\n    const duplicatedFlow = {\n      ...originalFlow,\n      title: `${originalFlow.title} (副本)`,\n      id: undefined, // 让服务器生成新ID\n      createdAt: undefined,\n      updatedAt: undefined\n    };\n\n    return createFlow(duplicatedFlow);\n  };\n\n  return {\n    flow,\n    flows,\n    loading,\n    error,\n    createFlow,\n    updateFlow,\n    deleteFlow,\n    loadFlow,\n    loadFlows,\n    duplicateFlow\n  };\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1939, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/flow-design/src/components/FlowDesignManager.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  Card,\n  Badge,\n  ActionIcon,\n  Modal,\n  TextInput,\n  Textarea,\n  Select,\n  MultiSelect,\n  Grid,\n  Paper,\n  Loader,\n  Center,\n  Divider,\n  Alert,\n  Box,\n  Timeline,\n  Anchor\n} from '@mantine/core';\nimport {\n  IconRoute,\n  IconPlus,\n  IconEdit,\n  IconTrash,\n  IconEye,\n  IconUpload,\n  IconRobot,\n  IconClock,\n  IconTarget,\n  IconTool,\n  IconExternalLink\n} from '@tabler/icons-react';\nimport { notifications } from '@mantine/notifications';\nimport { FlowDesign, Tag } from '@my-platform/types';\nimport { useFlowDesign } from '../hooks/useFlowDesign';\n// 暂时注释掉PageLayout导入，直接使用Stack布局\n// import { PageLayout } from '../../../apps/desktop/src/components/layout/PageLayout';\n\ninterface FlowDesignManagerProps {\n  onFlowSelect?: (flow: FlowDesign) => void;\n}\n\nexport const FlowDesignManager: React.FC<FlowDesignManagerProps> = ({\n  onFlowSelect\n}) => {\n  const {\n    flows,\n    loading,\n    createFlow,\n    deleteFlow\n  } = useFlowDesign();\n\n  const [selectedFlow, setSelectedFlow] = useState<FlowDesign | null>(null);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [aiCreateModalOpen, setAiCreateModalOpen] = useState(false);\n  const [viewModalOpen, setViewModalOpen] = useState(false);\n  \n  // 表单状态\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    difficulty: 'medium' as 'easy' | 'medium' | 'hard',\n\n  });\n  \n  // AI 创建状态\n  const [aiFormData, setAiFormData] = useState({\n    title: '',\n    description: '',\n    goals: '',\n    domain: '',\n    difficulty: 'medium' as 'easy' | 'medium' | 'hard',\n    referenceUrls: ''\n  });\n  const [aiGenerating, setAiGenerating] = useState(false);\n\n  const handleCreateFlow = async () => {\n    try {\n      await createFlow(formData);\n      setCreateModalOpen(false);\n      setFormData({\n        title: '',\n        description: '',\n        difficulty: 'medium',\n\n      });\n      \n      notifications.show({\n        title: '创建成功',\n        message: '流程设计已创建',\n        color: 'green'\n      });\n    } catch (error) {\n      notifications.show({\n        title: '创建失败',\n        message: '无法创建流程设计',\n        color: 'red'\n      });\n    }\n  };\n\n  const handleAICreate = async () => {\n    try {\n      setAiGenerating(true);\n      // TODO: 实现AI创建流程的逻辑\n      await createFlow({\n        title: aiFormData.title,\n        description: aiFormData.description,\n        difficulty: aiFormData.difficulty,\n        article: `# ${aiFormData.title}\\n\\n${aiFormData.description}`,\n        steps: [],\n        tools: [],\n        prerequisites: [],\n        outcomes: []\n      });\n      setAiCreateModalOpen(false);\n      setAiFormData({\n        title: '',\n        description: '',\n        goals: '',\n        domain: '',\n        difficulty: 'medium',\n        referenceUrls: ''\n      });\n      \n      notifications.show({\n        title: 'AI 创建成功',\n        message: '流程设计已通过 AI 辅助创建',\n        color: 'green'\n      });\n    } catch (error) {\n      notifications.show({\n        title: 'AI 创建失败',\n        message: error instanceof Error ? error.message : '无法通过 AI 创建流程设计',\n        color: 'red'\n      });\n    } finally {\n      setAiGenerating(false);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'green';\n      case 'medium': return 'yellow';\n      case 'hard': return 'red';\n      default: return 'gray';\n    }\n  };\n\n  const getDifficultyLabel = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return '简单';\n      case 'medium': return '中等';\n      case 'hard': return '困难';\n      default: return '未知';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Center h={400}>\n        <Stack align=\"center\">\n          <Loader size=\"lg\" />\n          <Text c=\"dimmed\">加载流程设计...</Text>\n        </Stack>\n      </Center>\n    );\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部操作栏 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconRoute size={28} color=\"var(--mantine-color-green-6)\" />\n          <Box>\n            <Title order={2}>流程设计</Title>\n            <Text c=\"dimmed\" size=\"sm\">创建和管理执行流程</Text>\n          </Box>\n        </Group>\n        \n        <Group>\n          <Button\n            leftSection={<IconRobot size={16} />}\n            variant=\"gradient\"\n            gradient={{ from: 'green', to: 'teal' }}\n            onClick={() => setAiCreateModalOpen(true)}\n          >\n            AI 创建\n          </Button>\n          <Button\n            leftSection={<IconPlus size={16} />}\n            onClick={() => setCreateModalOpen(true)}\n          >\n            手动创建\n          </Button>\n        </Group>\n      </Group>\n\n      {/* 流程列表 */}\n      {flows.length === 0 ? (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Center>\n            <Stack align=\"center\" gap=\"md\">\n              <IconRoute size={64} color=\"var(--mantine-color-gray-5)\" />\n              <Title order={3} ta=\"center\">还没有流程设计</Title>\n              <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                创建您的第一个流程设计来规划和执行复杂任务\n              </Text>\n              <Group>\n                <Button\n                  leftSection={<IconRobot size={16} />}\n                  variant=\"gradient\"\n                  gradient={{ from: 'green', to: 'teal' }}\n                  onClick={() => setAiCreateModalOpen(true)}\n                >\n                  AI 辅助创建\n                </Button>\n                <Button\n                  leftSection={<IconPlus size={16} />}\n                  variant=\"light\"\n                  onClick={() => setCreateModalOpen(true)}\n                >\n                  手动创建\n                </Button>\n              </Group>\n            </Stack>\n          </Center>\n        </Card>\n      ) : (\n        <Grid>\n          {flows.map((flow) => (\n            <Grid.Col key={flow.id} span={{ base: 12, md: 6, lg: 4 }}>\n              <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder h=\"100%\">\n                <Stack gap=\"sm\" h=\"100%\">\n                  <Group justify=\"space-between\">\n                    <Badge\n                      variant=\"light\"\n                      color={flow.localOnly ? 'orange' : 'green'}\n                      size=\"sm\"\n                    >\n                      {flow.localOnly ? '本地' : '已同步'}\n                    </Badge>\n                    <Badge\n                      variant=\"light\"\n                      color={getDifficultyColor(flow.difficulty)}\n                      size=\"sm\"\n                    >\n                      {getDifficultyLabel(flow.difficulty)}\n                    </Badge>\n                  </Group>\n\n                  <Box style={{ flex: 1 }}>\n                    <Title order={4} mb=\"xs\">{flow.title}</Title>\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"sm\" lineClamp={2}>\n                      {flow.description}\n                    </Text>\n                    \n                    <Group gap=\"xs\" mb=\"sm\">\n                      {flow.totalTime && (\n                        <Group gap=\"xs\">\n                          <IconClock size={14} />\n                          <Text size=\"xs\" c=\"dimmed\">{flow.totalTime}</Text>\n                        </Group>\n                      )}\n                      {flow.steps && (\n                        <Group gap=\"xs\">\n                          <IconTarget size={14} />\n                          <Text size=\"xs\" c=\"dimmed\">{flow.steps.length} 步骤</Text>\n                        </Group>\n                      )}\n                      {flow.tools && (\n                        <Group gap=\"xs\">\n                          <IconTool size={14} />\n                          <Text size=\"xs\" c=\"dimmed\">{flow.tools.length} 工具</Text>\n                        </Group>\n                      )}\n                    </Group>\n                  </Box>\n\n                  <Divider />\n\n                  <Group justify=\"space-between\">\n                    <Group gap=\"xs\">\n                      <ActionIcon\n                        variant=\"light\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // 导航到详情页面\n                          if (typeof window !== 'undefined') {\n                            window.location.href = `/flows/${flow.id}`;\n                          }\n                        }}\n                      >\n                        <IconEye size={14} />\n                      </ActionIcon>\n                      <ActionIcon\n                        variant=\"light\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // TODO: 编辑功能\n                        }}\n                      >\n                        <IconEdit size={14} />\n                      </ActionIcon>\n                      {flow.localOnly && (\n                        <ActionIcon\n                          variant=\"light\"\n                          color=\"blue\"\n                          size=\"sm\"\n                          onClick={() => {\n                            // TODO: 实现同步到服务器的逻辑\n                            console.log('Sync to server:', flow.id);\n                          }}\n                        >\n                          <IconUpload size={14} />\n                        </ActionIcon>\n                      )}\n                    </Group>\n                    \n                    <ActionIcon\n                      variant=\"light\"\n                      color=\"red\"\n                      size=\"sm\"\n                      onClick={() => deleteFlow(flow.id)}\n                    >\n                      <IconTrash size={14} />\n                    </ActionIcon>\n                  </Group>\n                </Stack>\n              </Card>\n            </Grid.Col>\n          ))}\n        </Grid>\n      )}\n\n      {/* 手动创建模态框 */}\n      <Modal\n        opened={createModalOpen}\n        onClose={() => setCreateModalOpen(false)}\n        title=\"创建流程设计\"\n        size=\"lg\"\n      >\n        <Stack gap=\"md\">\n          <TextInput\n            label=\"流程标题\"\n            placeholder=\"输入流程标题\"\n            value={formData.title}\n            onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n            required\n          />\n          \n          <Textarea\n            label=\"流程描述\"\n            placeholder=\"描述这个流程的目的和概述\"\n            value={formData.description}\n            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            minRows={3}\n            required\n          />\n          \n          <Select\n            label=\"难度等级\"\n            value={formData.difficulty}\n            onChange={(value) => setFormData({ ...formData, difficulty: value as any })}\n            data={[\n              { value: 'easy', label: '简单' },\n              { value: 'medium', label: '中等' },\n              { value: 'hard', label: '困难' }\n            ]}\n          />\n          \n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button variant=\"light\" onClick={() => setCreateModalOpen(false)}>\n              取消\n            </Button>\n            <Button onClick={handleCreateFlow} disabled={!formData.title || !formData.description}>\n              创建\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n\n      {/* AI 创建模态框 */}\n      <Modal\n        opened={aiCreateModalOpen}\n        onClose={() => setAiCreateModalOpen(false)}\n        title=\"AI 辅助创建流程设计\"\n        size=\"lg\"\n      >\n        <Stack gap=\"md\">\n          <Alert color=\"blue\" variant=\"light\">\n            <Text size=\"sm\">\n              AI 将根据您提供的信息自动生成详细的流程步骤和说明\n            </Text>\n          </Alert>\n          \n          <TextInput\n            label=\"流程标题\"\n            placeholder=\"例如：网站开发完整流程\"\n            value={aiFormData.title}\n            onChange={(e) => setAiFormData({ ...aiFormData, title: e.target.value })}\n            required\n          />\n          \n          <Textarea\n            label=\"流程描述\"\n            placeholder=\"详细描述这个流程要解决的问题和目标\"\n            value={aiFormData.description}\n            onChange={(e) => setAiFormData({ ...aiFormData, description: e.target.value })}\n            minRows={3}\n            required\n          />\n          \n          <Textarea\n            label=\"具体目标\"\n            placeholder=\"列出这个流程要达成的具体目标\"\n            value={aiFormData.goals}\n            onChange={(e) => setAiFormData({ ...aiFormData, goals: e.target.value })}\n            minRows={2}\n          />\n          \n          <TextInput\n            label=\"领域/行业\"\n            placeholder=\"例如：软件开发、市场营销、项目管理\"\n            value={aiFormData.domain}\n            onChange={(e) => setAiFormData({ ...aiFormData, domain: e.target.value })}\n          />\n          \n          <Select\n            label=\"难度等级\"\n            value={aiFormData.difficulty}\n            onChange={(value) => setAiFormData({ ...aiFormData, difficulty: value as any })}\n            data={[\n              { value: 'easy', label: '简单' },\n              { value: 'medium', label: '中等' },\n              { value: 'hard', label: '困难' }\n            ]}\n          />\n          \n          <Textarea\n            label=\"参考资料 (可选)\"\n            placeholder=\"提供相关的网址、文档或其他参考资料\"\n            value={aiFormData.referenceUrls}\n            onChange={(e) => setAiFormData({ ...aiFormData, referenceUrls: e.target.value })}\n            minRows={2}\n          />\n          \n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button variant=\"light\" onClick={() => setAiCreateModalOpen(false)}>\n              取消\n            </Button>\n            <Button \n              onClick={handleAICreate} \n              disabled={!aiFormData.title || !aiFormData.description}\n              loading={aiGenerating}\n              leftSection={<IconRobot size={16} />}\n            >\n              AI 生成流程\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n\n      {/* 查看详情模态框 */}\n      <Modal\n        opened={viewModalOpen}\n        onClose={() => setViewModalOpen(false)}\n        title={selectedFlow?.title || '流程详情'}\n        size=\"xl\"\n      >\n        {selectedFlow && (\n          <Stack gap=\"md\">\n            <Group>\n              <Badge color={getDifficultyColor(selectedFlow.difficulty)}>\n                {getDifficultyLabel(selectedFlow.difficulty)}\n              </Badge>\n              {selectedFlow.totalTime && (\n                <Badge variant=\"light\">\n                  <Group gap=\"xs\">\n                    <IconClock size={12} />\n                    {selectedFlow.totalTime}\n                  </Group>\n                </Badge>\n              )}\n            </Group>\n            \n            <Text>{selectedFlow.description}</Text>\n            \n            {selectedFlow.article && (\n              <Paper p=\"md\" withBorder>\n                <Text size=\"sm\" style={{ whiteSpace: 'pre-wrap' }}>\n                  {selectedFlow.article}\n                </Text>\n              </Paper>\n            )}\n            \n            {selectedFlow.steps && selectedFlow.steps.length > 0 && (\n              <Box>\n                <Title order={4} mb=\"md\">流程步骤</Title>\n                <Timeline>\n                  {selectedFlow.steps.map((step, index) => (\n                    <Timeline.Item key={index} title={step.title}>\n                      <Text size=\"sm\" c=\"dimmed\">{step.description}</Text>\n                      {step.estimatedTime && (\n                        <Text size=\"xs\" c=\"dimmed\" mt=\"xs\">\n                          预计时间: {step.estimatedTime}\n                        </Text>\n                      )}\n                    </Timeline.Item>\n                  ))}\n                </Timeline>\n              </Box>\n            )}\n          </Stack>\n        )}\n      </Modal>\n    </Stack>\n  );\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAEA;;;AA1CA;;;;;;AAkDO,MAAM,oBAAsD;QAAC,EAClE,YAAY,EACb;;IACC,MAAM,EACJ,KAAK,EACL,OAAO,EACP,UAAU,EACV,UAAU,EACX,GAAG,CAAA,GAAA,8JAAA,CAAA,gBAAa,AAAD;IAEhB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAqB;IACpE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,OAAO;IACP,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;QACvC,OAAO;QACP,aAAa;QACb,YAAY;IAEd;IAEA,UAAU;IACV,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;QAC3C,OAAO;QACP,aAAa;QACb,OAAO;QACP,QAAQ;QACR,YAAY;QACZ,eAAe;IACjB;IACA,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,mBAAmB;QACvB,IAAI;YACF,MAAM,WAAW;YACjB,mBAAmB;YACnB,YAAY;gBACV,OAAO;gBACP,aAAa;gBACb,YAAY;YAEd;YAEA,6XAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACjB,OAAO;gBACP,SAAS;gBACT,OAAO;YACT;QACF,EAAE,OAAO,OAAO;YACd,6XAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACjB,OAAO;gBACP,SAAS;gBACT,OAAO;YACT;QACF;IACF;IAEA,MAAM,iBAAiB;QACrB,IAAI;YACF,gBAAgB;YAChB,oBAAoB;YACpB,MAAM,WAAW;gBACf,OAAO,WAAW,KAAK;gBACvB,aAAa,WAAW,WAAW;gBACnC,YAAY,WAAW,UAAU;gBACjC,SAAS,AAAC,KAA2B,OAAvB,WAAW,KAAK,EAAC,QAA6B,OAAvB,WAAW,WAAW;gBAC3D,OAAO,EAAE;gBACT,OAAO,EAAE;gBACT,eAAe,EAAE;gBACjB,UAAU,EAAE;YACd;YACA,qBAAqB;YACrB,cAAc;gBACZ,OAAO;gBACP,aAAa;gBACb,OAAO;gBACP,QAAQ;gBACR,YAAY;gBACZ,eAAe;YACjB;YAEA,6XAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACjB,OAAO;gBACP,SAAS;gBACT,OAAO;YACT;QACF,EAAE,OAAO,OAAO;YACd,6XAAA,CAAA,gBAAa,CAAC,IAAI,CAAC;gBACjB,OAAO;gBACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;gBAClD,OAAO;YACT;QACF,SAAU;YACR,gBAAgB;QAClB;IACF;IAEA,MAAM,qBAAqB,CAAC;QAC1B,OAAQ;YACN,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAQ,OAAO;YACpB;gBAAS,OAAO;QAClB;IACF;IAEA,MAAM,qBAAqB,CAAC;QAC1B,OAAQ;YACN,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAQ,OAAO;YACpB;gBAAS,OAAO;QAClB;IACF;IAEA,IAAI,SAAS;QACX,qBACE,8VAAC,wZAAA,CAAA,SAAM;YAAC,GAAG;sBACT,cAAA,8VAAC,sZAAA,CAAA,QAAK;gBAAC,OAAM;;kCACX,8VAAC,wZAAA,CAAA,SAAM;wBAAC,MAAK;;;;;;kCACb,8VAAC,oZAAA,CAAA,OAAI;wBAAC,GAAE;kCAAS;;;;;;;;;;;;;;;;;IAIzB;IAEA,qBACE,8VAAC,sZAAA,CAAA,QAAK;QAAC,KAAI;QAAK,GAAE;;0BAEhB,8VAAC,sZAAA,CAAA,QAAK;gBAAC,SAAQ;;kCACb,8VAAC,sZAAA,CAAA,QAAK;;0CACJ,8VAAC,yTAAA,CAAA,YAAS;gCAAC,MAAM;gCAAI,OAAM;;;;;;0CAC3B,8VAAC,4YAAA,CAAA,MAAG;;kDACF,8VAAC,sZAAA,CAAA,QAAK;wCAAC,OAAO;kDAAG;;;;;;kDACjB,8VAAC,oZAAA,CAAA,OAAI;wCAAC,GAAE;wCAAS,MAAK;kDAAK;;;;;;;;;;;;;;;;;;kCAI/B,8VAAC,sZAAA,CAAA,QAAK;;0CACJ,8VAAC,wZAAA,CAAA,SAAM;gCACL,2BAAa,8VAAC,yTAAA,CAAA,YAAS;oCAAC,MAAM;;;;;;gCAC9B,SAAQ;gCACR,UAAU;oCAAE,MAAM;oCAAS,IAAI;gCAAO;gCACtC,SAAS,IAAM,qBAAqB;0CACrC;;;;;;0CAGD,8VAAC,wZAAA,CAAA,SAAM;gCACL,2BAAa,8VAAC,uTAAA,CAAA,WAAQ;oCAAC,MAAM;;;;;;gCAC7B,SAAS,IAAM,mBAAmB;0CACnC;;;;;;;;;;;;;;;;;;YAOJ,MAAM,MAAM,KAAK,kBAChB,8VAAC,oZAAA,CAAA,OAAI;gBAAC,QAAO;gBAAK,SAAQ;gBAAK,QAAO;gBAAK,UAAU;0BACnD,cAAA,8VAAC,wZAAA,CAAA,SAAM;8BACL,cAAA,8VAAC,sZAAA,CAAA,QAAK;wBAAC,OAAM;wBAAS,KAAI;;0CACxB,8VAAC,yTAAA,CAAA,YAAS;gCAAC,MAAM;gCAAI,OAAM;;;;;;0CAC3B,8VAAC,sZAAA,CAAA,QAAK;gCAAC,OAAO;gCAAG,IAAG;0CAAS;;;;;;0CAC7B,8VAAC,oZAAA,CAAA,OAAI;gCAAC,GAAE;gCAAS,IAAG;gCAAS,KAAK;0CAAK;;;;;;0CAGvC,8VAAC,sZAAA,CAAA,QAAK;;kDACJ,8VAAC,wZAAA,CAAA,SAAM;wCACL,2BAAa,8VAAC,yTAAA,CAAA,YAAS;4CAAC,MAAM;;;;;;wCAC9B,SAAQ;wCACR,UAAU;4CAAE,MAAM;4CAAS,IAAI;wCAAO;wCACtC,SAAS,IAAM,qBAAqB;kDACrC;;;;;;kDAGD,8VAAC,wZAAA,CAAA,SAAM;wCACL,2BAAa,8VAAC,uTAAA,CAAA,WAAQ;4CAAC,MAAM;;;;;;wCAC7B,SAAQ;wCACR,SAAS,IAAM,mBAAmB;kDACnC;;;;;;;;;;;;;;;;;;;;;;;;;;;yEAQT,8VAAC,oZAAA,CAAA,OAAI;0BACF,MAAM,GAAG,CAAC,CAAC,qBACV,8VAAC,oZAAA,CAAA,OAAI,CAAC,GAAG;wBAAe,MAAM;4BAAE,MAAM;4BAAI,IAAI;4BAAG,IAAI;wBAAE;kCACrD,cAAA,8VAAC,oZAAA,CAAA,OAAI;4BAAC,QAAO;4BAAK,SAAQ;4BAAK,QAAO;4BAAK,UAAU;4BAAC,GAAE;sCACtD,cAAA,8VAAC,sZAAA,CAAA,QAAK;gCAAC,KAAI;gCAAK,GAAE;;kDAChB,8VAAC,sZAAA,CAAA,QAAK;wCAAC,SAAQ;;0DACb,8VAAC,sZAAA,CAAA,QAAK;gDACJ,SAAQ;gDACR,OAAO,KAAK,SAAS,GAAG,WAAW;gDACnC,MAAK;0DAEJ,KAAK,SAAS,GAAG,OAAO;;;;;;0DAE3B,8VAAC,sZAAA,CAAA,QAAK;gDACJ,SAAQ;gDACR,OAAO,mBAAmB,KAAK,UAAU;gDACzC,MAAK;0DAEJ,mBAAmB,KAAK,UAAU;;;;;;;;;;;;kDAIvC,8VAAC,4YAAA,CAAA,MAAG;wCAAC,OAAO;4CAAE,MAAM;wCAAE;;0DACpB,8VAAC,sZAAA,CAAA,QAAK;gDAAC,OAAO;gDAAG,IAAG;0DAAM,KAAK,KAAK;;;;;;0DACpC,8VAAC,oZAAA,CAAA,OAAI;gDAAC,MAAK;gDAAK,GAAE;gDAAS,IAAG;gDAAK,WAAW;0DAC3C,KAAK,WAAW;;;;;;0DAGnB,8VAAC,sZAAA,CAAA,QAAK;gDAAC,KAAI;gDAAK,IAAG;;oDAChB,KAAK,SAAS,kBACb,8VAAC,sZAAA,CAAA,QAAK;wDAAC,KAAI;;0EACT,8VAAC,yTAAA,CAAA,YAAS;gEAAC,MAAM;;;;;;0EACjB,8VAAC,oZAAA,CAAA,OAAI;gEAAC,MAAK;gEAAK,GAAE;0EAAU,KAAK,SAAS;;;;;;;;;;;;oDAG7C,KAAK,KAAK,kBACT,8VAAC,sZAAA,CAAA,QAAK;wDAAC,KAAI;;0EACT,8VAAC,2TAAA,CAAA,aAAU;gEAAC,MAAM;;;;;;0EAClB,8VAAC,oZAAA,CAAA,OAAI;gEAAC,MAAK;gEAAK,GAAE;;oEAAU,KAAK,KAAK,CAAC,MAAM;oEAAC;;;;;;;;;;;;;oDAGjD,KAAK,KAAK,kBACT,8VAAC,sZAAA,CAAA,QAAK;wDAAC,KAAI;;0EACT,8VAAC,uTAAA,CAAA,WAAQ;gEAAC,MAAM;;;;;;0EAChB,8VAAC,oZAAA,CAAA,OAAI;gEAAC,MAAK;gEAAK,GAAE;;oEAAU,KAAK,KAAK,CAAC,MAAM;oEAAC;;;;;;;;;;;;;;;;;;;;;;;;;kDAMtD,8VAAC,0ZAAA,CAAA,UAAO;;;;;kDAER,8VAAC,sZAAA,CAAA,QAAK;wCAAC,SAAQ;;0DACb,8VAAC,sZAAA,CAAA,QAAK;gDAAC,KAAI;;kEACT,8VAAC,gaAAA,CAAA,aAAU;wDACT,SAAQ;wDACR,MAAK;wDACL,SAAS;4DACP,UAAU;4DACV,wCAAmC;gEACjC,OAAO,QAAQ,CAAC,IAAI,GAAG,AAAC,UAAiB,OAAR,KAAK,EAAE;4DAC1C;wDACF;kEAEA,cAAA,8VAAC,qTAAA,CAAA,UAAO;4DAAC,MAAM;;;;;;;;;;;kEAEjB,8VAAC,gaAAA,CAAA,aAAU;wDACT,SAAQ;wDACR,MAAK;wDACL,SAAS;wDACP,aAAa;wDACf;kEAEA,cAAA,8VAAC,uTAAA,CAAA,WAAQ;4DAAC,MAAM;;;;;;;;;;;oDAEjB,KAAK,SAAS,kBACb,8VAAC,gaAAA,CAAA,aAAU;wDACT,SAAQ;wDACR,OAAM;wDACN,MAAK;wDACL,SAAS;4DACP,oBAAoB;4DACpB,QAAQ,GAAG,CAAC,mBAAmB,KAAK,EAAE;wDACxC;kEAEA,cAAA,8VAAC,2TAAA,CAAA,aAAU;4DAAC,MAAM;;;;;;;;;;;;;;;;;0DAKxB,8VAAC,gaAAA,CAAA,aAAU;gDACT,SAAQ;gDACR,OAAM;gDACN,MAAK;gDACL,SAAS,IAAM,WAAW,KAAK,EAAE;0DAEjC,cAAA,8VAAC,yTAAA,CAAA,YAAS;oDAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA9FZ,KAAK,EAAE;;;;;;;;;;0BAyG5B,8VAAC,sZAAA,CAAA,QAAK;gBACJ,QAAQ;gBACR,SAAS,IAAM,mBAAmB;gBAClC,OAAM;gBACN,MAAK;0BAEL,cAAA,8VAAC,sZAAA,CAAA,QAAK;oBAAC,KAAI;;sCACT,8VAAC,8ZAAA,CAAA,YAAS;4BACR,OAAM;4BACN,aAAY;4BACZ,OAAO,SAAS,KAAK;4BACrB,UAAU,CAAC,IAAM,YAAY;oCAAE,GAAG,QAAQ;oCAAE,OAAO,EAAE,MAAM,CAAC,KAAK;gCAAC;4BAClE,QAAQ;;;;;;sCAGV,8VAAC,4ZAAA,CAAA,WAAQ;4BACP,OAAM;4BACN,aAAY;4BACZ,OAAO,SAAS,WAAW;4BAC3B,UAAU,CAAC,IAAM,YAAY;oCAAE,GAAG,QAAQ;oCAAE,aAAa,EAAE,MAAM,CAAC,KAAK;gCAAC;4BACxE,SAAS;4BACT,QAAQ;;;;;;sCAGV,8VAAC,wZAAA,CAAA,SAAM;4BACL,OAAM;4BACN,OAAO,SAAS,UAAU;4BAC1B,UAAU,CAAC,QAAU,YAAY;oCAAE,GAAG,QAAQ;oCAAE,YAAY;gCAAa;4BACzE,MAAM;gCACJ;oCAAE,OAAO;oCAAQ,OAAO;gCAAK;gCAC7B;oCAAE,OAAO;oCAAU,OAAO;gCAAK;gCAC/B;oCAAE,OAAO;oCAAQ,OAAO;gCAAK;6BAC9B;;;;;;sCAGH,8VAAC,sZAAA,CAAA,QAAK;4BAAC,SAAQ;4BAAW,IAAG;;8CAC3B,8VAAC,wZAAA,CAAA,SAAM;oCAAC,SAAQ;oCAAQ,SAAS,IAAM,mBAAmB;8CAAQ;;;;;;8CAGlE,8VAAC,wZAAA,CAAA,SAAM;oCAAC,SAAS;oCAAkB,UAAU,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,WAAW;8CAAE;;;;;;;;;;;;;;;;;;;;;;;0BAQ7F,8VAAC,sZAAA,CAAA,QAAK;gBACJ,QAAQ;gBACR,SAAS,IAAM,qBAAqB;gBACpC,OAAM;gBACN,MAAK;0BAEL,cAAA,8VAAC,sZAAA,CAAA,QAAK;oBAAC,KAAI;;sCACT,8VAAC,sZAAA,CAAA,QAAK;4BAAC,OAAM;4BAAO,SAAQ;sCAC1B,cAAA,8VAAC,oZAAA,CAAA,OAAI;gCAAC,MAAK;0CAAK;;;;;;;;;;;sCAKlB,8VAAC,8ZAAA,CAAA,YAAS;4BACR,OAAM;4BACN,aAAY;4BACZ,OAAO,WAAW,KAAK;4BACvB,UAAU,CAAC,IAAM,cAAc;oCAAE,GAAG,UAAU;oCAAE,OAAO,EAAE,MAAM,CAAC,KAAK;gCAAC;4BACtE,QAAQ;;;;;;sCAGV,8VAAC,4ZAAA,CAAA,WAAQ;4BACP,OAAM;4BACN,aAAY;4BACZ,OAAO,WAAW,WAAW;4BAC7B,UAAU,CAAC,IAAM,cAAc;oCAAE,GAAG,UAAU;oCAAE,aAAa,EAAE,MAAM,CAAC,KAAK;gCAAC;4BAC5E,SAAS;4BACT,QAAQ;;;;;;sCAGV,8VAAC,4ZAAA,CAAA,WAAQ;4BACP,OAAM;4BACN,aAAY;4BACZ,OAAO,WAAW,KAAK;4BACvB,UAAU,CAAC,IAAM,cAAc;oCAAE,GAAG,UAAU;oCAAE,OAAO,EAAE,MAAM,CAAC,KAAK;gCAAC;4BACtE,SAAS;;;;;;sCAGX,8VAAC,8ZAAA,CAAA,YAAS;4BACR,OAAM;4BACN,aAAY;4BACZ,OAAO,WAAW,MAAM;4BACxB,UAAU,CAAC,IAAM,cAAc;oCAAE,GAAG,UAAU;oCAAE,QAAQ,EAAE,MAAM,CAAC,KAAK;gCAAC;;;;;;sCAGzE,8VAAC,wZAAA,CAAA,SAAM;4BACL,OAAM;4BACN,OAAO,WAAW,UAAU;4BAC5B,UAAU,CAAC,QAAU,cAAc;oCAAE,GAAG,UAAU;oCAAE,YAAY;gCAAa;4BAC7E,MAAM;gCACJ;oCAAE,OAAO;oCAAQ,OAAO;gCAAK;gCAC7B;oCAAE,OAAO;oCAAU,OAAO;gCAAK;gCAC/B;oCAAE,OAAO;oCAAQ,OAAO;gCAAK;6BAC9B;;;;;;sCAGH,8VAAC,4ZAAA,CAAA,WAAQ;4BACP,OAAM;4BACN,aAAY;4BACZ,OAAO,WAAW,aAAa;4BAC/B,UAAU,CAAC,IAAM,cAAc;oCAAE,GAAG,UAAU;oCAAE,eAAe,EAAE,MAAM,CAAC,KAAK;gCAAC;4BAC9E,SAAS;;;;;;sCAGX,8VAAC,sZAAA,CAAA,QAAK;4BAAC,SAAQ;4BAAW,IAAG;;8CAC3B,8VAAC,wZAAA,CAAA,SAAM;oCAAC,SAAQ;oCAAQ,SAAS,IAAM,qBAAqB;8CAAQ;;;;;;8CAGpE,8VAAC,wZAAA,CAAA,SAAM;oCACL,SAAS;oCACT,UAAU,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,WAAW;oCACtD,SAAS;oCACT,2BAAa,8VAAC,yTAAA,CAAA,YAAS;wCAAC,MAAM;;;;;;8CAC/B;;;;;;;;;;;;;;;;;;;;;;;0BAQP,8VAAC,sZAAA,CAAA,QAAK;gBACJ,QAAQ;gBACR,SAAS,IAAM,iBAAiB;gBAChC,OAAO,CAAA,yBAAA,mCAAA,aAAc,KAAK,KAAI;gBAC9B,MAAK;0BAEJ,8BACC,8VAAC,sZAAA,CAAA,QAAK;oBAAC,KAAI;;sCACT,8VAAC,sZAAA,CAAA,QAAK;;8CACJ,8VAAC,sZAAA,CAAA,QAAK;oCAAC,OAAO,mBAAmB,aAAa,UAAU;8CACrD,mBAAmB,aAAa,UAAU;;;;;;gCAE5C,aAAa,SAAS,kBACrB,8VAAC,sZAAA,CAAA,QAAK;oCAAC,SAAQ;8CACb,cAAA,8VAAC,sZAAA,CAAA,QAAK;wCAAC,KAAI;;0DACT,8VAAC,yTAAA,CAAA,YAAS;gDAAC,MAAM;;;;;;4CAChB,aAAa,SAAS;;;;;;;;;;;;;;;;;;sCAM/B,8VAAC,oZAAA,CAAA,OAAI;sCAAE,aAAa,WAAW;;;;;;wBAE9B,aAAa,OAAO,kBACnB,8VAAC,sZAAA,CAAA,QAAK;4BAAC,GAAE;4BAAK,UAAU;sCACtB,cAAA,8VAAC,oZAAA,CAAA,OAAI;gCAAC,MAAK;gCAAK,OAAO;oCAAE,YAAY;gCAAW;0CAC7C,aAAa,OAAO;;;;;;;;;;;wBAK1B,aAAa,KAAK,IAAI,aAAa,KAAK,CAAC,MAAM,GAAG,mBACjD,8VAAC,4YAAA,CAAA,MAAG;;8CACF,8VAAC,sZAAA,CAAA,QAAK;oCAAC,OAAO;oCAAG,IAAG;8CAAK;;;;;;8CACzB,8VAAC,4ZAAA,CAAA,WAAQ;8CACN,aAAa,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,sBAC7B,8VAAC,4ZAAA,CAAA,WAAQ,CAAC,IAAI;4CAAa,OAAO,KAAK,KAAK;;8DAC1C,8VAAC,oZAAA,CAAA,OAAI;oDAAC,MAAK;oDAAK,GAAE;8DAAU,KAAK,WAAW;;;;;;gDAC3C,KAAK,aAAa,kBACjB,8VAAC,oZAAA,CAAA,OAAI;oDAAC,MAAK;oDAAK,GAAE;oDAAS,IAAG;;wDAAK;wDAC1B,KAAK,aAAa;;;;;;;;2CAJX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBxC;GA9da;;QAQP,8JAAA,CAAA,gBAAa;;;KARN","debugId":null}},
    {"offset": {"line": 3038, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/flow-design/src/components/FlowDesignViewer.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  Card,\n  Badge,\n  ActionIcon,\n  Paper,\n  Divider,\n  Box,\n  Timeline,\n  Anchor,\n  Progress,\n  Stepper\n} from '@mantine/core';\nimport {\n  IconRoute,\n  IconClock,\n  IconTarget,\n  IconTool,\n  IconExternalLink,\n  IconCheck,\n  IconArrowRight,\n  IconPlayerPlay,\n  IconPlayerPause,\n  IconRefresh,\n  IconShare\n} from '@tabler/icons-react';\nimport { FlowDesign, FlowStep } from '@my-platform/types';\n\ninterface FlowDesignViewerProps {\n  flow: FlowDesign;\n  onStepComplete?: (stepId: string) => void;\n  onFlowComplete?: () => void;\n  readonly?: boolean;\n}\n\nexport const FlowDesignViewer: React.FC<FlowDesignViewerProps> = ({\n  flow,\n  onStepComplete,\n  onFlowComplete,\n  readonly = false\n}) => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<Set<string>>(new Set());\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'green';\n      case 'medium': return 'yellow';\n      case 'hard': return 'red';\n      default: return 'gray';\n    }\n  };\n\n  const getDifficultyLabel = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return '简单';\n      case 'medium': return '中等';\n      case 'hard': return '困难';\n      default: return '未知';\n    }\n  };\n\n  const handleStepComplete = (step: FlowStep) => {\n    const newCompleted = new Set(completedSteps);\n    newCompleted.add(step.id);\n    setCompletedSteps(newCompleted);\n    \n    onStepComplete?.(step.id);\n    \n    // 自动进入下一步\n    if (activeStep < flow.steps.length - 1) {\n      setActiveStep(activeStep + 1);\n    } else {\n      // 流程完成\n      setIsExecuting(false);\n      onFlowComplete?.();\n    }\n  };\n\n  const getProgress = () => {\n    return (completedSteps.size / flow.steps.length) * 100;\n  };\n\n  return (\n    <Stack gap=\"lg\">\n      {/* 流程头部信息 */}\n      <Paper p=\"lg\" withBorder>\n        <Group justify=\"space-between\" mb=\"md\">\n          <Group>\n            <IconRoute size={32} color=\"var(--mantine-color-teal-6)\" />\n            <Box>\n              <Title order={2}>{flow.title}</Title>\n              <Text c=\"dimmed\">{flow.description}</Text>\n            </Box>\n          </Group>\n          \n          <Group>\n            <Badge color={getDifficultyColor(flow.difficulty)}>\n              {getDifficultyLabel(flow.difficulty)}\n            </Badge>\n            {flow.totalTime && (\n              <Badge variant=\"outline\">\n                <Group gap=\"xs\">\n                  <IconClock size={12} />\n                  {flow.totalTime}\n                </Group>\n              </Badge>\n            )}\n            {!readonly && (\n              <Button\n                leftSection={isExecuting ? <IconPlayerPause size={16} /> : <IconPlayerPlay size={16} />}\n                onClick={() => setIsExecuting(!isExecuting)}\n                variant={isExecuting ? 'light' : 'filled'}\n              >\n                {isExecuting ? '暂停执行' : '开始执行'}\n              </Button>\n            )}\n          </Group>\n        </Group>\n\n        {/* 进度条 */}\n        {!readonly && (\n          <Box>\n            <Group justify=\"space-between\" mb=\"xs\">\n              <Text size=\"sm\" fw={500}>执行进度</Text>\n              <Text size=\"sm\" c=\"dimmed\">\n                {completedSteps.size} / {flow.steps.length} 步骤完成\n              </Text>\n            </Group>\n            <Progress value={getProgress()} size=\"lg\" radius=\"md\" />\n          </Box>\n        )}\n      </Paper>\n\n      {/* 前置条件 */}\n      {flow.prerequisites && flow.prerequisites.length > 0 && (\n        <Card withBorder>\n          <Title order={4} mb=\"md\">前置条件</Title>\n          <Stack gap=\"xs\">\n            {flow.prerequisites.map((prereq, index) => (\n              <Group key={index} gap=\"xs\">\n                <IconCheck size={16} color=\"var(--mantine-color-green-6)\" />\n                <Text size=\"sm\">{prereq}</Text>\n              </Group>\n            ))}\n          </Stack>\n        </Card>\n      )}\n\n      {/* 执行步骤 */}\n      <Card withBorder>\n        <Title order={4} mb=\"md\">执行步骤</Title>\n        \n        {readonly ? (\n          // 只读模式：使用Timeline展示\n          <Timeline active={-1} bulletSize={24} lineWidth={2}>\n            {flow.steps.map((step, index) => (\n              <Timeline.Item\n                key={step.id}\n                bullet={<Text size=\"xs\">{index + 1}</Text>}\n                title={step.title}\n              >\n                <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">\n                  {step.description}\n                </Text>\n                \n                <Group gap=\"xs\" mb=\"sm\">\n                  {step.estimatedTime && (\n                    <Badge size=\"xs\" variant=\"outline\">\n                      预计 {step.estimatedTime}\n                    </Badge>\n                  )}\n                  {step.difficulty && (\n                    <Badge size=\"xs\" color={getDifficultyColor(step.difficulty)}>\n                      {getDifficultyLabel(step.difficulty)}\n                    </Badge>\n                  )}\n                </Group>\n\n                {step.resources && step.resources.length > 0 && (\n                  <Stack gap=\"xs\" mt=\"xs\">\n                    <Text size=\"sm\" fw={500}>相关资源：</Text>\n                    {step.resources.map((resource) => (\n                      <Anchor\n                        key={resource.id}\n                        href={resource.url}\n                        target=\"_blank\"\n                        size=\"sm\"\n                      >\n                        <Group gap=\"xs\">\n                          <IconExternalLink size={12} />\n                          {resource.title}\n                        </Group>\n                      </Anchor>\n                    ))}\n                  </Stack>\n                )}\n\n                {step.questions && step.questions.length > 0 && (\n                  <Box mt=\"sm\">\n                    <Text size=\"sm\" fw={500} mb=\"xs\">检查要点：</Text>\n                    <Stack gap=\"xs\">\n                      {step.questions.map((question, qIndex) => (\n                        <Text key={qIndex} size=\"sm\" c=\"dimmed\">\n                          • {question}\n                        </Text>\n                      ))}\n                    </Stack>\n                  </Box>\n                )}\n              </Timeline.Item>\n            ))}\n          </Timeline>\n        ) : (\n          // 交互模式：使用Stepper展示\n          <Stepper \n            active={activeStep} \n            onStepClick={setActiveStep}\n            allowNextStepsSelect={false}\n          >\n            {flow.steps.map((step, index) => (\n              <Stepper.Step\n                key={step.id}\n                label={`步骤 ${index + 1}`}\n                description={step.title}\n                completedIcon={<IconCheck size={16} />}\n              >\n                <Paper p=\"md\" bg=\"gray.0\" mt=\"md\">\n                  <Stack gap=\"md\">\n                    <Box>\n                      <Title order={5} mb=\"xs\">{step.title}</Title>\n                      <Text size=\"sm\" mb=\"md\">{step.description}</Text>\n                      \n                      <Group gap=\"xs\" mb=\"md\">\n                        {step.estimatedTime && (\n                          <Badge variant=\"outline\">\n                            <Group gap=\"xs\">\n                              <IconClock size={12} />\n                              {step.estimatedTime}\n                            </Group>\n                          </Badge>\n                        )}\n                        {step.difficulty && (\n                          <Badge color={getDifficultyColor(step.difficulty)}>\n                            {getDifficultyLabel(step.difficulty)}\n                          </Badge>\n                        )}\n                      </Group>\n                    </Box>\n\n                    {step.resources && step.resources.length > 0 && (\n                      <Box>\n                        <Text size=\"sm\" fw={500} mb=\"xs\">相关资源：</Text>\n                        <Stack gap=\"xs\">\n                          {step.resources.map((resource) => (\n                            <Anchor\n                              key={resource.id}\n                              href={resource.url}\n                              target=\"_blank\"\n                              size=\"sm\"\n                            >\n                              <Group gap=\"xs\">\n                                <IconExternalLink size={12} />\n                                {resource.title}\n                                {resource.description && (\n                                  <Text size=\"xs\" c=\"dimmed\">\n                                    - {resource.description}\n                                  </Text>\n                                )}\n                              </Group>\n                            </Anchor>\n                          ))}\n                        </Stack>\n                      </Box>\n                    )}\n\n                    {step.questions && step.questions.length > 0 && (\n                      <Box>\n                        <Text size=\"sm\" fw={500} mb=\"xs\">完成检查：</Text>\n                        <Stack gap=\"xs\">\n                          {step.questions.map((question, qIndex) => (\n                            <Text key={qIndex} size=\"sm\">\n                              • {question}\n                            </Text>\n                          ))}\n                        </Stack>\n                      </Box>\n                    )}\n\n                    <Group justify=\"flex-end\">\n                      <Button\n                        leftSection={<IconCheck size={16} />}\n                        onClick={() => handleStepComplete(step)}\n                        disabled={completedSteps.has(step.id)}\n                        variant={completedSteps.has(step.id) ? 'light' : 'filled'}\n                      >\n                        {completedSteps.has(step.id) ? '已完成' : '标记完成'}\n                      </Button>\n                    </Group>\n                  </Stack>\n                </Paper>\n              </Stepper.Step>\n            ))}\n          </Stepper>\n        )}\n      </Card>\n\n      {/* 预期成果 */}\n      {flow.outcomes && flow.outcomes.length > 0 && (\n        <Card withBorder>\n          <Title order={4} mb=\"md\">预期成果</Title>\n          <Stack gap=\"xs\">\n            {flow.outcomes.map((outcome, index) => (\n              <Group key={index} gap=\"xs\">\n                <IconTarget size={16} color=\"var(--mantine-color-blue-6)\" />\n                <Text size=\"sm\">{outcome}</Text>\n              </Group>\n            ))}\n          </Stack>\n        </Card>\n      )}\n\n      {/* 工具清单 */}\n      {flow.tools && flow.tools.length > 0 && (\n        <Card withBorder>\n          <Title order={4} mb=\"md\">推荐工具</Title>\n          <Stack gap=\"sm\">\n            {flow.tools.map((tool) => (\n              <Paper key={tool.id} p=\"sm\" withBorder>\n                <Group justify=\"space-between\">\n                  <Box style={{ flex: 1 }}>\n                    <Group gap=\"xs\" mb=\"xs\">\n                      <IconTool size={16} />\n                      <Text fw={500}>{tool.name}</Text>\n                      <Badge size=\"xs\" variant=\"outline\">\n                        {tool.category}\n                      </Badge>\n                    </Group>\n                    <Text size=\"sm\" c=\"dimmed\">\n                      {tool.description}\n                    </Text>\n                  </Box>\n                  <Anchor href={tool.url} target=\"_blank\">\n                    <ActionIcon variant=\"light\">\n                      <IconExternalLink size={16} />\n                    </ActionIcon>\n                  </Anchor>\n                </Group>\n              </Paper>\n            ))}\n          </Stack>\n        </Card>\n      )}\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3933, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/flow-design/feature.config.ts"],"sourcesContent":["import { FeatureConfig } from '@my-platform/types';\n\nexport const flowDesignFeature: FeatureConfig = {\n  id: 'flow-design',\n  name: '流程设计',\n  description: '创建和管理结构化的执行流程，支持AI辅助生成',\n  version: '1.0.0',\n  status: 'stable',\n\n  // 桌面应用配置\n  desktop: {\n    enabled: true,\n    menuItems: [\n      {\n        label: '流程设计',\n        path: '/flows',\n        icon: 'IconRoute'\n      }\n    ],\n    shortcuts: [\n      {\n        key: 'cmd+shift+f',\n        action: 'create_flow',\n        description: '创建新流程'\n      }\n    ],\n    routes: [\n      {\n        path: '/flows',\n        component: 'FlowDesignManager',\n        exact: true\n      },\n      {\n        path: '/flows/:id',\n        component: 'FlowDesignViewer',\n        exact: true\n      }\n    ]\n  },\n\n  // 官网展示配置\n  website: {\n    enabled: true,\n    showcase: {\n      title: '流程设计',\n      subtitle: '结构化任务执行',\n      description: '创建详细的执行流程，包含步骤、工具、资源和时间估算，支持AI辅助生成',\n      features: [\n        '步骤化流程设计',\n        'AI辅助创建流程',\n        '工具和资源管理',\n        '时间估算和难度评级',\n        '最佳实践提取',\n        '团队协作分享'\n      ],\n      screenshots: [\n        '/images/features/flow-design-manager.png',\n        '/images/features/flow-design-creator.png',\n        '/images/features/flow-design-viewer.png'\n      ],\n      demoVideo: '/videos/flow-design-demo.mp4'\n    },\n    pricing: {\n      tier: 'pro',\n      features: [\n        '无限流程创建',\n        'AI辅助生成',\n        '团队协作',\n        '高级分析'\n      ]\n    }\n  },\n\n  // API 配置\n  api: {\n    endpoints: [\n      '/api/flows',\n      '/api/flows/:id',\n      '/api/flows/:id/steps',\n      '/api/flows/:id/tools'\n    ],\n    permissions: [\n      'flow:read',\n      'flow:write',\n      'flow:delete',\n      'flow:share'\n    ]\n  },\n\n  // 依赖配置\n  dependencies: {\n    ai: ['openai', 'anthropic', 'pollinations'],\n    ui: ['@mantine/core', '@tabler/icons-react'],\n    core: ['@my-platform/types']\n  }\n};"],"names":[],"mappings":";;;AAEO,MAAM,oBAAmC;IAC9C,IAAI;IACJ,MAAM;IACN,aAAa;IACb,SAAS;IACT,QAAQ;IAER,SAAS;IACT,SAAS;QACP,SAAS;QACT,WAAW;YACT;gBACE,OAAO;gBACP,MAAM;gBACN,MAAM;YACR;SACD;QACD,WAAW;YACT;gBACE,KAAK;gBACL,QAAQ;gBACR,aAAa;YACf;SACD;QACD,QAAQ;YACN;gBACE,MAAM;gBACN,WAAW;gBACX,OAAO;YACT;YACA;gBACE,MAAM;gBACN,WAAW;gBACX,OAAO;YACT;SACD;IACH;IAEA,SAAS;IACT,SAAS;QACP,SAAS;QACT,UAAU;YACR,OAAO;YACP,UAAU;YACV,aAAa;YACb,UAAU;gBACR;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,aAAa;gBACX;gBACA;gBACA;aACD;YACD,WAAW;QACb;QACA,SAAS;YACP,MAAM;YACN,UAAU;gBACR;gBACA;gBACA;gBACA;aACD;QACH;IACF;IAEA,SAAS;IACT,KAAK;QACH,WAAW;YACT;YACA;YACA;YACA;SACD;QACD,aAAa;YACX;YACA;YACA;YACA;SACD;IACH;IAEA,OAAO;IACP,cAAc;QACZ,IAAI;YAAC;YAAU;YAAa;SAAe;QAC3C,IAAI;YAAC;YAAiB;SAAsB;QAC5C,MAAM;YAAC;SAAqB;IAC9B;AACF","debugId":null}},
    {"offset": {"line": 4044, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/flow-design/src/index.ts"],"sourcesContent":["// Flow Design Feature - 流程设计功能模块\nexport { FlowDesignManager } from './components/FlowDesignManager';\nexport { FlowDesignViewer } from './components/FlowDesignViewer';\n\n// Types\nexport type {\n  FlowDesign,\n  FlowStep,\n  FlowTool,\n  FlowResource\n} from '@my-platform/types';\n\n// Hooks\nexport { useFlowDesign } from './hooks/useFlowDesign';\n\n// Feature configuration\nexport { flowDesignFeature } from '../feature.config';"],"names":[],"mappings":"AAAA,iCAAiC;;AACjC;AACA;AAUA,QAAQ;AACR;AAEA,wBAAwB;AACxB","debugId":null}},
    {"offset": {"line": 4075, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/prompt-templates/src/components/PromptTemplateManager.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  Card,\n  Badge,\n  ActionIcon,\n  TextInput,\n  Grid,\n  Center,\n  Box,\n  Paper,\n  Divider,\n  Modal,\n  Textarea,\n  Select,\n  Tabs\n} from '@mantine/core';\nimport {\n  IconTemplate,\n  IconSearch,\n  IconCopy,\n  IconEye,\n  IconEdit,\n  IconPlus,\n  IconRobot\n} from '@tabler/icons-react';\nimport { notifications } from '@mantine/notifications';\n// 暂时注释掉PageLayout导入，直接使用Stack布局\n// import { PageLayout } from '../../../apps/desktop/src/components/layout/PageLayout';\n\nconst mockTemplates = [\n  {\n    id: 1,\n    title: '文章写作助手',\n    description: '帮助您创作高质量的文章内容',\n    category: '写作',\n    template: '请帮我写一篇关于 {主题} 的文章，要求：\\n1. 结构清晰，逻辑严谨\\n2. 内容深入，观点独特\\n3. 语言流畅，易于理解\\n4. 字数控制在 {字数} 字左右'\n  },\n  {\n    id: 2,\n    title: '代码审查专家',\n    description: '专业的代码审查和优化建议',\n    category: '编程',\n    template: '请审查以下代码并提供改进建议：\\n\\n```{编程语言}\\n{代码内容}\\n```\\n\\n请从以下角度分析：\\n1. 代码质量和可读性\\n2. 性能优化建议\\n3. 安全性考虑\\n4. 最佳实践建议'\n  },\n  {\n    id: 3,\n    title: '数据分析师',\n    description: '专业的数据分析和洞察提取',\n    category: '分析',\n    template: '请分析以下数据并提供洞察：\\n\\n{数据描述}\\n\\n分析要求：\\n1. 识别关键趋势和模式\\n2. 提供数据驱动的洞察\\n3. 给出可行的建议\\n4. 用图表或可视化方式展示结果'\n  },\n  {\n    id: 4,\n    title: '翻译专家',\n    description: '专业的多语言翻译服务',\n    category: '翻译',\n    template: '请将以下内容从 {源语言} 翻译成 {目标语言}，要求：\\n1. 准确传达原文意思\\n2. 符合目标语言表达习惯\\n3. 保持原文的语气和风格\\n\\n原文：\\n{待翻译内容}'\n  },\n  {\n    id: 5,\n    title: '学习助手',\n    description: '帮助理解和学习复杂概念',\n    category: '教育',\n    template: '请帮我理解 {概念/主题}，要求：\\n1. 用简单易懂的语言解释\\n2. 提供具体的例子\\n3. 指出重点和难点\\n4. 给出学习建议\\n\\n我的背景：{学习背景}'\n  }\n]\n\nexport const PromptTemplateManager: React.FC = () => {\n  const [selectedCategory, setSelectedCategory] = useState<string>('全部')\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  const [selectedTemplate, setSelectedTemplate] = useState<any>(null)\n  const [viewModalOpen, setViewModalOpen] = useState(false)\n  const [createModalOpen, setCreateModalOpen] = useState(false)\n\n  const categories = ['全部', '写作', '编程', '分析', '翻译', '教育']\n\n  const filteredTemplates = mockTemplates.filter(template => {\n    const matchesCategory = selectedCategory === '全部' || template.category === selectedCategory\n    const matchesSearch = template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         template.description.toLowerCase().includes(searchTerm.toLowerCase())\n    return matchesCategory && matchesSearch\n  })\n\n  const handleCopyTemplate = (template: string) => {\n    navigator.clipboard.writeText(template)\n    notifications.show({\n      title: '复制成功',\n      message: '模板已复制到剪贴板',\n      color: 'green'\n    })\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部操作栏 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconTemplate size={28} color=\"var(--mantine-color-green-6)\" />\n          <Box>\n            <Title order={2}>提示词模板库</Title>\n            <Text c=\"dimmed\" size=\"sm\">精选的 AI 提示词模板，提升您的工作效率</Text>\n          </Box>\n        </Group>\n        \n        <Group>\n          <Button\n            leftSection={<IconRobot size={16} />}\n            variant=\"gradient\"\n            gradient={{ from: 'green', to: 'teal' }}\n          >\n            AI 生成\n          </Button>\n          <Button\n            leftSection={<IconPlus size={16} />}\n            onClick={() => setCreateModalOpen(true)}\n          >\n            创建模板\n          </Button>\n        </Group>\n      </Group>\n\n      {/* 搜索和筛选 */}\n      <Group>\n        <TextInput\n          placeholder=\"搜索模板...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.currentTarget.value)}\n          leftSection={<IconSearch size={16} />}\n          style={{ flex: 1 }}\n        />\n      </Group>\n\n      {/* 分类标签 */}\n      <Tabs value={selectedCategory} onChange={(value) => setSelectedCategory(value || '全部')}>\n        <Tabs.List>\n          {categories.map(category => (\n            <Tabs.Tab key={category} value={category}>\n              {category}\n            </Tabs.Tab>\n          ))}\n        </Tabs.List>\n      </Tabs>\n\n      {/* 模板列表 */}\n      {filteredTemplates.length === 0 ? (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Center>\n            <Stack align=\"center\" gap=\"md\">\n              <IconTemplate size={64} color=\"var(--mantine-color-gray-5)\" />\n              <Title order={3} ta=\"center\">没有找到匹配的模板</Title>\n              <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                尝试调整搜索条件或选择其他分类\n              </Text>\n            </Stack>\n          </Center>\n        </Card>\n      ) : (\n        <Grid>\n          {filteredTemplates.map(template => (\n            <Grid.Col key={template.id} span={{ base: 12, md: 6, lg: 4 }}>\n              <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder h=\"100%\">\n                <Stack gap=\"sm\" h=\"100%\">\n                  <Group justify=\"space-between\">\n                    <Badge variant=\"light\" color=\"blue\" size=\"sm\">\n                      {template.category}\n                    </Badge>\n                  </Group>\n\n                  <Box style={{ flex: 1 }}>\n                    <Title order={4} mb=\"xs\">{template.title}</Title>\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"sm\" lineClamp={2}>\n                      {template.description}\n                    </Text>\n                    \n                    <Paper p=\"sm\" bg=\"gray.0\" radius=\"md\" mb=\"sm\">\n                      <Text size=\"xs\" c=\"dimmed\" lineClamp={4} style={{ fontFamily: 'monospace' }}>\n                        {template.template}\n                      </Text>\n                    </Paper>\n                  </Box>\n\n                  <Divider />\n\n                  <Group justify=\"space-between\">\n                    <Group gap=\"xs\">\n                      <ActionIcon\n                        variant=\"light\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // 导航到详情页面\n                          if (typeof window !== 'undefined') {\n                            window.location.href = `/templates/${template.id}`;\n                          }\n                        }}\n                      >\n                        <IconEye size={14} />\n                      </ActionIcon>\n                      <ActionIcon\n                        variant=\"light\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // TODO: 编辑功能\n                        }}\n                      >\n                        <IconEdit size={14} />\n                      </ActionIcon>\n                    </Group>\n                    \n                    <Button\n                      size=\"xs\"\n                      leftSection={<IconCopy size={12} />}\n                      onClick={() => handleCopyTemplate(template.template)}\n                    >\n                      复制\n                    </Button>\n                  </Group>\n                </Stack>\n              </Card>\n            </Grid.Col>\n          ))}\n        </Grid>\n      )}\n\n      {/* 查看详情模态框 */}\n      <Modal\n        opened={viewModalOpen}\n        onClose={() => setViewModalOpen(false)}\n        title={selectedTemplate?.title || '模板详情'}\n        size=\"lg\"\n      >\n        {selectedTemplate && (\n          <Stack gap=\"md\">\n            <Group>\n              <Badge color=\"blue\">{selectedTemplate.category}</Badge>\n            </Group>\n            \n            <Text>{selectedTemplate.description}</Text>\n            \n            <Box>\n              <Text fw={500} mb=\"sm\">模板内容：</Text>\n              <Paper p=\"md\" withBorder bg=\"gray.0\">\n                <Text size=\"sm\" style={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}>\n                  {selectedTemplate.template}\n                </Text>\n              </Paper>\n            </Box>\n            \n            <Group justify=\"flex-end\">\n              <Button\n                leftSection={<IconCopy size={16} />}\n                onClick={() => {\n                  handleCopyTemplate(selectedTemplate.template)\n                  setViewModalOpen(false)\n                }}\n              >\n                复制模板\n              </Button>\n            </Group>\n          </Stack>\n        )}\n      </Modal>\n\n      {/* 创建模板模态框 */}\n      <Modal\n        opened={createModalOpen}\n        onClose={() => setCreateModalOpen(false)}\n        title=\"创建提示词模板\"\n        size=\"lg\"\n      >\n        <Stack gap=\"md\">\n          <TextInput\n            label=\"模板标题\"\n            placeholder=\"输入模板标题\"\n            required\n          />\n          \n          <Textarea\n            label=\"模板描述\"\n            placeholder=\"描述这个模板的用途和特点\"\n            minRows={2}\n            required\n          />\n          \n          <Select\n            label=\"分类\"\n            placeholder=\"选择分类\"\n            data={categories.filter(c => c !== '全部')}\n            required\n          />\n          \n          <Textarea\n            label=\"模板内容\"\n            placeholder=\"输入提示词模板内容，使用 {参数名} 表示可替换的参数\"\n            minRows={6}\n            required\n          />\n          \n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button variant=\"light\" onClick={() => setCreateModalOpen(false)}>\n              取消\n            </Button>\n            <Button>\n              创建模板\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n    </Stack>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4768, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/prompt-templates/src/hooks/usePromptTemplate.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// 临时类型定义\ninterface PromptTemplate {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  template: string;\n}\n\nexport const usePromptTemplate = () => {\n  const [templates, setTemplates] = useState<PromptTemplate[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadTemplates();\n  }, []);\n\n  const loadTemplates = async () => {\n    try {\n      setLoading(true);\n      // 这里应该调用实际的API\n      // const templates = await dbApi.getPromptTemplates();\n      // setTemplates(templates.data || []);\n      \n      // 临时使用空数组\n      setTemplates([]);\n    } catch (error) {\n      console.error('Failed to load templates:', error);\n      setError('加载模板失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createTemplate = async (templateData: any) => {\n    try {\n      // 这里应该调用实际的创建API\n      console.log('Creating template:', templateData);\n      await loadTemplates();\n    } catch (error) {\n      console.error('Failed to create template:', error);\n      throw error;\n    }\n  };\n\n  const updateTemplate = async (id: string, updates: Partial<PromptTemplate>) => {\n    try {\n      // 这里应该调用实际的更新API\n      console.log('Updating template:', id, updates);\n      await loadTemplates();\n    } catch (error) {\n      console.error('Failed to update template:', error);\n      throw error;\n    }\n  };\n\n  const deleteTemplate = async (id: string) => {\n    try {\n      // 这里应该调用实际的删除API\n      console.log('Deleting template:', id);\n      await loadTemplates();\n    } catch (error) {\n      console.error('Failed to delete template:', error);\n      throw error;\n    }\n  };\n\n  return {\n    templates,\n    loading,\n    error,\n    loadTemplates,\n    createTemplate,\n    updateTemplate,\n    deleteTemplate\n  };\n};"],"names":[],"mappings":";;;AAAA;;;AAWO,MAAM,oBAAoB;;IAC/B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAoB,EAAE;IAC/D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,8TAAA,CAAA,YAAS,AAAD;uCAAE;YACR;QACF;sCAAG,EAAE;IAEL,MAAM,gBAAgB;QACpB,IAAI;YACF,WAAW;YACX,eAAe;YACf,sDAAsD;YACtD,sCAAsC;YAEtC,UAAU;YACV,aAAa,EAAE;QACjB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,iBAAiB,OAAO;QAC5B,IAAI;YACF,iBAAiB;YACjB,QAAQ,GAAG,CAAC,sBAAsB;YAClC,MAAM;QACR,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM;QACR;IACF;IAEA,MAAM,iBAAiB,OAAO,IAAY;QACxC,IAAI;YACF,iBAAiB;YACjB,QAAQ,GAAG,CAAC,sBAAsB,IAAI;YACtC,MAAM;QACR,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM;QACR;IACF;IAEA,MAAM,iBAAiB,OAAO;QAC5B,IAAI;YACF,iBAAiB;YACjB,QAAQ,GAAG,CAAC,sBAAsB;YAClC,MAAM;QACR,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM;QACR;IACF;IAEA,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;GApEa","debugId":null}},
    {"offset": {"line": 4849, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/prompt-templates/src/index.ts"],"sourcesContent":["// Prompt Templates Feature\nexport { PromptTemplateManager } from './components/PromptTemplateManager';\nexport { usePromptTemplate } from './hooks/usePromptTemplate';\n\n// Types\nexport type { PromptTemplate, PromptParameter } from '@my-platform/types';"],"names":[],"mappings":"AAAA,2BAA2B;;AAC3B;AACA","debugId":null}},
    {"offset": {"line": 4872, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/hooks/useMemory.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { notifications } from '@mantine/notifications';\nimport { invoke } from '@tauri-apps/api/tauri';\nimport {\n    Memory,\n    MemoryCreationRequest,\n    MemoryFilter,\n    MemoryStats,\n    MemorySearchResult,\n    AIImageGenerationRequest,\n    VideoGenerationRequest\n} from '../types';\n\nexport const useMemory = () => {\n    const [memories, setMemories] = useState<Memory[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [stats, setStats] = useState<MemoryStats | null>(null);\n\n    // 加载记忆列表\n    const loadMemories = useCallback(async (filter?: MemoryFilter) => {\n        setLoading(true);\n        try {\n            const memories = await invoke<Memory[]>('get_memories', { filter });\n            setMemories(memories || []);\n        } catch (error) {\n            console.error('Failed to load memories:', error);\n            notifications.show({\n                title: '加载失败',\n                message: '无法加载记忆列表',\n                color: 'red'\n            });\n            setMemories([]);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    // 创建记忆\n    const createMemory = useCallback(async (request: MemoryCreationRequest): Promise<Memory> => {\n        try {\n            const newMemory = await invoke<Memory>('create_memory', { request });\n            setMemories((prev: Memory[]) => [newMemory, ...prev]);\n\n            notifications.show({\n                title: '创建成功',\n                message: '记忆已保存',\n                color: 'green'\n            });\n\n            return newMemory;\n        } catch (error) {\n            console.error('Failed to create memory:', error);\n            notifications.show({\n                title: '创建失败',\n                message: '无法保存记忆',\n                color: 'red'\n            });\n            throw error;\n        }\n    }, []);\n\n    // 更新记忆\n    const updateMemory = useCallback(async (id: string, updates: Partial<Memory>) => {\n        try {\n            const updatedMemory = await invoke<Memory>('update_memory', { id, updates });\n            setMemories((prev: Memory[]) => prev.map((m: Memory) =>\n                m.id === id ? updatedMemory : m\n            ));\n\n            notifications.show({\n                title: '更新成功',\n                message: '记忆已更新',\n                color: 'green'\n            });\n        } catch (error) {\n            console.error('Failed to update memory:', error);\n            notifications.show({\n                title: '更新失败',\n                message: '无法更新记忆',\n                color: 'red'\n            });\n        }\n    }, []);\n\n    // 删除记忆\n    const deleteMemory = useCallback(async (id: string) => {\n        try {\n            const response = await fetch(`/api/memories/${id}`, {\n                method: 'DELETE',\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to delete memory');\n            }\n\n            setMemories((prev: Memory[]) => prev.filter((m: Memory) => m.id !== id));\n\n            notifications.show({\n                title: '删除成功',\n                message: '记忆已删除',\n                color: 'green'\n            });\n        } catch (error) {\n            console.error('Failed to delete memory:', error);\n            notifications.show({\n                title: '删除失败',\n                message: '无法删除记忆',\n                color: 'red'\n            });\n        }\n    }, []);\n\n    // 搜索记忆\n    const searchMemories = useCallback(async (query: string): Promise<MemorySearchResult> => {\n        try {\n            const response = await fetch(`/api/memories/search?q=${encodeURIComponent(query)}`);\n            if (!response.ok) {\n                throw new Error('Failed to search memories');\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Failed to search memories:', error);\n            throw error;\n        }\n    }, []);\n\n    // AI 生成图像\n    const generateImage = useCallback(async (request: AIImageGenerationRequest) => {\n        try {\n            const response = await fetch('/api/memories/generate-image', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(request),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to generate image');\n            }\n\n            const data = await response.json();\n            const imageUrl = data.imageUrl;\n\n            // 更新记忆的图像URL\n            await updateMemory(request.memoryId, {\n                imageUrl,\n                aiGenerated: true\n            });\n\n            notifications.show({\n                title: 'AI 图像生成完成',\n                message: '记忆图像已生成并保存',\n                color: 'green'\n            });\n\n            return imageUrl;\n        } catch (error) {\n            console.error('Failed to generate image:', error);\n            notifications.show({\n                title: '图像生成失败',\n                message: 'AI 图像生成遇到问题',\n                color: 'red'\n            });\n            throw error;\n        }\n    }, [updateMemory]);\n\n    // 生成视频\n    const generateVideo = useCallback(async (request: VideoGenerationRequest) => {\n        try {\n            const response = await fetch('/api/memories/generate-video', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(request),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to generate video');\n            }\n\n            const data = await response.json();\n            const videoUrl = data.videoUrl;\n\n            notifications.show({\n                title: '视频生成完成',\n                message: '记忆视频已生成',\n                color: 'green'\n            });\n\n            return videoUrl;\n        } catch (error) {\n            console.error('Failed to generate video:', error);\n            notifications.show({\n                title: '视频生成失败',\n                message: '视频生成遇到问题',\n                color: 'red'\n            });\n            throw error;\n        }\n    }, []);\n\n    // 获取统计信息\n    const loadStats = useCallback(async () => {\n        try {\n            const response = await fetch('/api/memories/stats');\n            if (!response.ok) {\n                throw new Error('Failed to load stats');\n            }\n\n            const stats = await response.json();\n            setStats(stats);\n        } catch (error) {\n            console.error('Failed to load stats:', error);\n            setStats(null);\n        }\n    }, []);\n\n    // 初始化加载\n    useEffect(() => {\n        loadMemories();\n        loadStats();\n    }, [loadMemories, loadStats]);\n\n    return {\n        memories,\n        loading,\n        stats,\n        loadMemories,\n        createMemory,\n        updateMemory,\n        deleteMemory,\n        searchMemories,\n        generateImage,\n        generateVideo,\n        loadStats\n    };\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5140, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemoryManager.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  Card,\n  Badge,\n  ActionIcon,\n  Modal,\n  TextInput,\n  Textarea,\n  Select,\n  Grid,\n  Center,\n  Box,\n  Tabs,\n  Paper,\n  Image,\n  Avatar,\n  Timeline,\n  Progress,\n  Divider,\n  DateInput,\n  MultiSelect,\n  Loader\n} from '@mantine/core';\nimport {\n  IconBrain,\n  IconPlus,\n  IconEdit,\n  IconTrash,\n  IconEye,\n  IconSearch,\n  IconFilter,\n  IconPhoto,\n  IconVideo,\n  IconMicrophone,\n  IconCalendar,\n  IconMapPin,\n  IconUsers,\n  IconTag,\n  IconHeart,\n  IconRobot,\n  IconDownload,\n  IconShare,\n  IconTimeline,\n  IconPhotoPlus,\n  IconVideoPlus\n} from '@tabler/icons-react';\nimport { notifications } from '@mantine/notifications';\nimport { useMemory } from '../hooks/useMemory';\nimport { Memory, MemoryFilter } from '../types';\n\ninterface MemoryManagerProps {\n  onMemorySelect?: (memory: Memory) => void;\n}\n\nexport const MemoryManager: React.FC<MemoryManagerProps> = ({\n  onMemorySelect\n}) => {\n  const {\n    memories,\n    loading,\n    stats,\n    createMemory,\n    updateMemory,\n    deleteMemory,\n    searchMemories,\n    generateImage,\n    generateVideo,\n    loadMemories\n  } = useMemory();\n\n  const [activeTab, setActiveTab] = useState('list');\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [filterModalOpen, setFilterModalOpen] = useState(false);\n  const [selectedMemory, setSelectedMemory] = useState<Memory | null>(null);\n  const [viewModalOpen, setViewModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentFilter, setCurrentFilter] = useState<MemoryFilter>({});\n  const [generatingImage, setGeneratingImage] = useState<string | null>(null);\n  const [generatingVideo, setGeneratingVideo] = useState(false);\n\n  // 表单状态\n  const [formData, setFormData] = useState({\n    title: '',\n    content: '',\n    date: new Date(),\n    location: '',\n    people: [] as string[],\n    tags: [] as string[],\n    emotions: [] as string[],\n    visibility: 'private' as 'private' | 'shared' | 'public'\n  });\n\n  const handleCreateMemory = async () => {\n    try {\n      await createMemory(formData);\n      setCreateModalOpen(false);\n      setFormData({\n        title: '',\n        content: '',\n        date: new Date(),\n        location: '',\n        people: [],\n        tags: [],\n        emotions: [],\n        visibility: 'private'\n      });\n    } catch (error) {\n      // Error handled in hook\n    }\n  };\n\n  const handleDeleteMemory = async (id: string) => {\n    if (confirm('确定要删除这个记忆吗？此操作不可恢复！')) {\n      await deleteMemory(id);\n    }\n  };\n\n  const handleGenerateImage = async (memory: Memory) => {\n    setGeneratingImage(memory.id);\n    try {\n      await generateImage({\n        memoryId: memory.id,\n        prompt: `${memory.title}: ${memory.content}`,\n        style: 'artistic',\n        aspectRatio: '16:9',\n        quality: 'standard'\n      });\n    } catch (error) {\n      // Error handled in hook\n    } finally {\n      setGeneratingImage(null);\n    }\n  };\n\n  const handleGenerateVideo = async (selectedMemoryIds: string[]) => {\n    setGeneratingVideo(true);\n    try {\n      await generateVideo({\n        memoryIds: selectedMemoryIds,\n        title: '我的记忆视频',\n        duration: 60,\n        transitions: 'fade',\n        voiceoverText: '这些是我珍贵的记忆...'\n      });\n    } catch (error) {\n      // Error handled in hook\n    } finally {\n      setGeneratingVideo(false);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (searchQuery.trim()) {\n      try {\n        const result = await searchMemories(searchQuery);\n        // 这里可以更新显示的记忆列表\n        console.log('Search results:', result);\n      } catch (error) {\n        notifications.show({\n          title: '搜索失败',\n          message: '搜索记忆时出现问题',\n          color: 'red'\n        });\n      }\n    }\n  };\n\n  const handleApplyFilter = async () => {\n    await loadMemories(currentFilter);\n    setFilterModalOpen(false);\n  };\n\n  const getEmotionColor = (emotion: string) => {\n    const emotionColors: Record<string, string> = {\n      '快乐': 'yellow',\n      '悲伤': 'blue',\n      '兴奋': 'orange',\n      '平静': 'green',\n      '紧张': 'red',\n      '感激': 'violet',\n      '不舍': 'gray',\n      '成就感': 'teal',\n      '温馨': 'pink'\n    };\n    return emotionColors[emotion] || 'gray';\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }).format(date);\n  };\n\n  if (loading) {\n    return (\n      <Center h={400}>\n        <Stack align=\"center\">\n          <Loader size=\"lg\" />\n          <Text c=\"dimmed\">加载记忆中...</Text>\n        </Stack>\n      </Center>\n    );\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部操作栏 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconBrain size={28} color=\"var(--mantine-color-violet-6)\" />\n          <Box>\n            <Title order={2}>记忆管理</Title>\n            <Text c=\"dimmed\" size=\"sm\">管理和组织你的珍贵记忆</Text>\n          </Box>\n        </Group>\n        \n        <Group>\n          <Button\n            leftSection={<IconVideoPlus size={16} />}\n            variant=\"gradient\"\n            gradient={{ from: 'violet', to: 'purple' }}\n            onClick={() => handleGenerateVideo(memories.map(m => m.id))}\n            loading={generatingVideo}\n          >\n            生成视频\n          </Button>\n          <Button\n            leftSection={<IconPlus size={16} />}\n            onClick={() => setCreateModalOpen(true)}\n          >\n            添加记忆\n          </Button>\n        </Group>\n      </Group>\n\n      {/* 搜索和过滤 */}\n      <Group>\n        <TextInput\n          placeholder=\"搜索记忆...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.currentTarget.value)}\n          leftSection={<IconSearch size={16} />}\n          style={{ flex: 1 }}\n          onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n        />\n        <Button\n          variant=\"light\"\n          leftSection={<IconFilter size={16} />}\n          onClick={() => setFilterModalOpen(true)}\n        >\n          筛选\n        </Button>\n      </Group>\n\n      {/* 统计信息 */}\n      {stats && (\n        <Grid>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                总记忆数\n              </Text>\n              <Text size=\"xl\" fw={700}>\n                {stats.totalMemories}\n              </Text>\n            </Paper>\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                本月新增\n              </Text>\n              <Text size=\"xl\" fw={700} c=\"blue\">\n                {stats.memoriesThisMonth}\n              </Text>\n            </Paper>\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                AI 生成\n              </Text>\n              <Text size=\"xl\" fw={700} c=\"violet\">\n                {stats.aiGeneratedCount}\n              </Text>\n            </Paper>\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                今年记录\n              </Text>\n              <Text size=\"xl\" fw={700} c=\"green\">\n                {stats.memoriesThisYear}\n              </Text>\n            </Paper>\n          </Grid.Col>\n        </Grid>\n      )}\n\n      {/* 标签页 */}\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'list')}>\n        <Tabs.List>\n          <Tabs.Tab value=\"list\" leftSection={<IconEye size={16} />}>\n            列表视图\n          </Tabs.Tab>\n          <Tabs.Tab value=\"timeline\" leftSection={<IconTimeline size={16} />}>\n            时间线\n          </Tabs.Tab>\n          <Tabs.Tab value=\"gallery\" leftSection={<IconPhoto size={16} />}>\n            图片画廊\n          </Tabs.Tab>\n        </Tabs.List>\n\n        <Tabs.Panel value=\"list\" pt=\"md\">\n          {memories.length === 0 ? (\n            <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n              <Center>\n                <Stack align=\"center\" gap=\"md\">\n                  <IconBrain size={64} color=\"var(--mantine-color-gray-5)\" />\n                  <Title order={3} ta=\"center\">还没有记忆</Title>\n                  <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                    开始记录你的珍贵时刻，让AI帮你生成美丽的图像\n                  </Text>\n                  <Button\n                    leftSection={<IconPlus size={16} />}\n                    onClick={() => setCreateModalOpen(true)}\n                  >\n                    添加第一个记忆\n                  </Button>\n                </Stack>\n              </Center>\n            </Card>\n          ) : (\n            <Grid>\n              {memories.map((memory) => (\n                <Grid.Col key={memory.id} span={{ base: 12, md: 6, lg: 4 }}>\n                  <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder h=\"100%\">\n                    <Stack gap=\"sm\" h=\"100%\">\n                      {memory.imageUrl && (\n                        <Image\n                          src={memory.imageUrl}\n                          alt={memory.title}\n                          height={160}\n                          radius=\"md\"\n                          fallbackSrc=\"/images/placeholder.jpg\"\n                        />\n                      )}\n                      \n                      <Group justify=\"space-between\">\n                        <Badge\n                          variant=\"light\"\n                          color={memory.visibility === 'private' ? 'gray' : 'blue'}\n                          size=\"sm\"\n                        >\n                          {memory.visibility === 'private' ? '私密' : \n                           memory.visibility === 'shared' ? '分享' : '公开'}\n                        </Badge>\n                        {memory.aiGenerated && (\n                          <Badge variant=\"light\" color=\"violet\" size=\"sm\">\n                            AI生成\n                          </Badge>\n                        )}\n                      </Group>\n\n                      <Box style={{ flex: 1 }}>\n                        <Title order={4} mb=\"xs\">{memory.title}</Title>\n                        <Text size=\"sm\" c=\"dimmed\" mb=\"sm\" lineClamp={3}>\n                          {memory.content}\n                        </Text>\n                        \n                        <Group gap=\"xs\" mb=\"sm\">\n                          <Group gap=\"xs\">\n                            <IconCalendar size={14} />\n                            <Text size=\"xs\" c=\"dimmed\">\n                              {formatDate(memory.date)}\n                            </Text>\n                          </Group>\n                          {memory.location && (\n                            <Group gap=\"xs\">\n                              <IconMapPin size={14} />\n                              <Text size=\"xs\" c=\"dimmed\">\n                                {memory.location}\n                              </Text>\n                            </Group>\n                          )}\n                        </Group>\n\n                        {memory.people.length > 0 && (\n                          <Group gap=\"xs\" mb=\"sm\">\n                            <IconUsers size={14} />\n                            <Group gap=\"xs\">\n                              {memory.people.slice(0, 3).map((person, idx) => (\n                                <Badge key={idx} size=\"xs\" variant=\"outline\">\n                                  {person}\n                                </Badge>\n                              ))}\n                              {memory.people.length > 3 && (\n                                <Text size=\"xs\" c=\"dimmed\">\n                                  +{memory.people.length - 3}\n                                </Text>\n                              )}\n                            </Group>\n                          </Group>\n                        )}\n\n                        {memory.emotions.length > 0 && (\n                          <Group gap=\"xs\" mb=\"sm\">\n                            <IconHeart size={14} />\n                            <Group gap=\"xs\">\n                              {memory.emotions.slice(0, 3).map((emotion, idx) => (\n                                <Badge \n                                  key={idx} \n                                  size=\"xs\" \n                                  variant=\"light\"\n                                  color={getEmotionColor(emotion)}\n                                >\n                                  {emotion}\n                                </Badge>\n                              ))}\n                            </Group>\n                          </Group>\n                        )}\n                      </Box>\n\n                      <Divider />\n\n                      <Group justify=\"space-between\">\n                        <Group gap=\"xs\">\n                          <ActionIcon\n                            variant=\"light\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedMemory(memory);\n                              setViewModalOpen(true);\n                              onMemorySelect?.(memory);\n                            }}\n                          >\n                            <IconEye size={14} />\n                          </ActionIcon>\n                          <ActionIcon\n                            variant=\"light\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // TODO: 编辑功能\n                            }}\n                          >\n                            <IconEdit size={14} />\n                          </ActionIcon>\n                          {!memory.imageUrl && (\n                            <ActionIcon\n                              variant=\"light\"\n                              color=\"violet\"\n                              size=\"sm\"\n                              onClick={() => handleGenerateImage(memory)}\n                              loading={generatingImage === memory.id}\n                            >\n                              <IconPhotoPlus size={14} />\n                            </ActionIcon>\n                          )}\n                        </Group>\n                        \n                        <Group gap=\"xs\">\n                          {memory.audioUrl && (\n                            <ActionIcon variant=\"light\" color=\"blue\" size=\"sm\">\n                              <IconMicrophone size={14} />\n                            </ActionIcon>\n                          )}\n                          {memory.videoUrl && (\n                            <ActionIcon variant=\"light\" color=\"green\" size=\"sm\">\n                              <IconVideo size={14} />\n                            </ActionIcon>\n                          )}\n                          <ActionIcon\n                            variant=\"light\"\n                            color=\"red\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteMemory(memory.id)}\n                          >\n                            <IconTrash size={14} />\n                          </ActionIcon>\n                        </Group>\n                      </Group>\n                    </Stack>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid>\n          )}\n        </Tabs.Panel>\n\n        <Tabs.Panel value=\"timeline\" pt=\"md\">\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\n            <Title order={4} mb=\"md\">记忆时间线</Title>\n            <Timeline>\n              {memories\n                .sort((a, b) => b.date.getTime() - a.date.getTime())\n                .map((memory) => (\n                  <Timeline.Item\n                    key={memory.id}\n                    title={memory.title}\n                    bullet={\n                      memory.imageUrl ? (\n                        <Avatar src={memory.imageUrl} size=\"sm\" radius=\"xl\" />\n                      ) : (\n                        <IconBrain size={16} />\n                      )\n                    }\n                  >\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">\n                      {formatDate(memory.date)} {memory.location && `• ${memory.location}`}\n                    </Text>\n                    <Text size=\"sm\" mb=\"sm\" lineClamp={2}>\n                      {memory.content}\n                    </Text>\n                    <Group gap=\"xs\">\n                      {memory.emotions.slice(0, 3).map((emotion, idx) => (\n                        <Badge \n                          key={idx} \n                          size=\"xs\" \n                          variant=\"light\"\n                          color={getEmotionColor(emotion)}\n                        >\n                          {emotion}\n                        </Badge>\n                      ))}\n                    </Group>\n                  </Timeline.Item>\n                ))}\n            </Timeline>\n          </Card>\n        </Tabs.Panel>\n\n        <Tabs.Panel value=\"gallery\" pt=\"md\">\n          <Grid>\n            {memories\n              .filter(memory => memory.imageUrl)\n              .map((memory) => (\n                <Grid.Col key={memory.id} span={{ base: 12, sm: 6, md: 4, lg: 3 }}>\n                  <Card shadow=\"sm\" padding=\"xs\" radius=\"md\" withBorder>\n                    <Image\n                      src={memory.imageUrl}\n                      alt={memory.title}\n                      height={200}\n                      radius=\"md\"\n                      fallbackSrc=\"/images/placeholder.jpg\"\n                      onClick={() => {\n                        setSelectedMemory(memory);\n                        setViewModalOpen(true);\n                      }}\n                      style={{ cursor: 'pointer' }}\n                    />\n                    <Text size=\"sm\" fw={500} mt=\"xs\" lineClamp={1}>\n                      {memory.title}\n                    </Text>\n                    <Text size=\"xs\" c=\"dimmed\">\n                      {formatDate(memory.date)}\n                    </Text>\n                  </Card>\n                </Grid.Col>\n              ))}\n          </Grid>\n        </Tabs.Panel>\n      </Tabs>\n\n      {/* 创建记忆模态框 */}\n      <Modal\n        opened={createModalOpen}\n        onClose={() => setCreateModalOpen(false)}\n        title=\"添加新记忆\"\n        size=\"lg\"\n      >\n        <Stack gap=\"md\">\n          <TextInput\n            label=\"标题\"\n            placeholder=\"给这个记忆起个标题\"\n            value={formData.title}\n            onChange={(e) => setFormData({ ...formData, title: e.currentTarget.value })}\n            required\n          />\n          \n          <Textarea\n            label=\"内容\"\n            placeholder=\"描述这个记忆的详细内容\"\n            value={formData.content}\n            onChange={(e) => setFormData({ ...formData, content: e.currentTarget.value })}\n            minRows={4}\n            required\n          />\n          \n          <DateInput\n            label=\"日期\"\n            value={formData.date}\n            onChange={(date) => setFormData({ ...formData, date: date || new Date() })}\n          />\n          \n          <TextInput\n            label=\"地点\"\n            placeholder=\"这个记忆发生的地点\"\n            value={formData.location}\n            onChange={(e) => setFormData({ ...formData, location: e.currentTarget.value })}\n          />\n          \n          <MultiSelect\n            label=\"相关人物\"\n            placeholder=\"添加相关的人物\"\n            data={formData.people}\n            value={formData.people}\n            onChange={(value) => setFormData({ ...formData, people: value })}\n            searchable\n            creatable\n            getCreateLabel={(query) => `+ 添加 \"${query}\"`}\n            onCreate={(query) => {\n              const newPeople = [...formData.people, query];\n              setFormData({ ...formData, people: newPeople });\n              return query;\n            }}\n          />\n          \n          <MultiSelect\n            label=\"标签\"\n            placeholder=\"添加标签\"\n            data={formData.tags}\n            value={formData.tags}\n            onChange={(value) => setFormData({ ...formData, tags: value })}\n            searchable\n            creatable\n            getCreateLabel={(query) => `+ 添加 \"${query}\"`}\n            onCreate={(query) => {\n              const newTags = [...formData.tags, query];\n              setFormData({ ...formData, tags: newTags });\n              return query;\n            }}\n          />\n          \n          <MultiSelect\n            label=\"情感\"\n            placeholder=\"这个记忆让你感受到什么\"\n            data={['快乐', '悲伤', '兴奋', '平静', '紧张', '感激', '不舍', '成就感', '温馨']}\n            value={formData.emotions}\n            onChange={(value) => setFormData({ ...formData, emotions: value })}\n            searchable\n            creatable\n            getCreateLabel={(query) => `+ 添加 \"${query}\"`}\n            onCreate={(query) => {\n              const newEmotions = [...formData.emotions, query];\n              setFormData({ ...formData, emotions: newEmotions });\n              return query;\n            }}\n          />\n          \n          <Select\n            label=\"可见性\"\n            value={formData.visibility}\n            onChange={(value) => setFormData({ ...formData, visibility: value as any })}\n            data={[\n              { value: 'private', label: '私密 - 只有我可以看到' },\n              { value: 'shared', label: '分享 - 朋友可以看到' },\n              { value: 'public', label: '公开 - 所有人可以看到' }\n            ]}\n          />\n          \n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button variant=\"light\" onClick={() => setCreateModalOpen(false)}>\n              取消\n            </Button>\n            <Button \n              onClick={handleCreateMemory}\n              disabled={!formData.title || !formData.content}\n            >\n              保存记忆\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n\n      {/* 查看详情模态框 */}\n      <Modal\n        opened={viewModalOpen}\n        onClose={() => setViewModalOpen(false)}\n        title={selectedMemory?.title || '记忆详情'}\n        size=\"xl\"\n      >\n        {selectedMemory && (\n          <Stack gap=\"md\">\n            {selectedMemory.imageUrl && (\n              <Image\n                src={selectedMemory.imageUrl}\n                alt={selectedMemory.title}\n                radius=\"md\"\n                fallbackSrc=\"/images/placeholder.jpg\"\n              />\n            )}\n            \n            <Group>\n              <Badge color={getEmotionColor('快乐')}>\n                {formatDate(selectedMemory.date)}\n              </Badge>\n              {selectedMemory.location && (\n                <Badge variant=\"light\">\n                  <Group gap=\"xs\">\n                    <IconMapPin size={12} />\n                    {selectedMemory.location}\n                  </Group>\n                </Badge>\n              )}\n              {selectedMemory.aiGenerated && (\n                <Badge variant=\"light\" color=\"violet\">\n                  AI生成\n                </Badge>\n              )}\n            </Group>\n            \n            <Text>{selectedMemory.content}</Text>\n            \n            {selectedMemory.people.length > 0 && (\n              <Box>\n                <Text fw={500} mb=\"sm\">相关人物：</Text>\n                <Group gap=\"xs\">\n                  {selectedMemory.people.map((person, idx) => (\n                    <Badge key={idx} variant=\"outline\">\n                      {person}\n                    </Badge>\n                  ))}\n                </Group>\n              </Box>\n            )}\n            \n            {selectedMemory.emotions.length > 0 && (\n              <Box>\n                <Text fw={500} mb=\"sm\">情感：</Text>\n                <Group gap=\"xs\">\n                  {selectedMemory.emotions.map((emotion, idx) => (\n                    <Badge \n                      key={idx} \n                      variant=\"light\"\n                      color={getEmotionColor(emotion)}\n                    >\n                      {emotion}\n                    </Badge>\n                  ))}\n                </Group>\n              </Box>\n            )}\n            \n            {selectedMemory.tags.length > 0 && (\n              <Box>\n                <Text fw={500} mb=\"sm\">标签：</Text>\n                <Group gap=\"xs\">\n                  {selectedMemory.tags.map((tag, idx) => (\n                    <Badge key={idx} variant=\"light\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </Group>\n              </Box>\n            )}\n            \n            <Group justify=\"flex-end\" mt=\"md\">\n              {!selectedMemory.imageUrl && (\n                <Button\n                  leftSection={<IconPhotoPlus size={16} />}\n                  variant=\"light\"\n                  color=\"violet\"\n                  onClick={() => {\n                    handleGenerateImage(selectedMemory);\n                    setViewModalOpen(false);\n                  }}\n                  loading={generatingImage === selectedMemory.id}\n                >\n                  生成图像\n                </Button>\n              )}\n              <Button\n                leftSection={<IconShare size={16} />}\n                variant=\"light\"\n              >\n                分享\n              </Button>\n            </Group>\n          </Stack>\n        )}\n      </Modal>\n\n      {/* 筛选模态框 */}\n      <Modal\n        opened={filterModalOpen}\n        onClose={() => setFilterModalOpen(false)}\n        title=\"筛选记忆\"\n        size=\"md\"\n      >\n        <Stack gap=\"md\">\n          <TextInput\n            label=\"地点\"\n            placeholder=\"筛选特定地点的记忆\"\n            value={currentFilter.location || ''}\n            onChange={(e) => setCurrentFilter({ ...currentFilter, location: e.currentTarget.value })}\n          />\n          \n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button variant=\"light\" onClick={() => setFilterModalOpen(false)}>\n              取消\n            </Button>\n            <Button onClick={handleApplyFilter}>\n              应用筛选\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6899, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemorySearch.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  TextInput,\n  Select,\n  MultiSelect,\n  DateInput,\n  Button,\n  Card,\n  Badge,\n  Grid,\n  Box,\n  ActionIcon,\n  Divider,\n  Center,\n  Loader\n} from '@mantine/core';\nimport {\n  IconSearch,\n  IconFilter,\n  IconCalendar,\n  IconMapPin,\n  IconUsers,\n  IconTag,\n  IconHeart,\n  IconX,\n  IconFilterOff,\n  IconEye\n} from '@tabler/icons-react';\nimport { useMemory } from '../hooks/useMemory';\nimport { Memory, MemorySearchFilters } from '../types';\n\ninterface MemorySearchProps {\n  onMemorySelect?: (memory: Memory) => void;\n  onFiltersChange?: (filters: MemorySearchFilters) => void;\n}\n\nexport const MemorySearch: React.FC<MemorySearchProps> = ({\n  onMemorySelect,\n  onFiltersChange\n}) => {\n  const { memories, loading, searchMemories } = useMemory();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<MemorySearchFilters>({});\n  const [searchResults, setSearchResults] = useState<Memory[]>([]);\n  const [searching, setSearching] = useState(false);\n\n  // 从现有记忆中提取选项\n  const filterOptions = useMemo(() => {\n    const locations = new Set<string>();\n    const people = new Set<string>();\n    const tags = new Set<string>();\n    const emotions = new Set<string>();\n\n    memories.forEach(memory => {\n      if (memory.location) locations.add(memory.location);\n      memory.people.forEach(person => people.add(person));\n      memory.tags.forEach(tag => tags.add(tag));\n      memory.emotions.forEach(emotion => emotions.add(emotion));\n    });\n\n    return {\n      locations: Array.from(locations).sort(),\n      people: Array.from(people).sort(),\n      tags: Array.from(tags).sort(),\n      emotions: Array.from(emotions).sort()\n    };\n  }, [memories]);\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim() && Object.keys(filters).length === 0) {\n      setSearchResults([]);\n      return;\n    }\n\n    setSearching(true);\n    try {\n      const results = await searchMemories({\n        query: searchQuery.trim() || undefined,\n        ...filters\n      });\n      setSearchResults(results);\n      onFiltersChange?.({ query: searchQuery.trim() || undefined, ...filters });\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleFilterChange = (key: keyof MemorySearchFilters, value: any) => {\n    const newFilters = { ...filters, [key]: value };\n    if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n      delete newFilters[key];\n    }\n    setFilters(newFilters);\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n    setSearchQuery('');\n    setSearchResults([]);\n    onFiltersChange?.({});\n  };\n\n  const hasActiveFilters = searchQuery.trim() || Object.keys(filters).length > 0;\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(date);\n  };\n\n  const getEmotionColor = (emotion: string) => {\n    const emotionColors: Record<string, string> = {\n      '快乐': 'yellow',\n      '悲伤': 'blue',\n      '兴奋': 'orange',\n      '平静': 'green',\n      '紧张': 'red',\n      '感激': 'violet',\n      '不舍': 'gray',\n      '成就感': 'teal',\n      '温馨': 'pink'\n    };\n    return emotionColors[emotion] || 'gray';\n  };\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconSearch size={28} color=\"var(--mantine-color-blue-6)\" />\n          <Box>\n            <Title order={2}>搜索记忆</Title>\n            <Text c=\"dimmed\" size=\"sm\">查找你的珍贵回忆</Text>\n          </Box>\n        </Group>\n        \n        {hasActiveFilters && (\n          <Button\n            variant=\"light\"\n            color=\"gray\"\n            leftSection={<IconFilterOff size={16} />}\n            onClick={clearFilters}\n          >\n            清除筛选\n          </Button>\n        )}\n      </Group>\n\n      {/* 搜索框 */}\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Stack gap=\"md\">\n          <TextInput\n            placeholder=\"搜索记忆内容、标题、地点...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.currentTarget.value)}\n            leftSection={<IconSearch size={16} />}\n            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n            size=\"md\"\n          />\n          \n          <Group>\n            <Button\n              onClick={handleSearch}\n              loading={searching}\n              leftSection={<IconSearch size={16} />}\n            >\n              搜索\n            </Button>\n            \n            <Text size=\"sm\" c=\"dimmed\">\n              共 {memories.length} 条记忆\n            </Text>\n          </Group>\n        </Stack>\n      </Card>\n\n      {/* 高级筛选 */}\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Stack gap=\"md\">\n          <Group>\n            <IconFilter size={20} />\n            <Title order={4}>高级筛选</Title>\n          </Group>\n          \n          <Grid>\n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <DateInput\n                label=\"开始日期\"\n                placeholder=\"选择开始日期\"\n                value={filters.startDate}\n                onChange={(date) => handleFilterChange('startDate', date)}\n                leftSection={<IconCalendar size={16} />}\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <DateInput\n                label=\"结束日期\"\n                placeholder=\"选择结束日期\"\n                value={filters.endDate}\n                onChange={(date) => handleFilterChange('endDate', date)}\n                leftSection={<IconCalendar size={16} />}\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <Select\n                label=\"地点\"\n                placeholder=\"选择地点\"\n                data={filterOptions.locations}\n                value={filters.location}\n                onChange={(value) => handleFilterChange('location', value)}\n                leftSection={<IconMapPin size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <Select\n                label=\"媒体类型\"\n                placeholder=\"选择媒体类型\"\n                data={[\n                  { value: 'image', label: '有图片' },\n                  { value: 'audio', label: '有音频' },\n                  { value: 'video', label: '有视频' },\n                  { value: 'ai-generated', label: 'AI生成' }\n                ]}\n                value={filters.mediaType}\n                onChange={(value) => handleFilterChange('mediaType', value as any)}\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6 }}>\n              <MultiSelect\n                label=\"相关人物\"\n                placeholder=\"选择相关人物\"\n                data={filterOptions.people}\n                value={filters.people || []}\n                onChange={(value) => handleFilterChange('people', value)}\n                leftSection={<IconUsers size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6 }}>\n              <MultiSelect\n                label=\"情感标签\"\n                placeholder=\"选择情感标签\"\n                data={filterOptions.emotions}\n                value={filters.emotions || []}\n                onChange={(value) => handleFilterChange('emotions', value)}\n                leftSection={<IconHeart size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={12}>\n              <MultiSelect\n                label=\"标签\"\n                placeholder=\"选择标签\"\n                data={filterOptions.tags}\n                value={filters.tags || []}\n                onChange={(value) => handleFilterChange('tags', value)}\n                leftSection={<IconTag size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n          </Grid>\n        </Stack>\n      </Card>\n\n      {/* 搜索结果 */}\n      {searching && (\n        <Center py=\"xl\">\n          <Stack align=\"center\">\n            <Loader size=\"lg\" />\n            <Text c=\"dimmed\">搜索中...</Text>\n          </Stack>\n        </Center>\n      )}\n\n      {!searching && searchResults.length > 0 && (\n        <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n          <Stack gap=\"md\">\n            <Group justify=\"space-between\">\n              <Title order={4}>搜索结果</Title>\n              <Badge variant=\"light\">\n                找到 {searchResults.length} 条记忆\n              </Badge>\n            </Group>\n            \n            <Divider />\n            \n            <Stack gap=\"md\">\n              {searchResults.map((memory) => (\n                <Card key={memory.id} shadow=\"xs\" padding=\"md\" radius=\"md\" withBorder>\n                  <Group justify=\"space-between\" align=\"flex-start\">\n                    <Box style={{ flex: 1 }}>\n                      <Group mb=\"xs\">\n                        <Title order={5}>{memory.title}</Title>\n                        <Badge size=\"xs\" variant=\"light\">\n                          {formatDate(memory.date)}\n                        </Badge>\n                      </Group>\n                      \n                      <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"sm\">\n                        {memory.content}\n                      </Text>\n                      \n                      <Group gap=\"xs\">\n                        {memory.location && (\n                          <Badge size=\"xs\" variant=\"outline\" color=\"green\">\n                            <Group gap=\"xs\">\n                              <IconMapPin size={10} />\n                              {memory.location}\n                            </Group>\n                          </Badge>\n                        )}\n                        \n                        {memory.people.slice(0, 2).map((person, idx) => (\n                          <Badge key={idx} size=\"xs\" variant=\"outline\">\n                            {person}\n                          </Badge>\n                        ))}\n                        \n                        {memory.people.length > 2 && (\n                          <Text size=\"xs\" c=\"dimmed\">\n                            +{memory.people.length - 2} 人\n                          </Text>\n                        )}\n                        \n                        {memory.emotions.slice(0, 3).map((emotion, idx) => (\n                          <Badge \n                            key={idx} \n                            size=\"xs\" \n                            variant=\"light\"\n                            color={getEmotionColor(emotion)}\n                          >\n                            {emotion}\n                          </Badge>\n                        ))}\n                        \n                        {memory.emotions.length > 3 && (\n                          <Text size=\"xs\" c=\"dimmed\">\n                            +{memory.emotions.length - 3}\n                          </Text>\n                        )}\n                      </Group>\n                      \n                      {memory.tags.length > 0 && (\n                        <Group gap=\"xs\" mt=\"xs\">\n                          {memory.tags.slice(0, 4).map((tag, idx) => (\n                            <Badge key={idx} size=\"xs\" variant=\"light\" color=\"gray\">\n                              #{tag}\n                            </Badge>\n                          ))}\n                          {memory.tags.length > 4 && (\n                            <Text size=\"xs\" c=\"dimmed\">\n                              +{memory.tags.length - 4} 标签\n                            </Text>\n                          )}\n                        </Group>\n                      )}\n                    </Box>\n                    \n                    <ActionIcon\n                      variant=\"light\"\n                      onClick={() => onMemorySelect?.(memory)}\n                    >\n                      <IconEye size={16} />\n                    </ActionIcon>\n                  </Group>\n                </Card>\n              ))}\n            </Stack>\n          </Stack>\n        </Card>\n      )}\n\n      {!searching && hasActiveFilters && searchResults.length === 0 && (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Center>\n            <Stack align=\"center\" gap=\"md\">\n              <IconSearch size={64} color=\"var(--mantine-color-gray-5)\" />\n              <Title order={3} ta=\"center\">没有找到匹配的记忆</Title>\n              <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                尝试调整搜索条件或筛选器，或者检查拼写是否正确\n              </Text>\n              <Button variant=\"light\" onClick={clearFilters}>\n                清除所有筛选条件\n              </Button>\n            </Stack>\n          </Center>\n        </Card>\n      )}\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7823, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/feature.config.ts"],"sourcesContent":["import { FeatureConfig } from '@my-platform/types';\n\nexport const memoryFeatureConfig: FeatureConfig = {\n  id: 'memory',\n  name: '记忆管理',\n  description: '管理和组织个人记忆，支持AI图像生成和视频制作',\n  version: '0.1.0',\n  icon: 'IconPhoto',\n  category: 'productivity',\n  enabled: true,\n  routes: [\n    {\n      path: '/memory',\n      component: 'MemoryManager',\n      name: '记忆管理',\n      description: '查看和管理所有记忆'\n    },\n    {\n      path: '/memory/create',\n      component: 'MemoryCreator',\n      name: '创建记忆',\n      description: '添加新的记忆'\n    },\n    {\n      path: '/memory/timeline',\n      component: 'MemoryTimeline',\n      name: '时间线',\n      description: '按时间查看记忆'\n    },\n    {\n      path: '/memory/gallery',\n      component: 'MemoryGallery',\n      name: '记忆画廊',\n      description: 'AI生成的记忆图像'\n    }\n  ],\n  permissions: [\n    'memory:read',\n    'memory:write',\n    'memory:delete',\n    'memory:ai-generate'\n  ],\n  dependencies: [\n    '@my-platform/ai-knowledge',\n    '@my-platform/prompt-templates'\n  ]\n};\n\nexport default memoryFeatureConfig;"],"names":[],"mappings":";;;;AAEO,MAAM,sBAAqC;IAChD,IAAI;IACJ,MAAM;IACN,aAAa;IACb,SAAS;IACT,MAAM;IACN,UAAU;IACV,SAAS;IACT,QAAQ;QACN;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;KACD;IACD,aAAa;QACX;QACA;QACA;QACA;KACD;IACD,cAAc;QACZ;QACA;KACD;AACH;uCAEe","debugId":null}},
    {"offset": {"line": 7882, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/index.ts"],"sourcesContent":["// 导出所有组件\nexport { MemoryManager } from './components/MemoryManager';\nexport { MemoryTimeline } from './components/MemoryTimeline';\nexport { MemoryGallery } from './components/MemoryGallery';\nexport { MemoryCreator } from './components/MemoryCreator';\nexport { MemorySearch } from './components/MemorySearch';\n\n// 导出 hooks\nexport { useMemory } from './hooks/useMemory';\n\n// 导出类型\nexport type {\n  Memory,\n  MemoryCreationRequest,\n  MemoryUpdateRequest,\n  MemoryFilter,\n  MemorySearchFilters,\n  MemoryStats,\n  MemorySearchResult,\n  AIImageGenerationRequest,\n  AIImageGenerationResponse,\n  ImageGenerationRequest,\n  VideoGenerationRequest,\n  KeywordTrigger,\n  MemoryExportOptions\n} from './types';\n\n// 导出功能配置\nexport { default as memoryFeatureConfig } from '../feature.config';"],"names":[],"mappings":"AAAA,SAAS;;AACT;;;;;;;;;;;;;;;;AAIA;AAEA,WAAW;AACX;AAmBA,SAAS;AACT","debugId":null}}]
}