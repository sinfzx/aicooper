{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/apps/desktop/src/components/layout/PageLayout.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  ActionIcon,\n  Box,\n  Breadcrumbs,\n  Anchor\n} from '@mantine/core';\nimport { IconArrowLeft, IconHome } from '@tabler/icons-react';\n\ninterface PageLayoutProps {\n  title: string;\n  description?: string;\n  icon?: React.ReactNode;\n  breadcrumbs?: Array<{ label: string; href?: string }>;\n  actions?: React.ReactNode;\n  onBack?: () => void;\n  children: React.ReactNode;\n}\n\nexport const PageLayout: React.FC<PageLayoutProps> = ({\n  title,\n  description,\n  icon,\n  breadcrumbs,\n  actions,\n  onBack,\n  children\n}) => {\n  return (\n    <Stack gap=\"lg\" p=\"md\" h=\"100%\">\n      {/* 面包屑导航 */}\n      {breadcrumbs && breadcrumbs.length > 0 && (\n        <Breadcrumbs separator=\">\">\n          {breadcrumbs.map((crumb, index) => (\n            <Anchor\n              key={index}\n              href={crumb.href}\n              size=\"sm\"\n              c=\"dimmed\"\n              style={{ textDecoration: 'none' }}\n            >\n              {index === 0 && <IconHome size={14} style={{ marginRight: 4 }} />}\n              {crumb.label}\n            </Anchor>\n          ))}\n        </Breadcrumbs>\n      )}\n\n      {/* 页面头部 */}\n      <Group justify=\"space-between\" align=\"flex-start\">\n        <Group align=\"flex-start\">\n          {onBack && (\n            <ActionIcon\n              variant=\"light\"\n              size=\"lg\"\n              onClick={onBack}\n              style={{ marginTop: 4 }}\n            >\n              <IconArrowLeft size={18} />\n            </ActionIcon>\n          )}\n          \n          <Group align=\"flex-start\">\n            {icon && (\n              <Box style={{ marginTop: 2 }}>\n                {icon}\n              </Box>\n            )}\n            <Box>\n              <Title order={2} mb={description ? 4 : 0}>\n                {title}\n              </Title>\n              {description && (\n                <Text c=\"dimmed\" size=\"sm\">\n                  {description}\n                </Text>\n              )}\n            </Box>\n          </Group>\n        </Group>\n        \n        {actions && (\n          <Group>\n            {actions}\n          </Group>\n        )}\n      </Group>\n\n      {/* 页面内容 */}\n      <Box style={{ flex: 1, overflow: 'auto' }}>\n        {children}\n      </Box>\n    </Stack>\n  );\n};"],"names":[],"mappings":";;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAdA;;;;AA0BO,MAAM,aAAwC;QAAC,EACpD,KAAK,EACL,WAAW,EACX,IAAI,EACJ,WAAW,EACX,OAAO,EACP,MAAM,EACN,QAAQ,EACT;IACC,qBACE,8VAAC,sZAAA,CAAA,QAAK;QAAC,KAAI;QAAK,GAAE;QAAK,GAAE;;YAEtB,eAAe,YAAY,MAAM,GAAG,mBACnC,8VAAC,kaAAA,CAAA,cAAW;gBAAC,WAAU;0BACpB,YAAY,GAAG,CAAC,CAAC,OAAO,sBACvB,8VAAC,wZAAA,CAAA,SAAM;wBAEL,MAAM,MAAM,IAAI;wBAChB,MAAK;wBACL,GAAE;wBACF,OAAO;4BAAE,gBAAgB;wBAAO;;4BAE/B,UAAU,mBAAK,8VAAC,uTAAA,CAAA,WAAQ;gCAAC,MAAM;gCAAI,OAAO;oCAAE,aAAa;gCAAE;;;;;;4BAC3D,MAAM,KAAK;;uBAPP;;;;;;;;;;0BAcb,8VAAC,sZAAA,CAAA,QAAK;gBAAC,SAAQ;gBAAgB,OAAM;;kCACnC,8VAAC,sZAAA,CAAA,QAAK;wBAAC,OAAM;;4BACV,wBACC,8VAAC,gaAAA,CAAA,aAAU;gCACT,SAAQ;gCACR,MAAK;gCACL,SAAS;gCACT,OAAO;oCAAE,WAAW;gCAAE;0CAEtB,cAAA,8VAAC,iUAAA,CAAA,gBAAa;oCAAC,MAAM;;;;;;;;;;;0CAIzB,8VAAC,sZAAA,CAAA,QAAK;gCAAC,OAAM;;oCACV,sBACC,8VAAC,4YAAA,CAAA,MAAG;wCAAC,OAAO;4CAAE,WAAW;wCAAE;kDACxB;;;;;;kDAGL,8VAAC,4YAAA,CAAA,MAAG;;0DACF,8VAAC,sZAAA,CAAA,QAAK;gDAAC,OAAO;gDAAG,IAAI,cAAc,IAAI;0DACpC;;;;;;4CAEF,6BACC,8VAAC,oZAAA,CAAA,OAAI;gDAAC,GAAE;gDAAS,MAAK;0DACnB;;;;;;;;;;;;;;;;;;;;;;;;oBAOV,yBACC,8VAAC,sZAAA,CAAA,QAAK;kCACH;;;;;;;;;;;;0BAMP,8VAAC,4YAAA,CAAA,MAAG;gBAAC,OAAO;oBAAE,MAAM;oBAAG,UAAU;gBAAO;0BACrC;;;;;;;;;;;;AAIT;KA3Ea","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/hooks/useMemory.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { notifications } from '@mantine/notifications';\nimport {\n  Memory,\n  MemoryCreationRequest,\n  MemoryFilter,\n  MemoryStats,\n  MemorySearchResult,\n  AIImageGenerationRequest,\n  VideoGenerationRequest,\n} from '../types';\n\nexport const useMemory = () => {\n  const [memories, setMemories] = useState<Memory[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [stats, setStats] = useState<MemoryStats | null>(null);\n\n  const normalizeMemory = (raw: any): Memory => {\n    const parseDate = (v: any): Date => {\n      if (!v) return new Date();\n      const d = new Date(v);\n      return Number.isNaN(d.getTime()) ? new Date() : d;\n    };\n    const toArray = (v: any): string[] => {\n      if (Array.isArray(v)) return v as string[];\n      if (typeof v === 'string') {\n        try {\n          const parsed = JSON.parse(v);\n          return Array.isArray(parsed) ? parsed : [];\n        } catch {\n          return [];\n        }\n      }\n      return [];\n    };\n\n    return {\n      id: raw.id,\n      userId: raw.userId ?? raw.user_id ?? 'user1',\n      title: raw.title,\n      content: raw.content,\n      date: parseDate(raw.date),\n      location: raw.location ?? undefined,\n      people: toArray(raw.people),\n      tags: toArray(raw.tags),\n      emotions: toArray(raw.emotions),\n      imageUrl: raw.imageUrl ?? raw.image_url ?? undefined,\n      audioUrl: raw.audioUrl ?? raw.audio_url ?? undefined,\n      videoUrl: raw.videoUrl ?? raw.video_url ?? undefined,\n      aiGenerated: raw.aiGenerated ?? raw.ai_generated ?? false,\n      visibility: (raw.visibility ?? 'private') as\n        | 'private'\n        | 'shared'\n        | 'public',\n      createdAt: parseDate(raw.createdAt ?? raw.created_at),\n      updatedAt: parseDate(raw.updatedAt ?? raw.updated_at),\n    };\n  };\n\n  // 加载记忆列表\n  const loadMemories = useCallback(async (filter?: MemoryFilter) => {\n    setLoading(true);\n    try {\n      // 检查是否在 Tauri 环境中\n      if (typeof window === 'undefined' || !window.__TAURI__) {\n        console.log('Not in Tauri environment, using empty memories');\n        setMemories([]);\n        return;\n      }\n\n      const { invoke } = await import('@tauri-apps/api/core');\n      const raw = await invoke<any[]>('get_memories', { filter });\n      const normalized = Array.isArray(raw) ? raw.map(normalizeMemory) : [];\n      setMemories(normalized);\n    } catch (error) {\n      console.error('Failed to load memories:', error);\n      notifications.show({\n        title: '加载失败',\n        message: '无法加载记忆列表',\n        color: 'red',\n      });\n      setMemories([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 创建记忆\n  const createMemory = useCallback(\n    async (request: MemoryCreationRequest): Promise<Memory> => {\n      try {\n        if (typeof window === 'undefined' || !window.__TAURI__) {\n          throw new Error('Not in Tauri environment');\n        }\n\n        const { invoke } = await import('@tauri-apps/api/core');\n        const newRaw = await invoke<any>('create_memory', { request });\n        const newMemory = normalizeMemory(newRaw);\n        setMemories((prev: Memory[]) => [newMemory, ...prev]);\n\n        notifications.show({\n          title: '创建成功',\n          message: '记忆已保存',\n          color: 'green',\n        });\n\n        return newMemory;\n      } catch (error) {\n        console.error('Failed to create memory:', error);\n        notifications.show({\n          title: '创建失败',\n          message: '无法保存记忆',\n          color: 'red',\n        });\n        throw error;\n      }\n    },\n    []\n  );\n\n  // 更新记忆\n  const updateMemory = useCallback(\n    async (id: string, updates: Partial<Memory>) => {\n      try {\n        if (typeof window === 'undefined' || !window.__TAURI__) {\n          throw new Error('Not in Tauri environment');\n        }\n\n        const { invoke } = await import('@tauri-apps/api/core');\n        const snakeUpdates: any = {\n          title: updates.title,\n          content: updates.content,\n          date: updates.date ? updates.date.toISOString() : undefined,\n          location: updates.location,\n          people: updates.people,\n          tags: updates.tags,\n          emotions: updates.emotions,\n          image_url: updates.imageUrl,\n          audio_url: updates.audioUrl,\n          video_url: updates.videoUrl,\n          ai_generated: updates.aiGenerated,\n          visibility: updates.visibility,\n        };\n        const raw = await invoke<any>('update_memory', {\n          id,\n          updates: snakeUpdates,\n        });\n        const updatedMemory = normalizeMemory(raw);\n        setMemories((prev: Memory[]) =>\n          prev.map((m: Memory) => (m.id === id ? updatedMemory : m))\n        );\n\n        notifications.show({\n          title: '更新成功',\n          message: '记忆已更新',\n          color: 'green',\n        });\n      } catch (error) {\n        console.error('Failed to update memory:', error);\n        notifications.show({\n          title: '更新失败',\n          message: '无法更新记忆',\n          color: 'red',\n        });\n      }\n    },\n    []\n  );\n\n  // 删除记忆\n  const deleteMemory = useCallback(async (id: string) => {\n    try {\n      if (typeof window === 'undefined' || !window.__TAURI__) {\n        throw new Error('Not in Tauri environment');\n      }\n\n      const { invoke } = await import('@tauri-apps/api/core');\n      await invoke('delete_memory', { id });\n      setMemories((prev: Memory[]) => prev.filter((m: Memory) => m.id !== id));\n\n      notifications.show({\n        title: '删除成功',\n        message: '记忆已删除',\n        color: 'green',\n      });\n    } catch (error) {\n      console.error('Failed to delete memory:', error);\n      notifications.show({\n        title: '删除失败',\n        message: '无法删除记忆',\n        color: 'red',\n      });\n    }\n  }, []);\n\n  // 搜索记忆\n  const searchMemories = useCallback(\n    async (query: string): Promise<MemorySearchResult> => {\n      try {\n        if (typeof window === 'undefined' || !window.__TAURI__) {\n          return {\n            memories: [],\n            total: 0,\n            page: 1,\n            page_size: 20,\n            has_more: false,\n          };\n        }\n\n        const { invoke } = await import('@tauri-apps/api/core');\n        const result = await invoke<MemorySearchResult>('search_memories', {\n          query,\n        });\n        return result;\n      } catch (error) {\n        console.error('Failed to search memories:', error);\n        throw error;\n      }\n    },\n    []\n  );\n\n  // AI 生成图像\n  const generateImage = useCallback(\n    async (request: AIImageGenerationRequest) => {\n      try {\n        if (typeof window === 'undefined' || !window.__TAURI__) {\n          throw new Error('Not in Tauri environment');\n        }\n\n        const { invoke } = await import('@tauri-apps/api/core');\n        const payload = {\n          request: {\n            memory_id: request.memoryId,\n            prompt: request.prompt,\n            style: request.style,\n            aspect_ratio: request.aspectRatio,\n            quality: request.quality,\n          },\n        };\n        const imageUrl = await invoke<string>('generate_memory_image', payload);\n\n        // 更新记忆的图像URL\n        await updateMemory(request.memoryId, {\n          imageUrl,\n          aiGenerated: true,\n        });\n\n        notifications.show({\n          title: 'AI 图像生成完成',\n          message: '记忆图像已生成并保存',\n          color: 'green',\n        });\n\n        return imageUrl;\n      } catch (error) {\n        console.error('Failed to generate image:', error);\n        notifications.show({\n          title: '图像生成失败',\n          message: 'AI 图像生成遇到问题',\n          color: 'red',\n        });\n        throw error;\n      }\n    },\n    [updateMemory]\n  );\n\n  // 生成视频\n  const generateVideo = useCallback(async (request: VideoGenerationRequest) => {\n    try {\n      if (typeof window === 'undefined' || !window.__TAURI__) {\n        throw new Error('Not in Tauri environment');\n      }\n\n      const { invoke } = await import('@tauri-apps/api/core');\n      const videoUrl = await invoke<string>('generate_memory_video', {\n        request,\n      });\n\n      notifications.show({\n        title: '视频生成完成',\n        message: '记忆视频已生成',\n        color: 'green',\n      });\n\n      return videoUrl;\n    } catch (error) {\n      console.error('Failed to generate video:', error);\n      notifications.show({\n        title: '视频生成失败',\n        message: '视频生成遇到问题',\n        color: 'red',\n      });\n      throw error;\n    }\n  }, []);\n\n  // 获取统计信息\n  const loadStats = useCallback(async () => {\n    try {\n      if (typeof window === 'undefined' || !window.__TAURI__) {\n        setStats(null);\n        return;\n      }\n\n      const { invoke } = await import('@tauri-apps/api/core');\n      const raw = await invoke<any>('get_memory_stats');\n      const normalized: MemoryStats = {\n        totalMemories: raw.total_memories,\n        memoriesThisMonth: raw.memories_this_month,\n        memoriesThisYear: raw.memories_this_year,\n        topLocations: raw.top_locations,\n        topPeople: raw.top_people,\n        topEmotions: raw.top_emotions,\n        aiGeneratedCount: raw.ai_generated_count,\n      };\n      setStats(normalized);\n    } catch (error) {\n      console.error('Failed to load stats:', error);\n      setStats(null);\n    }\n  }, []);\n\n  // 初始化加载\n  useEffect(() => {\n    loadMemories();\n    loadStats();\n  }, [loadMemories, loadStats]);\n\n  return {\n    memories,\n    loading,\n    stats,\n    loadMemories,\n    createMemory,\n    updateMemory,\n    deleteMemory,\n    searchMemories,\n    generateImage,\n    generateVideo,\n    loadStats,\n  };\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemoryManager.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  Card,\n  Badge,\n  ActionIcon,\n  Modal,\n  TextInput,\n  Textarea,\n  Select,\n  Grid,\n  Center,\n  Box,\n  Tabs,\n  Paper,\n  Image,\n  Avatar,\n  Timeline,\n  Progress,\n  Divider,\n  MultiSelect,\n  Loader\n} from '@mantine/core';\nimport { DateInput } from '@mantine/dates';\nimport {\n  IconBrain,\n  IconPlus,\n  IconEdit,\n  IconTrash,\n  IconEye,\n  IconSearch,\n  IconFilter,\n  IconPhoto,\n  IconVideo,\n  IconMicrophone,\n  IconCalendar,\n  IconMapPin,\n  IconUsers,\n  IconTag,\n  IconHeart,\n  IconRobot,\n  IconDownload,\n  IconShare,\n  IconTimeline,\n  IconPhotoPlus,\n  IconVideoPlus\n} from '@tabler/icons-react';\nimport { notifications } from '@mantine/notifications';\nimport { useMemory } from '../hooks/useMemory';\nimport { Memory, MemoryFilter } from '../types';\n\ninterface MemoryManagerProps {\n  onMemorySelect?: (memory: Memory) => void;\n}\n\nexport const MemoryManager: React.FC<MemoryManagerProps> = ({\n  onMemorySelect\n}) => {\n  const {\n    memories,\n    loading,\n    stats,\n    createMemory,\n    updateMemory,\n    deleteMemory,\n    searchMemories,\n    generateImage,\n    generateVideo,\n    loadMemories\n  } = useMemory();\n\n  const [activeTab, setActiveTab] = useState('list');\n  // 创建改为二级页面\n  const [filterModalOpen, setFilterModalOpen] = useState(false);\n  const [selectedMemory, setSelectedMemory] = useState<Memory | null>(null);\n  const [viewModalOpen, setViewModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentFilter, setCurrentFilter] = useState<MemoryFilter>({});\n  const [generatingImage, setGeneratingImage] = useState<string | null>(null);\n  const [generatingVideo, setGeneratingVideo] = useState(false);\n\n  // 表单状态\n  const [formData, setFormData] = useState({\n    title: '',\n    content: '',\n    date: new Date(),\n    location: '',\n    people: [] as string[],\n    tags: [] as string[],\n    emotions: [] as string[],\n    visibility: 'private' as 'private' | 'shared' | 'public'\n  });\n\n  const handleCreateMemory = async () => {\n    try {\n      await createMemory(formData);\n      setCreateModalOpen(false);\n      setFormData({\n        title: '',\n        content: '',\n        date: new Date(),\n        location: '',\n        people: [],\n        tags: [],\n        emotions: [],\n        visibility: 'private'\n      });\n    } catch (error) {\n      // Error handled in hook\n    }\n  };\n\n  const handleDeleteMemory = async (id: string) => {\n    if (confirm('确定要删除这个记忆吗？此操作不可恢复！')) {\n      await deleteMemory(id);\n    }\n  };\n\n  const handleGenerateImage = async (memory: Memory) => {\n    setGeneratingImage(memory.id);\n    try {\n      await generateImage({\n        memoryId: memory.id,\n        prompt: `${memory.title}: ${memory.content}`,\n        style: 'artistic',\n        aspectRatio: '16:9',\n        quality: 'standard'\n      });\n    } catch (error) {\n      // Error handled in hook\n    } finally {\n      setGeneratingImage(null);\n    }\n  };\n\n  const handleGenerateVideo = async (selectedMemoryIds: string[]) => {\n    setGeneratingVideo(true);\n    try {\n      await generateVideo({\n        memoryIds: selectedMemoryIds,\n        title: '我的记忆视频',\n        duration: 60,\n        transitions: 'fade',\n        voiceoverText: '这些是我珍贵的记忆...'\n      });\n    } catch (error) {\n      // Error handled in hook\n    } finally {\n      setGeneratingVideo(false);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (searchQuery.trim()) {\n      try {\n        const result = await searchMemories(searchQuery);\n        // 这里可以更新显示的记忆列表\n        console.log('Search results:', result);\n      } catch (error) {\n        notifications.show({\n          title: '搜索失败',\n          message: '搜索记忆时出现问题',\n          color: 'red'\n        });\n      }\n    }\n  };\n\n  const handleApplyFilter = async () => {\n    await loadMemories(currentFilter);\n    setFilterModalOpen(false);\n  };\n\n  const getEmotionColor = (emotion: string) => {\n    const emotionColors: Record<string, string> = {\n      '快乐': 'yellow',\n      '悲伤': 'blue',\n      '兴奋': 'orange',\n      '平静': 'green',\n      '紧张': 'red',\n      '感激': 'violet',\n      '不舍': 'gray',\n      '成就感': 'teal',\n      '温馨': 'pink'\n    };\n    return emotionColors[emotion] || 'gray';\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }).format(date);\n  };\n\n  if (loading) {\n    return (\n      <Center h={400}>\n        <Stack align=\"center\">\n          <Loader size=\"lg\" />\n          <Text c=\"dimmed\">加载记忆中...</Text>\n        </Stack>\n      </Center>\n    );\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部操作栏 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconBrain size={28} color=\"var(--mantine-color-violet-6)\" />\n          <Box>\n            <Title order={2}>记忆管理</Title>\n            <Text c=\"dimmed\" size=\"sm\">管理和组织你的珍贵记忆</Text>\n          </Box>\n        </Group>\n        \n        <Group>\n          <Button\n            leftSection={<IconVideoPlus size={16} />}\n            variant=\"gradient\"\n            gradient={{ from: 'violet', to: 'purple' }}\n            onClick={() => handleGenerateVideo(memories.map(m => m.id))}\n            loading={generatingVideo}\n          >\n            生成视频\n          </Button>\n          <Button\n            leftSection={<IconPlus size={16} />}\n            onClick={() => { if (typeof window !== 'undefined') window.location.href = '/memory/new' }}\n          >\n            添加记忆\n          </Button>\n        </Group>\n      </Group>\n\n      {/* 搜索和过滤 */}\n      <Group>\n        <TextInput\n          placeholder=\"搜索记忆...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.currentTarget.value)}\n          leftSection={<IconSearch size={16} />}\n          style={{ flex: 1 }}\n          onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n        />\n        <Button\n          variant=\"light\"\n          leftSection={<IconFilter size={16} />}\n          onClick={() => setFilterModalOpen(true)}\n        >\n          筛选\n        </Button>\n      </Group>\n\n      {/* 统计信息 */}\n      {stats && (\n        <Grid>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                总记忆数\n              </Text>\n              <Text size=\"xl\" fw={700}>\n                {stats.totalMemories}\n              </Text>\n            </Paper>\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                本月新增\n              </Text>\n              <Text size=\"xl\" fw={700} c=\"blue\">\n                {stats.memoriesThisMonth}\n              </Text>\n            </Paper>\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                AI 生成\n              </Text>\n              <Text size=\"xl\" fw={700} c=\"violet\">\n                {stats.aiGeneratedCount}\n              </Text>\n            </Paper>\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n            <Paper p=\"md\" withBorder>\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n                今年记录\n              </Text>\n              <Text size=\"xl\" fw={700} c=\"green\">\n                {stats.memoriesThisYear}\n              </Text>\n            </Paper>\n          </Grid.Col>\n        </Grid>\n      )}\n\n      {/* 标签页 */}\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'list')}>\n        <Tabs.List>\n          <Tabs.Tab value=\"list\" leftSection={<IconEye size={16} />}>\n            列表视图\n          </Tabs.Tab>\n          <Tabs.Tab value=\"timeline\" leftSection={<IconTimeline size={16} />}>\n            时间线\n          </Tabs.Tab>\n          <Tabs.Tab value=\"gallery\" leftSection={<IconPhoto size={16} />}>\n            图片画廊\n          </Tabs.Tab>\n        </Tabs.List>\n\n        <Tabs.Panel value=\"list\" pt=\"md\">\n          {memories.length === 0 ? (\n            <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n              <Center>\n                <Stack align=\"center\" gap=\"md\">\n                  <IconBrain size={64} color=\"var(--mantine-color-gray-5)\" />\n                  <Title order={3} ta=\"center\">还没有记忆</Title>\n                  <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                    开始记录你的珍贵时刻，让AI帮你生成美丽的图像\n                  </Text>\n                  <Button\n                    leftSection={<IconPlus size={16} />}\n                    onClick={() => { if (typeof window !== 'undefined') window.location.href = '/memory/new' }}\n                  >\n                    添加第一个记忆\n                  </Button>\n                </Stack>\n              </Center>\n            </Card>\n          ) : (\n            <Grid>\n              {memories.map((memory) => (\n                <Grid.Col key={memory.id} span={{ base: 12, md: 6, lg: 4 }}>\n                  <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder h=\"100%\">\n                    <Stack gap=\"sm\" h=\"100%\">\n                      {memory.imageUrl && (\n                        <Image\n                          src={memory.imageUrl}\n                          alt={memory.title}\n                          height={160}\n                          radius=\"md\"\n                          fallbackSrc=\"/images/placeholder.jpg\"\n                        />\n                      )}\n                      \n                      <Group justify=\"space-between\">\n                        <Badge\n                          variant=\"light\"\n                          color={memory.visibility === 'private' ? 'gray' : 'blue'}\n                          size=\"sm\"\n                        >\n                          {memory.visibility === 'private' ? '私密' : \n                           memory.visibility === 'shared' ? '分享' : '公开'}\n                        </Badge>\n                        {memory.aiGenerated && (\n                          <Badge variant=\"light\" color=\"violet\" size=\"sm\">\n                            AI生成\n                          </Badge>\n                        )}\n                      </Group>\n\n                      <Box style={{ flex: 1 }}>\n                        <Title order={4} mb=\"xs\">{memory.title}</Title>\n                        <Text size=\"sm\" c=\"dimmed\" mb=\"sm\" lineClamp={3}>\n                          {memory.content}\n                        </Text>\n                        \n                        <Group gap=\"xs\" mb=\"sm\">\n                          <Group gap=\"xs\">\n                            <IconCalendar size={14} />\n                            <Text size=\"xs\" c=\"dimmed\">\n                              {formatDate(memory.date)}\n                            </Text>\n                          </Group>\n                          {memory.location && (\n                            <Group gap=\"xs\">\n                              <IconMapPin size={14} />\n                              <Text size=\"xs\" c=\"dimmed\">\n                                {memory.location}\n                              </Text>\n                            </Group>\n                          )}\n                        </Group>\n\n                        {memory.people.length > 0 && (\n                          <Group gap=\"xs\" mb=\"sm\">\n                            <IconUsers size={14} />\n                            <Group gap=\"xs\">\n                              {memory.people.slice(0, 3).map((person, idx) => (\n                                <Badge key={idx} size=\"xs\" variant=\"outline\">\n                                  {person}\n                                </Badge>\n                              ))}\n                              {memory.people.length > 3 && (\n                                <Text size=\"xs\" c=\"dimmed\">\n                                  +{memory.people.length - 3}\n                                </Text>\n                              )}\n                            </Group>\n                          </Group>\n                        )}\n\n                        {memory.emotions.length > 0 && (\n                          <Group gap=\"xs\" mb=\"sm\">\n                            <IconHeart size={14} />\n                            <Group gap=\"xs\">\n                              {memory.emotions.slice(0, 3).map((emotion, idx) => (\n                                <Badge \n                                  key={idx} \n                                  size=\"xs\" \n                                  variant=\"light\"\n                                  color={getEmotionColor(emotion)}\n                                >\n                                  {emotion}\n                                </Badge>\n                              ))}\n                            </Group>\n                          </Group>\n                        )}\n                      </Box>\n\n                      <Divider />\n\n                      <Group justify=\"space-between\">\n                        <Group gap=\"xs\">\n                          <ActionIcon\n                            variant=\"light\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedMemory(memory);\n                              setViewModalOpen(true);\n                              onMemorySelect?.(memory);\n                            }}\n                          >\n                            <IconEye size={14} />\n                          </ActionIcon>\n                          <ActionIcon\n                            variant=\"light\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // TODO: 编辑功能\n                            }}\n                          >\n                            <IconEdit size={14} />\n                          </ActionIcon>\n                          {!memory.imageUrl && (\n                            <ActionIcon\n                              variant=\"light\"\n                              color=\"violet\"\n                              size=\"sm\"\n                              onClick={() => handleGenerateImage(memory)}\n                              loading={generatingImage === memory.id}\n                            >\n                              <IconPhotoPlus size={14} />\n                            </ActionIcon>\n                          )}\n                        </Group>\n                        \n                        <Group gap=\"xs\">\n                          {memory.audioUrl && (\n                            <ActionIcon variant=\"light\" color=\"blue\" size=\"sm\">\n                              <IconMicrophone size={14} />\n                            </ActionIcon>\n                          )}\n                          {memory.videoUrl && (\n                            <ActionIcon variant=\"light\" color=\"green\" size=\"sm\">\n                              <IconVideo size={14} />\n                            </ActionIcon>\n                          )}\n                          <ActionIcon\n                            variant=\"light\"\n                            color=\"red\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteMemory(memory.id)}\n                          >\n                            <IconTrash size={14} />\n                          </ActionIcon>\n                        </Group>\n                      </Group>\n                    </Stack>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid>\n          )}\n        </Tabs.Panel>\n\n        <Tabs.Panel value=\"timeline\" pt=\"md\">\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\n            <Title order={4} mb=\"md\">记忆时间线</Title>\n            <Timeline>\n              {memories\n                .sort((a, b) => b.date.getTime() - a.date.getTime())\n                .map((memory) => (\n                  <Timeline.Item\n                    key={memory.id}\n                    title={memory.title}\n                    bullet={\n                      memory.imageUrl ? (\n                        <Avatar src={memory.imageUrl} size=\"sm\" radius=\"xl\" />\n                      ) : (\n                        <IconBrain size={16} />\n                      )\n                    }\n                  >\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">\n                      {formatDate(memory.date)} {memory.location && `• ${memory.location}`}\n                    </Text>\n                    <Text size=\"sm\" mb=\"sm\" lineClamp={2}>\n                      {memory.content}\n                    </Text>\n                    <Group gap=\"xs\">\n                      {memory.emotions.slice(0, 3).map((emotion, idx) => (\n                        <Badge \n                          key={idx} \n                          size=\"xs\" \n                          variant=\"light\"\n                          color={getEmotionColor(emotion)}\n                        >\n                          {emotion}\n                        </Badge>\n                      ))}\n                    </Group>\n                  </Timeline.Item>\n                ))}\n            </Timeline>\n          </Card>\n        </Tabs.Panel>\n\n        <Tabs.Panel value=\"gallery\" pt=\"md\">\n          <Grid>\n            {memories\n              .filter(memory => memory.imageUrl)\n              .map((memory) => (\n                <Grid.Col key={memory.id} span={{ base: 12, sm: 6, md: 4, lg: 3 }}>\n                  <Card shadow=\"sm\" padding=\"xs\" radius=\"md\" withBorder>\n                    <Image\n                      src={memory.imageUrl}\n                      alt={memory.title}\n                      height={200}\n                      radius=\"md\"\n                      fallbackSrc=\"/images/placeholder.jpg\"\n                      onClick={() => {\n                        setSelectedMemory(memory);\n                        setViewModalOpen(true);\n                      }}\n                      style={{ cursor: 'pointer' }}\n                    />\n                    <Text size=\"sm\" fw={500} mt=\"xs\" lineClamp={1}>\n                      {memory.title}\n                    </Text>\n                    <Text size=\"xs\" c=\"dimmed\">\n                      {formatDate(memory.date)}\n                    </Text>\n                  </Card>\n                </Grid.Col>\n              ))}\n          </Grid>\n        </Tabs.Panel>\n      </Tabs>\n\n      {/* 创建记忆改为二级页面 /memory/new */}\n\n      {/* 查看详情模态框 */}\n      <Modal\n        opened={viewModalOpen}\n        onClose={() => setViewModalOpen(false)}\n        title={selectedMemory?.title || '记忆详情'}\n        size=\"xl\"\n      >\n        {selectedMemory && (\n          <Stack gap=\"md\">\n            {selectedMemory.imageUrl && (\n              <Image\n                src={selectedMemory.imageUrl}\n                alt={selectedMemory.title}\n                radius=\"md\"\n                fallbackSrc=\"/images/placeholder.jpg\"\n              />\n            )}\n            \n            <Group>\n              <Badge color={getEmotionColor('快乐')}>\n                {formatDate(selectedMemory.date)}\n              </Badge>\n              {selectedMemory.location && (\n                <Badge variant=\"light\">\n                  <Group gap=\"xs\">\n                    <IconMapPin size={12} />\n                    {selectedMemory.location}\n                  </Group>\n                </Badge>\n              )}\n              {selectedMemory.aiGenerated && (\n                <Badge variant=\"light\" color=\"violet\">\n                  AI生成\n                </Badge>\n              )}\n            </Group>\n            \n            <Text>{selectedMemory.content}</Text>\n            \n            {selectedMemory.people.length > 0 && (\n              <Box>\n                <Text fw={500} mb=\"sm\">相关人物：</Text>\n                <Group gap=\"xs\">\n                  {selectedMemory.people.map((person, idx) => (\n                    <Badge key={idx} variant=\"outline\">\n                      {person}\n                    </Badge>\n                  ))}\n                </Group>\n              </Box>\n            )}\n            \n            {selectedMemory.emotions.length > 0 && (\n              <Box>\n                <Text fw={500} mb=\"sm\">情感：</Text>\n                <Group gap=\"xs\">\n                  {selectedMemory.emotions.map((emotion, idx) => (\n                    <Badge \n                      key={idx} \n                      variant=\"light\"\n                      color={getEmotionColor(emotion)}\n                    >\n                      {emotion}\n                    </Badge>\n                  ))}\n                </Group>\n              </Box>\n            )}\n            \n            {selectedMemory.tags.length > 0 && (\n              <Box>\n                <Text fw={500} mb=\"sm\">标签：</Text>\n                <Group gap=\"xs\">\n                  {selectedMemory.tags.map((tag, idx) => (\n                    <Badge key={idx} variant=\"light\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </Group>\n              </Box>\n            )}\n            \n            <Group justify=\"flex-end\" mt=\"md\">\n              {!selectedMemory.imageUrl && (\n                <Button\n                  leftSection={<IconPhotoPlus size={16} />}\n                  variant=\"light\"\n                  color=\"violet\"\n                  onClick={() => {\n                    handleGenerateImage(selectedMemory);\n                    setViewModalOpen(false);\n                  }}\n                  loading={generatingImage === selectedMemory.id}\n                >\n                  生成图像\n                </Button>\n              )}\n              <Button\n                leftSection={<IconShare size={16} />}\n                variant=\"light\"\n              >\n                分享\n              </Button>\n            </Group>\n          </Stack>\n        )}\n      </Modal>\n\n      {/* 筛选模态框 */}\n      <Modal\n        opened={filterModalOpen}\n        onClose={() => setFilterModalOpen(false)}\n        title=\"筛选记忆\"\n        size=\"md\"\n      >\n        <Stack gap=\"md\">\n          <TextInput\n            label=\"地点\"\n            placeholder=\"筛选特定地点的记忆\"\n            value={currentFilter.location || ''}\n            onChange={(e) => setCurrentFilter({ ...currentFilter, location: e.currentTarget.value })}\n          />\n          \n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button variant=\"light\" onClick={() => setFilterModalOpen(false)}>\n              取消\n            </Button>\n            <Button onClick={handleApplyFilter}>\n              应用筛选\n            </Button>\n          </Group>\n        </Stack>\n      </Modal>\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2070, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemoryTimeline.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Card,\n  Badge,\n  Timeline,\n  Avatar,\n  Box,\n  Select,\n  Button,\n  ActionIcon,\n  Image,\n  Paper,\n  Center,\n  Divider\n} from '@mantine/core';\nimport {\n  IconTimeline,\n  IconCalendar,\n  IconMapPin,\n  IconUsers,\n  IconHeart,\n  IconBrain,\n  IconPhoto,\n  IconMicrophone,\n  IconVideo,\n  IconFilter,\n  IconEye\n} from '@tabler/icons-react';\nimport { useMemory } from '../hooks/useMemory';\nimport { Memory } from '../types';\n\ninterface MemoryTimelineProps {\n  onMemorySelect?: (memory: Memory) => void;\n}\n\nexport const MemoryTimeline: React.FC<MemoryTimelineProps> = ({\n  onMemorySelect\n}) => {\n  const { memories, loading } = useMemory();\n  const [viewMode, setViewMode] = useState<'all' | 'year' | 'month'>('all');\n  const [selectedYear, setSelectedYear] = useState<string>('');\n  const [selectedMonth, setSelectedMonth] = useState<string>('');\n\n  // 按时间分组记忆\n  const groupedMemories = useMemo(() => {\n    const sorted = [...memories].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    if (viewMode === 'all') {\n      return sorted;\n    }\n    \n    return sorted.filter(memory => {\n      const memoryDate = new Date(memory.date);\n      \n      if (viewMode === 'year' && selectedYear) {\n        return memoryDate.getFullYear().toString() === selectedYear;\n      }\n      \n      if (viewMode === 'month' && selectedYear && selectedMonth) {\n        return (\n          memoryDate.getFullYear().toString() === selectedYear &&\n          (memoryDate.getMonth() + 1).toString().padStart(2, '0') === selectedMonth\n        );\n      }\n      \n      return true;\n    });\n  }, [memories, viewMode, selectedYear, selectedMonth]);\n\n  // 获取可用的年份\n  const availableYears = useMemo(() => {\n    const years = new Set(memories.map(m => new Date(m.date).getFullYear().toString()));\n    return Array.from(years).sort((a, b) => b.localeCompare(a));\n  }, [memories]);\n\n  // 获取可用的月份\n  const availableMonths = useMemo(() => {\n    if (!selectedYear) return [];\n    \n    const months = new Set(\n      memories\n        .filter(m => new Date(m.date).getFullYear().toString() === selectedYear)\n        .map(m => (new Date(m.date).getMonth() + 1).toString().padStart(2, '0'))\n    );\n    \n    return Array.from(months).sort();\n  }, [memories, selectedYear]);\n\n  const formatDate = (date: Date | string) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    }).format(dateObj);\n  };\n\n  const getEmotionColor = (emotion: string) => {\n    const emotionColors: Record<string, string> = {\n      '快乐': 'yellow',\n      '悲伤': 'blue',\n      '兴奋': 'orange',\n      '平静': 'green',\n      '紧张': 'red',\n      '感激': 'violet',\n      '不舍': 'gray',\n      '成就感': 'teal',\n      '温馨': 'pink'\n    };\n    return emotionColors[emotion] || 'gray';\n  };\n\n  const getTimelineBullet = (memory: Memory) => {\n    if (memory.imageUrl) {\n      return (\n        <Avatar \n          src={memory.imageUrl} \n          size=\"md\" \n          radius=\"xl\"\n          style={{ border: '2px solid var(--mantine-color-violet-4)' }}\n        />\n      );\n    }\n    \n    return (\n      <Avatar \n        color=\"violet\" \n        size=\"md\" \n        radius=\"xl\"\n      >\n        <IconBrain size={20} />\n      </Avatar>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Center h={400}>\n        <Stack align=\"center\">\n          <IconTimeline size={64} color=\"var(--mantine-color-gray-5)\" />\n          <Text c=\"dimmed\">加载时间线中...</Text>\n        </Stack>\n      </Center>\n    );\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconTimeline size={28} color=\"var(--mantine-color-violet-6)\" />\n          <Box>\n            <Title order={2}>记忆时间线</Title>\n            <Text c=\"dimmed\" size=\"sm\">按时间顺序浏览你的记忆</Text>\n          </Box>\n        </Group>\n      </Group>\n\n      {/* 筛选控件 */}\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Group>\n          <Select\n            placeholder=\"选择视图模式\"\n            value={viewMode}\n            onChange={(value) => {\n              setViewMode(value as any);\n              setSelectedYear('');\n              setSelectedMonth('');\n            }}\n            data={[\n              { value: 'all', label: '全部记忆' },\n              { value: 'year', label: '按年份' },\n              { value: 'month', label: '按月份' }\n            ]}\n            w={150}\n          />\n          \n          {(viewMode === 'year' || viewMode === 'month') && (\n            <Select\n              placeholder=\"选择年份\"\n              value={selectedYear}\n              onChange={(value) => {\n                setSelectedYear(value || '');\n                setSelectedMonth('');\n              }}\n              data={availableYears.map(year => ({ value: year, label: `${year}年` }))}\n              w={120}\n            />\n          )}\n          \n          {viewMode === 'month' && selectedYear && (\n            <Select\n              placeholder=\"选择月份\"\n              value={selectedMonth}\n              onChange={(value) => setSelectedMonth(value || '')}\n              data={availableMonths.map(month => ({ \n                value: month, \n                label: `${parseInt(month)}月` \n              }))}\n              w={100}\n            />\n          )}\n          \n          <Text size=\"sm\" c=\"dimmed\">\n            共 {groupedMemories.length} 条记忆\n          </Text>\n        </Group>\n      </Card>\n\n      {/* 时间线 */}\n      {groupedMemories.length === 0 ? (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Center>\n            <Stack align=\"center\" gap=\"md\">\n              <IconTimeline size={64} color=\"var(--mantine-color-gray-5)\" />\n              <Title order={3} ta=\"center\">没有找到记忆</Title>\n              <Text c=\"dimmed\" ta=\"center\">\n                在选定的时间范围内没有记忆记录\n              </Text>\n            </Stack>\n          </Center>\n        </Card>\n      ) : (\n        <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\n          <Timeline bulletSize={60} lineWidth={3}>\n            {groupedMemories.map((memory, index) => {\n              const isLastItem = index === groupedMemories.length - 1;\n              \n              return (\n                <Timeline.Item\n                  key={memory.id}\n                  bullet={getTimelineBullet(memory)}\n                  title={\n                    <Group justify=\"space-between\" align=\"flex-start\">\n                      <Box style={{ flex: 1 }}>\n                        <Title order={4} mb=\"xs\">\n                          {memory.title}\n                        </Title>\n                        <Group gap=\"xs\" mb=\"sm\">\n                          <Badge variant=\"light\" color=\"blue\" size=\"sm\">\n                            <Group gap=\"xs\">\n                              <IconCalendar size={12} />\n                              {formatDate(memory.date)}\n                            </Group>\n                          </Badge>\n                          {memory.location && (\n                            <Badge variant=\"light\" color=\"green\" size=\"sm\">\n                              <Group gap=\"xs\">\n                                <IconMapPin size={12} />\n                                {memory.location}\n                              </Group>\n                            </Badge>\n                          )}\n                        </Group>\n                      </Box>\n                      \n                      <ActionIcon\n                        variant=\"light\"\n                        size=\"sm\"\n                        onClick={() => onMemorySelect?.(memory)}\n                      >\n                        <IconEye size={16} />\n                      </ActionIcon>\n                    </Group>\n                  }\n                >\n                  <Stack gap=\"md\" mb={isLastItem ? 0 : \"xl\"}>\n                    {/* 记忆内容 */}\n                    <Paper p=\"md\" bg=\"gray.0\" radius=\"md\">\n                      <Text size=\"sm\" style={{ whiteSpace: 'pre-wrap' }}>\n                        {memory.content}\n                      </Text>\n                    </Paper>\n                    \n                    {/* 相关人物 */}\n                    {memory.people && memory.people.length > 0 && (\n                      <Box>\n                        <Group gap=\"xs\" mb=\"xs\">\n                          <IconUsers size={16} color=\"var(--mantine-color-gray-6)\" />\n                          <Text size=\"sm\" fw={500} c=\"dimmed\">\n                            相关人物\n                          </Text>\n                        </Group>\n                        <Group gap=\"xs\">\n                          {memory.people.map((person, idx) => (\n                            <Badge key={idx} variant=\"outline\" size=\"sm\">\n                              {person}\n                            </Badge>\n                          ))}\n                        </Group>\n                      </Box>\n                    )}\n                    \n                    {/* 情感标签 */}\n                    {memory.emotions && memory.emotions.length > 0 && (\n                      <Box>\n                        <Group gap=\"xs\" mb=\"xs\">\n                          <IconHeart size={16} color=\"var(--mantine-color-gray-6)\" />\n                          <Text size=\"sm\" fw={500} c=\"dimmed\">\n                            情感\n                          </Text>\n                        </Group>\n                        <Group gap=\"xs\">\n                          {memory.emotions.map((emotion, idx) => (\n                            <Badge \n                              key={idx} \n                              variant=\"light\" \n                              color={getEmotionColor(emotion)}\n                              size=\"sm\"\n                            >\n                              {emotion}\n                            </Badge>\n                          ))}\n                        </Group>\n                      </Box>\n                    )}\n                    \n                    {/* 标签 */}\n                    {memory.tags && memory.tags.length > 0 && (\n                      <Group gap=\"xs\">\n                        {memory.tags.map((tag, idx) => (\n                          <Badge key={idx} variant=\"light\" size=\"xs\">\n                            #{tag}\n                          </Badge>\n                        ))}\n                      </Group>\n                    )}\n                    \n                    {/* 分隔线 */}\n                    {!isLastItem && <Divider mt=\"md\" />}\n                  </Stack>\n                </Timeline.Item>\n              );\n            })}\n          </Timeline>\n        </Card>\n      )}\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2772, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemoryGallery.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Card,\n  Badge,\n  Grid,\n  Image,\n  Modal,\n  Button,\n  ActionIcon,\n  Box,\n  Center,\n  Select,\n  TextInput,\n  Paper,\n  Divider,\n  Loader\n} from '@mantine/core';\nimport {\n  IconPhoto,\n  IconSearch,\n  IconFilter,\n  IconEye,\n  IconDownload,\n  IconShare,\n  IconRobot,\n  IconCalendar,\n  IconMapPin,\n  IconHeart,\n  IconPhotoPlus,\n  IconX,\n  IconChevronLeft,\n  IconChevronRight\n} from '@tabler/icons-react';\nimport { useMemory } from '../hooks/useMemory';\nimport { Memory } from '../types';\n\ninterface MemoryGalleryProps {\n  onMemorySelect?: (memory: Memory) => void;\n}\n\nexport const MemoryGallery: React.FC<MemoryGalleryProps> = ({\n  onMemorySelect\n}) => {\n  const { memories, loading, generateImage } = useMemory();\n  const [selectedMemory, setSelectedMemory] = useState<Memory | null>(null);\n  const [viewModalOpen, setViewModalOpen] = useState(false);\n  const [filterType, setFilterType] = useState<'all' | 'ai' | 'original'>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [generatingImage, setGeneratingImage] = useState<string | null>(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  // 筛选有图片的记忆\n  const memoriesWithImages = useMemo(() => {\n    let filtered = memories.filter(memory => memory.imageUrl);\n    \n    // 按类型筛选\n    if (filterType === 'ai') {\n      filtered = filtered.filter(memory => memory.aiGenerated);\n    } else if (filterType === 'original') {\n      filtered = filtered.filter(memory => !memory.aiGenerated);\n    }\n    \n    // 按搜索词筛选\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(memory => \n        memory.title.toLowerCase().includes(query) ||\n        memory.content.toLowerCase().includes(query) ||\n        memory.location?.toLowerCase().includes(query) ||\n        (memory.tags && memory.tags.some(tag => tag.toLowerCase().includes(query)))\n      );\n    }\n    \n    return filtered.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }, [memories, filterType, searchQuery]);\n\n  // 没有图片的记忆\n  const memoriesWithoutImages = useMemo(() => {\n    return memories.filter(memory => !memory.imageUrl);\n  }, [memories]);\n\n  const formatDate = (date: Date | string) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(dateObj);\n  };\n\n  const getEmotionColor = (emotion: string) => {\n    const emotionColors: Record<string, string> = {\n      '快乐': 'yellow',\n      '悲伤': 'blue',\n      '兴奋': 'orange',\n      '平静': 'green',\n      '紧张': 'red',\n      '感激': 'violet',\n      '不舍': 'gray',\n      '成就感': 'teal',\n      '温馨': 'pink'\n    };\n    return emotionColors[emotion] || 'gray';\n  };\n\n  const handleImageClick = (memory: Memory) => {\n    setSelectedMemory(memory);\n    const index = memoriesWithImages.findIndex(m => m.id === memory.id);\n    setCurrentImageIndex(index);\n    setViewModalOpen(true);\n    onMemorySelect?.(memory);\n  };\n\n  const handleGenerateImage = async (memory: Memory) => {\n    setGeneratingImage(memory.id);\n    try {\n      await generateImage({\n        memoryId: memory.id,\n        prompt: `${memory.title}: ${memory.content}`,\n        style: 'artistic',\n        aspectRatio: '16:9',\n        quality: 'standard'\n      });\n    } catch (error) {\n      // Error handled in hook\n    } finally {\n      setGeneratingImage(null);\n    }\n  };\n\n  const navigateImage = (direction: 'prev' | 'next') => {\n    if (!selectedMemory) return;\n    \n    let newIndex = currentImageIndex;\n    if (direction === 'prev') {\n      newIndex = currentImageIndex > 0 ? currentImageIndex - 1 : memoriesWithImages.length - 1;\n    } else {\n      newIndex = currentImageIndex < memoriesWithImages.length - 1 ? currentImageIndex + 1 : 0;\n    }\n    \n    setCurrentImageIndex(newIndex);\n    setSelectedMemory(memoriesWithImages[newIndex]);\n  };\n\n  if (loading) {\n    return (\n      <Center h={400}>\n        <Stack align=\"center\">\n          <Loader size=\"lg\" />\n          <Text c=\"dimmed\">加载画廊中...</Text>\n        </Stack>\n      </Center>\n    );\n  }\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconPhoto size={28} color=\"var(--mantine-color-blue-6)\" />\n          <Box>\n            <Title order={2}>记忆画廊</Title>\n            <Text c=\"dimmed\" size=\"sm\">浏览你的记忆图像集合</Text>\n          </Box>\n        </Group>\n        \n        <Group>\n          <Text size=\"sm\" c=\"dimmed\">\n            {memoriesWithImages.length} 张图片\n          </Text>\n        </Group>\n      </Group>\n\n      {/* 搜索和筛选 */}\n      <Group>\n        <TextInput\n          placeholder=\"搜索图片...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.currentTarget.value)}\n          leftSection={<IconSearch size={16} />}\n          style={{ flex: 1 }}\n        />\n        \n        <Select\n          placeholder=\"筛选类型\"\n          value={filterType}\n          onChange={(value) => setFilterType(value as any)}\n          data={[\n            { value: 'all', label: '全部图片' },\n            { value: 'ai', label: 'AI生成' },\n            { value: 'original', label: '原始图片' }\n          ]}\n          w={120}\n        />\n      </Group>\n\n      {/* 统计信息 */}\n      <Grid>\n        <Grid.Col span={{ base: 12, sm: 4 }}>\n          <Paper p=\"md\" withBorder>\n            <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n              总图片数\n            </Text>\n            <Text size=\"xl\" fw={700}>\n              {memoriesWithImages.length}\n            </Text>\n          </Paper>\n        </Grid.Col>\n        <Grid.Col span={{ base: 12, sm: 4 }}>\n          <Paper p=\"md\" withBorder>\n            <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n              AI生成\n            </Text>\n            <Text size=\"xl\" fw={700} c=\"violet\">\n              {memoriesWithImages.filter(m => m.aiGenerated).length}\n            </Text>\n          </Paper>\n        </Grid.Col>\n        <Grid.Col span={{ base: 12, sm: 4 }}>\n          <Paper p=\"md\" withBorder>\n            <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\n              待生成\n            </Text>\n            <Text size=\"xl\" fw={700} c=\"orange\">\n              {memoriesWithoutImages.length}\n            </Text>\n          </Paper>\n        </Grid.Col>\n      </Grid>\n\n      {/* 图片网格 */}\n      {memoriesWithImages.length === 0 ? (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Center>\n            <Stack align=\"center\" gap=\"md\">\n              <IconPhoto size={64} color=\"var(--mantine-color-gray-5)\" />\n              <Title order={3} ta=\"center\">还没有图片</Title>\n              <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                {memories.length === 0 \n                  ? '先添加一些记忆，然后使用AI生成美丽的图像'\n                  : '使用AI为你的记忆生成图像'\n                }\n              </Text>\n            </Stack>\n          </Center>\n        </Card>\n      ) : (\n        <Grid>\n          {memoriesWithImages.map((memory) => (\n            <Grid.Col key={memory.id} span={{ base: 12, sm: 6, md: 4, lg: 3 }}>\n              <Card shadow=\"sm\" padding=\"xs\" radius=\"md\" withBorder>\n                <Box pos=\"relative\">\n                  <Image\n                    src={memory.imageUrl}\n                    alt={memory.title}\n                    height={200}\n                    radius=\"md\"\n                    fallbackSrc=\"/images/placeholder.jpg\"\n                    onClick={() => handleImageClick(memory)}\n                    style={{ cursor: 'pointer' }}\n                  />\n                  \n                  {/* 覆盖层信息 */}\n                  <Box\n                    pos=\"absolute\"\n                    top={8}\n                    right={8}\n                    style={{\n                      background: 'rgba(0, 0, 0, 0.7)',\n                      borderRadius: '4px',\n                      padding: '4px 8px'\n                    }}\n                  >\n                    {memory.aiGenerated && (\n                      <Badge size=\"xs\" variant=\"light\" color=\"violet\">\n                        AI\n                      </Badge>\n                    )}\n                  </Box>\n                </Box>\n                \n                <Stack gap=\"xs\" mt=\"sm\">\n                  <Text size=\"sm\" fw={500} lineClamp={1}>\n                    {memory.title}\n                  </Text>\n                  \n                  <Group justify=\"space-between\">\n                    <Text size=\"xs\" c=\"dimmed\">\n                      {formatDate(memory.date)}\n                    </Text>\n                    {memory.location && (\n                      <Group gap=\"xs\">\n                        <IconMapPin size={12} />\n                        <Text size=\"xs\" c=\"dimmed\" lineClamp={1}>\n                          {memory.location}\n                        </Text>\n                      </Group>\n                    )}\n                  </Group>\n                  \n                  {memory.emotions && memory.emotions.length > 0 && (\n                    <Group gap=\"xs\">\n                      {memory.emotions.slice(0, 2).map((emotion, idx) => (\n                        <Badge \n                          key={idx} \n                          size=\"xs\" \n                          variant=\"light\"\n                          color={getEmotionColor(emotion)}\n                        >\n                          {emotion}\n                        </Badge>\n                      ))}\n                      {memory.emotions.length > 2 && (\n                        <Text size=\"xs\" c=\"dimmed\">\n                          +{memory.emotions.length - 2}\n                        </Text>\n                      )}\n                    </Group>\n                  )}\n                </Stack>\n              </Card>\n            </Grid.Col>\n          ))}\n        </Grid>\n      )}\n\n      {/* 待生成图片的记忆 */}\n      {memoriesWithoutImages.length > 0 && (\n        <Box>\n          <Divider my=\"xl\" />\n          \n          <Group mb=\"md\">\n            <IconPhotoPlus size={24} color=\"var(--mantine-color-orange-6)\" />\n            <Title order={3}>待生成图片的记忆</Title>\n            <Badge variant=\"light\" color=\"orange\">\n              {memoriesWithoutImages.length} 个\n            </Badge>\n          </Group>\n          \n          <Grid>\n            {memoriesWithoutImages.slice(0, 6).map((memory) => (\n              <Grid.Col key={memory.id} span={{ base: 12, sm: 6, md: 4 }}>\n                <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n                  <Stack gap=\"sm\">\n                    <Group justify=\"space-between\">\n                      <Text fw={500} size=\"sm\" lineClamp={1}>\n                        {memory.title}\n                      </Text>\n                      <Badge size=\"xs\" variant=\"light\">\n                        {formatDate(memory.date)}\n                      </Badge>\n                    </Group>\n                    \n                    <Text size=\"xs\" c=\"dimmed\" lineClamp={2}>\n                      {memory.content}\n                    </Text>\n                    \n                    <Button\n                      size=\"xs\"\n                      variant=\"light\"\n                      color=\"violet\"\n                      leftSection={<IconRobot size={12} />}\n                      onClick={() => handleGenerateImage(memory)}\n                      loading={generatingImage === memory.id}\n                      fullWidth\n                    >\n                      AI生成图片\n                    </Button>\n                  </Stack>\n                </Card>\n              </Grid.Col>\n            ))}\n          </Grid>\n          \n          {memoriesWithoutImages.length > 6 && (\n            <Center mt=\"md\">\n              <Text size=\"sm\" c=\"dimmed\">\n                还有 {memoriesWithoutImages.length - 6} 个记忆可以生成图片\n              </Text>\n            </Center>\n          )}\n        </Box>\n      )}\n\n      {/* 图片查看模态框 */}\n      <Modal\n        opened={viewModalOpen}\n        onClose={() => setViewModalOpen(false)}\n        size=\"xl\"\n        padding={0}\n        withCloseButton={false}\n        centered\n      >\n        {selectedMemory && (\n          <Box pos=\"relative\">\n            {/* 关闭按钮 */}\n            <ActionIcon\n              pos=\"absolute\"\n              top={16}\n              right={16}\n              variant=\"filled\"\n              color=\"dark\"\n              size=\"lg\"\n              style={{ zIndex: 1000 }}\n              onClick={() => setViewModalOpen(false)}\n            >\n              <IconX size={18} />\n            </ActionIcon>\n            \n            {/* 导航按钮 */}\n            {memoriesWithImages.length > 1 && (\n              <>\n                <ActionIcon\n                  pos=\"absolute\"\n                  left={16}\n                  top=\"50%\"\n                  variant=\"filled\"\n                  color=\"dark\"\n                  size=\"lg\"\n                  style={{ zIndex: 1000, transform: 'translateY(-50%)' }}\n                  onClick={() => navigateImage('prev')}\n                >\n                  <IconChevronLeft size={18} />\n                </ActionIcon>\n                \n                <ActionIcon\n                  pos=\"absolute\"\n                  right={16}\n                  top=\"50%\"\n                  variant=\"filled\"\n                  color=\"dark\"\n                  size=\"lg\"\n                  style={{ zIndex: 1000, transform: 'translateY(-50%)' }}\n                  onClick={() => navigateImage('next')}\n                >\n                  <IconChevronRight size={18} />\n                </ActionIcon>\n              </>\n            )}\n            \n            {/* 图片 */}\n            <Image\n              src={selectedMemory.imageUrl}\n              alt={selectedMemory.title}\n              mah=\"70vh\"\n              fit=\"contain\"\n              fallbackSrc=\"/images/placeholder.jpg\"\n            />\n            \n            {/* 信息面板 */}\n            <Box p=\"lg\" bg=\"white\">\n              <Stack gap=\"md\">\n                <Group justify=\"space-between\">\n                  <Title order={3}>{selectedMemory.title}</Title>\n                  <Group>\n                    {selectedMemory.aiGenerated && (\n                      <Badge variant=\"light\" color=\"violet\">\n                        AI生成\n                      </Badge>\n                    )}\n                    <Badge variant=\"light\">\n                      {currentImageIndex + 1} / {memoriesWithImages.length}\n                    </Badge>\n                  </Group>\n                </Group>\n                \n                <Text size=\"sm\">{selectedMemory.content}</Text>\n                \n                <Group>\n                  <Group gap=\"xs\">\n                    <IconCalendar size={16} />\n                    <Text size=\"sm\" c=\"dimmed\">\n                      {formatDate(selectedMemory.date)}\n                    </Text>\n                  </Group>\n                  \n                  {selectedMemory.location && (\n                    <Group gap=\"xs\">\n                      <IconMapPin size={16} />\n                      <Text size=\"sm\" c=\"dimmed\">\n                        {selectedMemory.location}\n                      </Text>\n                    </Group>\n                  )}\n                </Group>\n                \n                {selectedMemory.emotions && selectedMemory.emotions.length > 0 && (\n                  <Group gap=\"xs\">\n                    <IconHeart size={16} />\n                    <Group gap=\"xs\">\n                      {selectedMemory.emotions.map((emotion, idx) => (\n                        <Badge \n                          key={idx} \n                          variant=\"light\"\n                          color={getEmotionColor(emotion)}\n                          size=\"sm\"\n                        >\n                          {emotion}\n                        </Badge>\n                      ))}\n                    </Group>\n                  </Group>\n                )}\n                \n                <Group justify=\"flex-end\">\n                  <Button\n                    variant=\"light\"\n                    leftSection={<IconDownload size={16} />}\n                    size=\"sm\"\n                  >\n                    下载\n                  </Button>\n                  <Button\n                    variant=\"light\"\n                    leftSection={<IconShare size={16} />}\n                    size=\"sm\"\n                  >\n                    分享\n                  </Button>\n                </Group>\n              </Stack>\n            </Box>\n          </Box>\n        )}\n      </Modal>\n    </Stack>\n  );\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;;AAvCA;;;;;AA8CO,MAAM,gBAA8C;QAAC,EAC1D,cAAc,EACf;;IACC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,kJAAA,CAAA,YAAS,AAAD;IACrD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAiB;IACpE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAA6B;IACxE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAiB;IACtE,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,8TAAA,CAAA,WAAQ,AAAD,EAAE;IAE3D,WAAW;IACX,MAAM,qBAAqB,CAAA,GAAA,8TAAA,CAAA,UAAO,AAAD;qDAAE;YACjC,IAAI,WAAW,SAAS,MAAM;sEAAC,CAAA,SAAU,OAAO,QAAQ;;YAExD,QAAQ;YACR,IAAI,eAAe,MAAM;gBACvB,WAAW,SAAS,MAAM;iEAAC,CAAA,SAAU,OAAO,WAAW;;YACzD,OAAO,IAAI,eAAe,YAAY;gBACpC,WAAW,SAAS,MAAM;iEAAC,CAAA,SAAU,CAAC,OAAO,WAAW;;YAC1D;YAEA,SAAS;YACT,IAAI,YAAY,IAAI,IAAI;gBACtB,MAAM,QAAQ,YAAY,WAAW;gBACrC,WAAW,SAAS,MAAM;iEAAC,CAAA;4BAGzB;+BAFA,OAAO,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,UACpC,OAAO,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,YACtC,mBAAA,OAAO,QAAQ,cAAf,uCAAA,iBAAiB,WAAW,GAAG,QAAQ,CAAC,WACvC,OAAO,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI;yEAAC,CAAA,MAAO,IAAI,WAAW,GAAG,QAAQ,CAAC;;;;YAEvE;YAEA,OAAO,SAAS,IAAI;6DAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO;;QACtF;oDAAG;QAAC;QAAU;QAAY;KAAY;IAEtC,UAAU;IACV,MAAM,wBAAwB,CAAA,GAAA,8TAAA,CAAA,UAAO,AAAD;wDAAE;YACpC,OAAO,SAAS,MAAM;gEAAC,CAAA,SAAU,CAAC,OAAO,QAAQ;;QACnD;uDAAG;QAAC;KAAS;IAEb,MAAM,aAAa,CAAC;QAClB,MAAM,UAAU,OAAO,SAAS,WAAW,IAAI,KAAK,QAAQ;QAC5D,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;YACtC,MAAM;YACN,OAAO;YACP,KAAK;QACP,GAAG,MAAM,CAAC;IACZ;IAEA,MAAM,kBAAkB,CAAC;QACvB,MAAM,gBAAwC;YAC5C,MAAM;YACN,MAAM;YACN,MAAM;YACN,MAAM;YACN,MAAM;YACN,MAAM;YACN,MAAM;YACN,OAAO;YACP,MAAM;QACR;QACA,OAAO,aAAa,CAAC,QAAQ,IAAI;IACnC;IAEA,MAAM,mBAAmB,CAAC;QACxB,kBAAkB;QAClB,MAAM,QAAQ,mBAAmB,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,EAAE;QAClE,qBAAqB;QACrB,iBAAiB;QACjB,2BAAA,qCAAA,eAAiB;IACnB;IAEA,MAAM,sBAAsB,OAAO;QACjC,mBAAmB,OAAO,EAAE;QAC5B,IAAI;YACF,MAAM,cAAc;gBAClB,UAAU,OAAO,EAAE;gBACnB,QAAQ,AAAC,GAAmB,OAAjB,OAAO,KAAK,EAAC,MAAmB,OAAf,OAAO,OAAO;gBAC1C,OAAO;gBACP,aAAa;gBACb,SAAS;YACX;QACF,EAAE,OAAO,OAAO;QACd,wBAAwB;QAC1B,SAAU;YACR,mBAAmB;QACrB;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,IAAI,CAAC,gBAAgB;QAErB,IAAI,WAAW;QACf,IAAI,cAAc,QAAQ;YACxB,WAAW,oBAAoB,IAAI,oBAAoB,IAAI,mBAAmB,MAAM,GAAG;QACzF,OAAO;YACL,WAAW,oBAAoB,mBAAmB,MAAM,GAAG,IAAI,oBAAoB,IAAI;QACzF;QAEA,qBAAqB;QACrB,kBAAkB,kBAAkB,CAAC,SAAS;IAChD;IAEA,IAAI,SAAS;QACX,qBACE,8VAAC,wZAAA,CAAA,SAAM;YAAC,GAAG;sBACT,cAAA,8VAAC,sZAAA,CAAA,QAAK;gBAAC,OAAM;;kCACX,8VAAC,wZAAA,CAAA,SAAM;wBAAC,MAAK;;;;;;kCACb,8VAAC,oZAAA,CAAA,OAAI;wBAAC,GAAE;kCAAS;;;;;;;;;;;;;;;;;IAIzB;IAEA,qBACE,8VAAC,sZAAA,CAAA,QAAK;QAAC,KAAI;QAAK,GAAE;;0BAEhB,8VAAC,sZAAA,CAAA,QAAK;gBAAC,SAAQ;;kCACb,8VAAC,sZAAA,CAAA,QAAK;;0CACJ,8VAAC,yTAAA,CAAA,YAAS;gCAAC,MAAM;gCAAI,OAAM;;;;;;0CAC3B,8VAAC,4YAAA,CAAA,MAAG;;kDACF,8VAAC,sZAAA,CAAA,QAAK;wCAAC,OAAO;kDAAG;;;;;;kDACjB,8VAAC,oZAAA,CAAA,OAAI;wCAAC,GAAE;wCAAS,MAAK;kDAAK;;;;;;;;;;;;;;;;;;kCAI/B,8VAAC,sZAAA,CAAA,QAAK;kCACJ,cAAA,8VAAC,oZAAA,CAAA,OAAI;4BAAC,MAAK;4BAAK,GAAE;;gCACf,mBAAmB,MAAM;gCAAC;;;;;;;;;;;;;;;;;;0BAMjC,8VAAC,sZAAA,CAAA,QAAK;;kCACJ,8VAAC,8ZAAA,CAAA,YAAS;wBACR,aAAY;wBACZ,OAAO;wBACP,UAAU,CAAC,IAAM,eAAe,EAAE,aAAa,CAAC,KAAK;wBACrD,2BAAa,8VAAC,2TAAA,CAAA,aAAU;4BAAC,MAAM;;;;;;wBAC/B,OAAO;4BAAE,MAAM;wBAAE;;;;;;kCAGnB,8VAAC,wZAAA,CAAA,SAAM;wBACL,aAAY;wBACZ,OAAO;wBACP,UAAU,CAAC,QAAU,cAAc;wBACnC,MAAM;4BACJ;gCAAE,OAAO;gCAAO,OAAO;4BAAO;4BAC9B;gCAAE,OAAO;gCAAM,OAAO;4BAAO;4BAC7B;gCAAE,OAAO;gCAAY,OAAO;4BAAO;yBACpC;wBACD,GAAG;;;;;;;;;;;;0BAKP,8VAAC,oZAAA,CAAA,OAAI;;kCACH,8VAAC,oZAAA,CAAA,OAAI,CAAC,GAAG;wBAAC,MAAM;4BAAE,MAAM;4BAAI,IAAI;wBAAE;kCAChC,cAAA,8VAAC,sZAAA,CAAA,QAAK;4BAAC,GAAE;4BAAK,UAAU;;8CACtB,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,GAAE;oCAAS,IAAG;oCAAY,IAAI;8CAAK;;;;;;8CAGnD,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,IAAI;8CACjB,mBAAmB,MAAM;;;;;;;;;;;;;;;;;kCAIhC,8VAAC,oZAAA,CAAA,OAAI,CAAC,GAAG;wBAAC,MAAM;4BAAE,MAAM;4BAAI,IAAI;wBAAE;kCAChC,cAAA,8VAAC,sZAAA,CAAA,QAAK;4BAAC,GAAE;4BAAK,UAAU;;8CACtB,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,GAAE;oCAAS,IAAG;oCAAY,IAAI;8CAAK;;;;;;8CAGnD,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,IAAI;oCAAK,GAAE;8CACxB,mBAAmB,MAAM,CAAC,CAAA,IAAK,EAAE,WAAW,EAAE,MAAM;;;;;;;;;;;;;;;;;kCAI3D,8VAAC,oZAAA,CAAA,OAAI,CAAC,GAAG;wBAAC,MAAM;4BAAE,MAAM;4BAAI,IAAI;wBAAE;kCAChC,cAAA,8VAAC,sZAAA,CAAA,QAAK;4BAAC,GAAE;4BAAK,UAAU;;8CACtB,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,GAAE;oCAAS,IAAG;oCAAY,IAAI;8CAAK;;;;;;8CAGnD,8VAAC,oZAAA,CAAA,OAAI;oCAAC,MAAK;oCAAK,IAAI;oCAAK,GAAE;8CACxB,sBAAsB,MAAM;;;;;;;;;;;;;;;;;;;;;;;YAOpC,mBAAmB,MAAM,KAAK,kBAC7B,8VAAC,oZAAA,CAAA,OAAI;gBAAC,QAAO;gBAAK,SAAQ;gBAAK,QAAO;gBAAK,UAAU;0BACnD,cAAA,8VAAC,wZAAA,CAAA,SAAM;8BACL,cAAA,8VAAC,sZAAA,CAAA,QAAK;wBAAC,OAAM;wBAAS,KAAI;;0CACxB,8VAAC,yTAAA,CAAA,YAAS;gCAAC,MAAM;gCAAI,OAAM;;;;;;0CAC3B,8VAAC,sZAAA,CAAA,QAAK;gCAAC,OAAO;gCAAG,IAAG;0CAAS;;;;;;0CAC7B,8VAAC,oZAAA,CAAA,OAAI;gCAAC,GAAE;gCAAS,IAAG;gCAAS,KAAK;0CAC/B,SAAS,MAAM,KAAK,IACjB,0BACA;;;;;;;;;;;;;;;;;;;;;yEAOZ,8VAAC,oZAAA,CAAA,OAAI;0BACF,mBAAmB,GAAG,CAAC,CAAC,uBACvB,8VAAC,oZAAA,CAAA,OAAI,CAAC,GAAG;wBAAiB,MAAM;4BAAE,MAAM;4BAAI,IAAI;4BAAG,IAAI;4BAAG,IAAI;wBAAE;kCAC9D,cAAA,8VAAC,oZAAA,CAAA,OAAI;4BAAC,QAAO;4BAAK,SAAQ;4BAAK,QAAO;4BAAK,UAAU;;8CACnD,8VAAC,4YAAA,CAAA,MAAG;oCAAC,KAAI;;sDACP,8VAAC,sZAAA,CAAA,QAAK;4CACJ,KAAK,OAAO,QAAQ;4CACpB,KAAK,OAAO,KAAK;4CACjB,QAAQ;4CACR,QAAO;4CACP,aAAY;4CACZ,SAAS,IAAM,iBAAiB;4CAChC,OAAO;gDAAE,QAAQ;4CAAU;;;;;;sDAI7B,8VAAC,4YAAA,CAAA,MAAG;4CACF,KAAI;4CACJ,KAAK;4CACL,OAAO;4CACP,OAAO;gDACL,YAAY;gDACZ,cAAc;gDACd,SAAS;4CACX;sDAEC,OAAO,WAAW,kBACjB,8VAAC,sZAAA,CAAA,QAAK;gDAAC,MAAK;gDAAK,SAAQ;gDAAQ,OAAM;0DAAS;;;;;;;;;;;;;;;;;8CAOtD,8VAAC,sZAAA,CAAA,QAAK;oCAAC,KAAI;oCAAK,IAAG;;sDACjB,8VAAC,oZAAA,CAAA,OAAI;4CAAC,MAAK;4CAAK,IAAI;4CAAK,WAAW;sDACjC,OAAO,KAAK;;;;;;sDAGf,8VAAC,sZAAA,CAAA,QAAK;4CAAC,SAAQ;;8DACb,8VAAC,oZAAA,CAAA,OAAI;oDAAC,MAAK;oDAAK,GAAE;8DACf,WAAW,OAAO,IAAI;;;;;;gDAExB,OAAO,QAAQ,kBACd,8VAAC,sZAAA,CAAA,QAAK;oDAAC,KAAI;;sEACT,8VAAC,2TAAA,CAAA,aAAU;4DAAC,MAAM;;;;;;sEAClB,8VAAC,oZAAA,CAAA,OAAI;4DAAC,MAAK;4DAAK,GAAE;4DAAS,WAAW;sEACnC,OAAO,QAAQ;;;;;;;;;;;;;;;;;;wCAMvB,OAAO,QAAQ,IAAI,OAAO,QAAQ,CAAC,MAAM,GAAG,mBAC3C,8VAAC,sZAAA,CAAA,QAAK;4CAAC,KAAI;;gDACR,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,SAAS,oBACzC,8VAAC,sZAAA,CAAA,QAAK;wDAEJ,MAAK;wDACL,SAAQ;wDACR,OAAO,gBAAgB;kEAEtB;uDALI;;;;;gDAQR,OAAO,QAAQ,CAAC,MAAM,GAAG,mBACxB,8VAAC,oZAAA,CAAA,OAAI;oDAAC,MAAK;oDAAK,GAAE;;wDAAS;wDACvB,OAAO,QAAQ,CAAC,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;uBAjE1B,OAAO,EAAE;;;;;;;;;;YA8E7B,sBAAsB,MAAM,GAAG,mBAC9B,8VAAC,4YAAA,CAAA,MAAG;;kCACF,8VAAC,0ZAAA,CAAA,UAAO;wBAAC,IAAG;;;;;;kCAEZ,8VAAC,sZAAA,CAAA,QAAK;wBAAC,IAAG;;0CACR,8VAAC,iUAAA,CAAA,gBAAa;gCAAC,MAAM;gCAAI,OAAM;;;;;;0CAC/B,8VAAC,sZAAA,CAAA,QAAK;gCAAC,OAAO;0CAAG;;;;;;0CACjB,8VAAC,sZAAA,CAAA,QAAK;gCAAC,SAAQ;gCAAQ,OAAM;;oCAC1B,sBAAsB,MAAM;oCAAC;;;;;;;;;;;;;kCAIlC,8VAAC,oZAAA,CAAA,OAAI;kCACF,sBAAsB,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,uBACtC,8VAAC,oZAAA,CAAA,OAAI,CAAC,GAAG;gCAAiB,MAAM;oCAAE,MAAM;oCAAI,IAAI;oCAAG,IAAI;gCAAE;0CACvD,cAAA,8VAAC,oZAAA,CAAA,OAAI;oCAAC,QAAO;oCAAK,SAAQ;oCAAK,QAAO;oCAAK,UAAU;8CACnD,cAAA,8VAAC,sZAAA,CAAA,QAAK;wCAAC,KAAI;;0DACT,8VAAC,sZAAA,CAAA,QAAK;gDAAC,SAAQ;;kEACb,8VAAC,oZAAA,CAAA,OAAI;wDAAC,IAAI;wDAAK,MAAK;wDAAK,WAAW;kEACjC,OAAO,KAAK;;;;;;kEAEf,8VAAC,sZAAA,CAAA,QAAK;wDAAC,MAAK;wDAAK,SAAQ;kEACtB,WAAW,OAAO,IAAI;;;;;;;;;;;;0DAI3B,8VAAC,oZAAA,CAAA,OAAI;gDAAC,MAAK;gDAAK,GAAE;gDAAS,WAAW;0DACnC,OAAO,OAAO;;;;;;0DAGjB,8VAAC,wZAAA,CAAA,SAAM;gDACL,MAAK;gDACL,SAAQ;gDACR,OAAM;gDACN,2BAAa,8VAAC,yTAAA,CAAA,YAAS;oDAAC,MAAM;;;;;;gDAC9B,SAAS,IAAM,oBAAoB;gDACnC,SAAS,oBAAoB,OAAO,EAAE;gDACtC,SAAS;0DACV;;;;;;;;;;;;;;;;;+BAxBQ,OAAO,EAAE;;;;;;;;;;oBAiC3B,sBAAsB,MAAM,GAAG,mBAC9B,8VAAC,wZAAA,CAAA,SAAM;wBAAC,IAAG;kCACT,cAAA,8VAAC,oZAAA,CAAA,OAAI;4BAAC,MAAK;4BAAK,GAAE;;gCAAS;gCACrB,sBAAsB,MAAM,GAAG;gCAAE;;;;;;;;;;;;;;;;;;0BAQ/C,8VAAC,sZAAA,CAAA,QAAK;gBACJ,QAAQ;gBACR,SAAS,IAAM,iBAAiB;gBAChC,MAAK;gBACL,SAAS;gBACT,iBAAiB;gBACjB,QAAQ;0BAEP,gCACC,8VAAC,4YAAA,CAAA,MAAG;oBAAC,KAAI;;sCAEP,8VAAC,gaAAA,CAAA,aAAU;4BACT,KAAI;4BACJ,KAAK;4BACL,OAAO;4BACP,SAAQ;4BACR,OAAM;4BACN,MAAK;4BACL,OAAO;gCAAE,QAAQ;4BAAK;4BACtB,SAAS,IAAM,iBAAiB;sCAEhC,cAAA,8VAAC,iTAAA,CAAA,QAAK;gCAAC,MAAM;;;;;;;;;;;wBAId,mBAAmB,MAAM,GAAG,mBAC3B;;8CACE,8VAAC,gaAAA,CAAA,aAAU;oCACT,KAAI;oCACJ,MAAM;oCACN,KAAI;oCACJ,SAAQ;oCACR,OAAM;oCACN,MAAK;oCACL,OAAO;wCAAE,QAAQ;wCAAM,WAAW;oCAAmB;oCACrD,SAAS,IAAM,cAAc;8CAE7B,cAAA,8VAAC,qUAAA,CAAA,kBAAe;wCAAC,MAAM;;;;;;;;;;;8CAGzB,8VAAC,gaAAA,CAAA,aAAU;oCACT,KAAI;oCACJ,OAAO;oCACP,KAAI;oCACJ,SAAQ;oCACR,OAAM;oCACN,MAAK;oCACL,OAAO;wCAAE,QAAQ;wCAAM,WAAW;oCAAmB;oCACrD,SAAS,IAAM,cAAc;8CAE7B,cAAA,8VAAC,uUAAA,CAAA,mBAAgB;wCAAC,MAAM;;;;;;;;;;;;;sCAM9B,8VAAC,sZAAA,CAAA,QAAK;4BACJ,KAAK,eAAe,QAAQ;4BAC5B,KAAK,eAAe,KAAK;4BACzB,KAAI;4BACJ,KAAI;4BACJ,aAAY;;;;;;sCAId,8VAAC,4YAAA,CAAA,MAAG;4BAAC,GAAE;4BAAK,IAAG;sCACb,cAAA,8VAAC,sZAAA,CAAA,QAAK;gCAAC,KAAI;;kDACT,8VAAC,sZAAA,CAAA,QAAK;wCAAC,SAAQ;;0DACb,8VAAC,sZAAA,CAAA,QAAK;gDAAC,OAAO;0DAAI,eAAe,KAAK;;;;;;0DACtC,8VAAC,sZAAA,CAAA,QAAK;;oDACH,eAAe,WAAW,kBACzB,8VAAC,sZAAA,CAAA,QAAK;wDAAC,SAAQ;wDAAQ,OAAM;kEAAS;;;;;;kEAIxC,8VAAC,sZAAA,CAAA,QAAK;wDAAC,SAAQ;;4DACZ,oBAAoB;4DAAE;4DAAI,mBAAmB,MAAM;;;;;;;;;;;;;;;;;;;kDAK1D,8VAAC,oZAAA,CAAA,OAAI;wCAAC,MAAK;kDAAM,eAAe,OAAO;;;;;;kDAEvC,8VAAC,sZAAA,CAAA,QAAK;;0DACJ,8VAAC,sZAAA,CAAA,QAAK;gDAAC,KAAI;;kEACT,8VAAC,+TAAA,CAAA,eAAY;wDAAC,MAAM;;;;;;kEACpB,8VAAC,oZAAA,CAAA,OAAI;wDAAC,MAAK;wDAAK,GAAE;kEACf,WAAW,eAAe,IAAI;;;;;;;;;;;;4CAIlC,eAAe,QAAQ,kBACtB,8VAAC,sZAAA,CAAA,QAAK;gDAAC,KAAI;;kEACT,8VAAC,2TAAA,CAAA,aAAU;wDAAC,MAAM;;;;;;kEAClB,8VAAC,oZAAA,CAAA,OAAI;wDAAC,MAAK;wDAAK,GAAE;kEACf,eAAe,QAAQ;;;;;;;;;;;;;;;;;;oCAM/B,eAAe,QAAQ,IAAI,eAAe,QAAQ,CAAC,MAAM,GAAG,mBAC3D,8VAAC,sZAAA,CAAA,QAAK;wCAAC,KAAI;;0DACT,8VAAC,yTAAA,CAAA,YAAS;gDAAC,MAAM;;;;;;0DACjB,8VAAC,sZAAA,CAAA,QAAK;gDAAC,KAAI;0DACR,eAAe,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,oBACrC,8VAAC,sZAAA,CAAA,QAAK;wDAEJ,SAAQ;wDACR,OAAO,gBAAgB;wDACvB,MAAK;kEAEJ;uDALI;;;;;;;;;;;;;;;;kDAYf,8VAAC,sZAAA,CAAA,QAAK;wCAAC,SAAQ;;0DACb,8VAAC,wZAAA,CAAA,SAAM;gDACL,SAAQ;gDACR,2BAAa,8VAAC,+TAAA,CAAA,eAAY;oDAAC,MAAM;;;;;;gDACjC,MAAK;0DACN;;;;;;0DAGD,8VAAC,wZAAA,CAAA,SAAM;gDACL,SAAQ;gDACR,2BAAa,8VAAC,yTAAA,CAAA,YAAS;oDAAC,MAAM;;;;;;gDAC9B,MAAK;0DACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWnB;GAxea;;QAGkC,kJAAA,CAAA,YAAS;;;KAH3C","debugId":null}},
    {"offset": {"line": 3939, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemoryCreator.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  Button,\n  Card,\n  TextInput,\n  Textarea,\n  Select,\n  MultiSelect,\n  FileInput,\n  Image,\n  Box,\n  Badge,\n  ActionIcon,\n  Paper,\n  Divider,\n  Alert,\n  Progress,\n  Stepper\n} from '@mantine/core';\nimport { DateInput } from '@mantine/dates';\nimport {\n  IconPlus,\n  IconPhoto,\n  IconMicrophone,\n  IconVideo,\n  IconMapPin,\n  IconUsers,\n  IconTag,\n  IconHeart,\n  IconCalendar,\n  IconUpload,\n  IconX,\n  IconRobot,\n  IconInfoCircle,\n  IconCheck\n} from '@tabler/icons-react';\nimport { notifications } from '@mantine/notifications';\nimport { useMemory } from '../hooks/useMemory';\nimport { MemoryCreationRequest } from '../types';\n\ninterface MemoryCreatorProps {\n  onMemoryCreated?: (memoryId: string) => void;\n  onCancel?: () => void;\n}\n\nexport const MemoryCreator: React.FC<MemoryCreatorProps> = ({\n  onMemoryCreated,\n  onCancel\n}) => {\n  const { createMemory, generateImage } = useMemory();\n  \n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [generatingImage, setGeneratingImage] = useState(false);\n  \n  // 表单数据\n  const [formData, setFormData] = useState<MemoryCreationRequest>({\n    title: '',\n    content: '',\n    date: new Date(),\n    location: '',\n    people: [],\n    tags: [],\n    emotions: [],\n    visibility: 'private'\n  });\n  \n  // 媒体文件\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [audioFile, setAudioFile] = useState<File | null>(null);\n  const [videoFile, setVideoFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  \n  // AI生成选项\n  const [generateAIImage, setGenerateAIImage] = useState(false);\n  const [aiImageStyle, setAiImageStyle] = useState<'realistic' | 'artistic' | 'cartoon' | 'vintage'>('artistic');\n  \n  const steps = [\n    { label: '基本信息', description: '记忆的标题和内容' },\n    { label: '详细信息', description: '时间、地点、人物等' },\n    { label: '媒体文件', description: '图片、音频、视频' },\n    { label: '确认创建', description: '检查并保存记忆' }\n  ];\n  \n  const emotionOptions = [\n    '快乐', '悲伤', '兴奋', '平静', '紧张', '感激', '不舍', '成就感', '温馨',\n    '惊喜', '满足', '骄傲', '怀念', '期待', '安心', '感动', '轻松', '充实'\n  ];\n  \n  const tagSuggestions = [\n    '家庭', '朋友', '工作', '学习', '旅行', '美食', '运动', '音乐', '电影',\n    '读书', '摄影', '节日', '生日', '毕业', '婚礼', '聚会', '户外', '城市',\n    '自然', '动物', '艺术', '科技', '健康', '成长', '挑战', '成功', '失败',\n    '第一次', '最后一次', '重要时刻', '日常生活'\n  ];\n  \n  const handleImageFileChange = (file: File | null) => {\n    setImageFile(file);\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setImagePreview(null);\n    }\n  };\n  \n  const handleSubmit = async () => {\n    setLoading(true);\n    try {\n      // 创建记忆\n      const memory = await createMemory(formData);\n      \n      // 如果选择生成AI图像\n      if (generateAIImage && !imageFile) {\n        setGeneratingImage(true);\n        try {\n          await generateImage({\n            memoryId: memory.id,\n            prompt: `${formData.title}: ${formData.content}`,\n            style: aiImageStyle,\n            aspectRatio: '16:9',\n            quality: 'standard'\n          });\n        } catch (error) {\n          console.error('Failed to generate AI image:', error);\n        } finally {\n          setGeneratingImage(false);\n        }\n      }\n      \n      notifications.show({\n        title: '记忆创建成功',\n        message: generateAIImage ? 'AI图像正在生成中...' : '记忆已保存',\n        color: 'green'\n      });\n      \n      onMemoryCreated?.(memory.id);\n    } catch (error) {\n      console.error('Failed to create memory:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const canProceedToNext = () => {\n    switch (currentStep) {\n      case 0:\n        return formData.title.trim() && formData.content.trim();\n      case 1:\n        return true; // 详细信息是可选的\n      case 2:\n        return true; // 媒体文件是可选的\n      case 3:\n        return true;\n      default:\n        return false;\n    }\n  };\n  \n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <Stack gap=\"md\">\n            <TextInput\n              label=\"记忆标题\"\n              placeholder=\"给这个记忆起个有意义的标题\"\n              value={formData.title}\n              onChange={(e) => setFormData({ ...formData, title: e.currentTarget.value })}\n              required\n              error={!formData.title.trim() && '请输入标题'}\n            />\n            \n            <Textarea\n              label=\"记忆内容\"\n              placeholder=\"详细描述这个记忆，包括发生了什么、你的感受等\"\n              value={formData.content}\n              onChange={(e) => setFormData({ ...formData, content: e.currentTarget.value })}\n              minRows={6}\n              required\n              error={!formData.content.trim() && '请输入内容'}\n            />\n            \n            <Alert icon={<IconInfoCircle size={16} />} color=\"blue\" variant=\"light\">\n              <Text size=\"sm\">\n                详细的描述有助于AI生成更准确的图像。尽量包含场景、人物、情感等信息。\n              </Text>\n            </Alert>\n          </Stack>\n        );\n        \n      case 1:\n        return (\n          <Stack gap=\"md\">\n            <DateInput\n              label=\"发生日期\"\n              description=\"这个记忆发生的日期\"\n              value={formData.date}\n              onChange={(date) => setFormData({ ...formData, date: date || new Date() })}\n            />\n            \n            <TextInput\n              label=\"地点\"\n              placeholder=\"这个记忆发生的地点\"\n              value={formData.location}\n              onChange={(e) => setFormData({ ...formData, location: e.currentTarget.value })}\n              leftSection={<IconMapPin size={16} />}\n            />\n            \n            <MultiSelect\n              label=\"相关人物\"\n              description=\"参与这个记忆的人物\"\n              placeholder=\"添加相关的人物\"\n              data={formData.people || []}\n              value={formData.people || []}\n              onChange={(value) => setFormData({ ...formData, people: value })}\n              searchable\n              creatable\n              getCreateLabel={(query) => `+ 添加 \"${query}\"`}\n              onCreate={(query) => {\n                const newPeople = [...(formData.people || []), query];\n                setFormData({ ...formData, people: newPeople });\n                return query;\n              }}\n              leftSection={<IconUsers size={16} />}\n            />\n            \n            <MultiSelect\n              label=\"情感标签\"\n              description=\"这个记忆让你感受到什么情感\"\n              placeholder=\"选择或添加情感标签\"\n              data={emotionOptions}\n              value={formData.emotions || []}\n              onChange={(value) => setFormData({ ...formData, emotions: value })}\n              searchable\n              creatable\n              getCreateLabel={(query) => `+ 添加 \"${query}\"`}\n              onCreate={(query) => {\n                const newEmotions = [...(formData.emotions || []), query];\n                setFormData({ ...formData, emotions: newEmotions });\n                return query;\n              }}\n              leftSection={<IconHeart size={16} />}\n            />\n            \n            <MultiSelect\n              label=\"标签\"\n              description=\"为这个记忆添加标签，便于分类和搜索\"\n              placeholder=\"选择或添加标签\"\n              data={tagSuggestions}\n              value={formData.tags || []}\n              onChange={(value) => setFormData({ ...formData, tags: value })}\n              searchable\n              creatable\n              getCreateLabel={(query) => `+ 添加 \"${query}\"`}\n              onCreate={(query) => {\n                const newTags = [...(formData.tags || []), query];\n                setFormData({ ...formData, tags: newTags });\n                return query;\n              }}\n              leftSection={<IconTag size={16} />}\n            />\n            \n            <Select\n              label=\"可见性\"\n              description=\"谁可以看到这个记忆\"\n              value={formData.visibility}\n              onChange={(value) => setFormData({ ...formData, visibility: value as any })}\n              data={[\n                { value: 'private', label: '私密 - 只有我可以看到' },\n                { value: 'shared', label: '分享 - 朋友可以看到' },\n                { value: 'public', label: '公开 - 所有人可以看到' }\n              ]}\n            />\n          </Stack>\n        );\n        \n      case 2:\n        return (\n          <Stack gap=\"md\">\n            <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n              <Stack gap=\"md\">\n                <Group>\n                  <IconPhoto size={20} color=\"var(--mantine-color-blue-6)\" />\n                  <Title order={4}>图片</Title>\n                </Group>\n                \n                <FileInput\n                  label=\"上传图片\"\n                  placeholder=\"选择图片文件\"\n                  accept=\"image/*\"\n                  value={imageFile}\n                  onChange={handleImageFileChange}\n                  leftSection={<IconUpload size={16} />}\n                />\n                \n                {imagePreview && (\n                  <Box pos=\"relative\">\n                    <Image\n                      src={imagePreview}\n                      alt=\"预览\"\n                      height={200}\n                      radius=\"md\"\n                    />\n                    <ActionIcon\n                      pos=\"absolute\"\n                      top={8}\n                      right={8}\n                      variant=\"filled\"\n                      color=\"red\"\n                      size=\"sm\"\n                      onClick={() => handleImageFileChange(null)}\n                    >\n                      <IconX size={14} />\n                    </ActionIcon>\n                  </Box>\n                )}\n                \n                <Divider label=\"或者\" labelPosition=\"center\" />\n                \n                <Paper p=\"md\" bg=\"violet.0\" radius=\"md\">\n                  <Stack gap=\"sm\">\n                    <Group>\n                      <IconRobot size={20} color=\"var(--mantine-color-violet-6)\" />\n                      <Text fw={500}>AI生成图片</Text>\n                    </Group>\n                    \n                    <Text size=\"sm\" c=\"dimmed\">\n                      基于记忆内容自动生成图片\n                    </Text>\n                    \n                    <Group>\n                      <Button\n                        variant={generateAIImage ? 'filled' : 'light'}\n                        color=\"violet\"\n                        size=\"sm\"\n                        onClick={() => setGenerateAIImage(!generateAIImage)}\n                        disabled={!!imageFile}\n                      >\n                        {generateAIImage ? '已启用' : '启用AI生成'}\n                      </Button>\n                      \n                      {generateAIImage && (\n                        <Select\n                          placeholder=\"选择风格\"\n                          value={aiImageStyle}\n                          onChange={(value) => setAiImageStyle(value as any)}\n                          data={[\n                            { value: 'realistic', label: '写实风格' },\n                            { value: 'artistic', label: '艺术风格' },\n                            { value: 'cartoon', label: '卡通风格' },\n                            { value: 'vintage', label: '复古风格' }\n                          ]}\n                          size=\"sm\"\n                          w={120}\n                        />\n                      )}\n                    </Group>\n                  </Stack>\n                </Paper>\n              </Stack>\n            </Card>\n          </Stack>\n        );\n        \n      case 3:\n        return (\n          <Stack gap=\"md\">\n            <Alert icon={<IconCheck size={16} />} color=\"green\" variant=\"light\">\n              <Text fw={500} mb=\"xs\">记忆信息确认</Text>\n              <Text size=\"sm\">\n                请检查以下信息，确认无误后点击\"创建记忆\"按钮。\n              </Text>\n            </Alert>\n            \n            <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n              <Stack gap=\"sm\">\n                <Group>\n                  <Text fw={500}>标题:</Text>\n                  <Text>{formData.title}</Text>\n                </Group>\n                \n                <Box>\n                  <Text fw={500} mb=\"xs\">内容:</Text>\n                  <Text size=\"sm\" c=\"dimmed\" style={{ whiteSpace: 'pre-wrap' }}>\n                    {formData.content}\n                  </Text>\n                </Box>\n                \n                <Group>\n                  <Text fw={500}>日期:</Text>\n                  <Badge variant=\"light\">\n                    <Group gap=\"xs\">\n                      <IconCalendar size={12} />\n                      {new Intl.DateTimeFormat('zh-CN').format(formData.date)}\n                    </Group>\n                  </Badge>\n                </Group>\n                \n                {formData.location && (\n                  <Group>\n                    <Text fw={500}>地点:</Text>\n                    <Badge variant=\"light\" color=\"green\">\n                      <Group gap=\"xs\">\n                        <IconMapPin size={12} />\n                        {formData.location}\n                      </Group>\n                    </Badge>\n                  </Group>\n                )}\n                \n                {formData.people && formData.people.length > 0 && (\n                  <Box>\n                    <Text fw={500} mb=\"xs\">相关人物:</Text>\n                    <Group gap=\"xs\">\n                      {formData.people.map((person, idx) => (\n                        <Badge key={idx} variant=\"outline\" size=\"sm\">\n                          {person}\n                        </Badge>\n                      ))}\n                    </Group>\n                  </Box>\n                )}\n                \n                {formData.emotions && formData.emotions.length > 0 && (\n                  <Box>\n                    <Text fw={500} mb=\"xs\">情感:</Text>\n                    <Group gap=\"xs\">\n                      {formData.emotions.map((emotion, idx) => (\n                        <Badge key={idx} variant=\"light\" color=\"pink\" size=\"sm\">\n                          {emotion}\n                        </Badge>\n                      ))}\n                    </Group>\n                  </Box>\n                )}\n                \n                {formData.tags && formData.tags.length > 0 && (\n                  <Box>\n                    <Text fw={500} mb=\"xs\">标签:</Text>\n                    <Group gap=\"xs\">\n                      {formData.tags.map((tag, idx) => (\n                        <Badge key={idx} variant=\"light\" size=\"sm\">\n                          #{tag}\n                        </Badge>\n                      ))}\n                    </Group>\n                  </Box>\n                )}\n                \n                <Group>\n                  <Text fw={500}>可见性:</Text>\n                  <Badge \n                    variant=\"light\" \n                    color={formData.visibility === 'private' ? 'gray' : 'blue'}\n                  >\n                    {formData.visibility === 'private' ? '私密' : \n                     formData.visibility === 'shared' ? '分享' : '公开'}\n                  </Badge>\n                </Group>\n                \n                {(imageFile || generateAIImage || audioFile || videoFile) && (\n                  <Box>\n                    <Text fw={500} mb=\"xs\">媒体文件:</Text>\n                    <Group gap=\"xs\">\n                      {imageFile && (\n                        <Badge variant=\"light\" color=\"blue\">\n                          <Group gap=\"xs\">\n                            <IconPhoto size={12} />\n                            图片\n                          </Group>\n                        </Badge>\n                      )}\n                      {generateAIImage && !imageFile && (\n                        <Badge variant=\"light\" color=\"violet\">\n                          <Group gap=\"xs\">\n                            <IconRobot size={12} />\n                            AI图片\n                          </Group>\n                        </Badge>\n                      )}\n                      {audioFile && (\n                        <Badge variant=\"light\" color=\"green\">\n                          <Group gap=\"xs\">\n                            <IconMicrophone size={12} />\n                            音频\n                          </Group>\n                        </Badge>\n                      )}\n                      {videoFile && (\n                        <Badge variant=\"light\" color=\"orange\">\n                          <Group gap=\"xs\">\n                            <IconVideo size={12} />\n                            视频\n                          </Group>\n                        </Badge>\n                      )}\n                    </Group>\n                  </Box>\n                )}\n              </Stack>\n            </Card>\n            \n            {generateAIImage && (\n              <Alert icon={<IconRobot size={16} />} color=\"violet\" variant=\"light\">\n                <Text size=\"sm\">\n                  AI将在记忆创建后自动生成图片，这可能需要几分钟时间。\n                </Text>\n              </Alert>\n            )}\n          </Stack>\n        );\n        \n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconPlus size={28} color=\"var(--mantine-color-blue-6)\" />\n          <Box>\n            <Title order={2}>创建新记忆</Title>\n            <Text c=\"dimmed\" size=\"sm\">记录你的珍贵时刻</Text>\n          </Box>\n        </Group>\n        \n        {onCancel && (\n          <Button variant=\"light\" onClick={onCancel}>\n            取消\n          </Button>\n        )}\n      </Group>\n      \n      {/* 进度指示器 */}\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Stepper active={currentStep} onStepClick={setCurrentStep}>\n          {steps.map((step, index) => (\n            <Stepper.Step\n              key={index}\n              label={step.label}\n              description={step.description}\n              allowStepSelect={index <= currentStep}\n            />\n          ))}\n        </Stepper>\n      </Card>\n      \n      {/* 步骤内容 */}\n      <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\n        {renderStepContent()}\n      </Card>\n      \n      {/* 操作按钮 */}\n      <Group justify=\"space-between\">\n        <Button\n          variant=\"light\"\n          onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n          disabled={currentStep === 0}\n        >\n          上一步\n        </Button>\n        \n        <Group>\n          {currentStep < steps.length - 1 ? (\n            <Button\n              onClick={() => setCurrentStep(currentStep + 1)}\n              disabled={!canProceedToNext()}\n            >\n              下一步\n            </Button>\n          ) : (\n            <Button\n              onClick={handleSubmit}\n              loading={loading || generatingImage}\n              disabled={!canProceedToNext()}\n              leftSection={<IconCheck size={16} />}\n            >\n              {loading ? '创建中...' : generatingImage ? 'AI生成中...' : '创建记忆'}\n            </Button>\n          )}\n        </Group>\n      </Group>\n      \n      {/* 进度条 */}\n      {(loading || generatingImage) && (\n        <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n          <Stack gap=\"sm\">\n            <Text size=\"sm\" fw={500}>\n              {loading ? '正在保存记忆...' : 'AI正在生成图片...'}\n            </Text>\n            <Progress value={loading ? 50 : 80} animated />\n          </Stack>\n        </Card>\n      )}\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5296, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/components/MemorySearch.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Stack,\n  Group,\n  Title,\n  Text,\n  TextInput,\n  Select,\n  MultiSelect,\n  Button,\n  Card,\n  Badge,\n  Grid,\n  Box,\n  ActionIcon,\n  Divider,\n  Center,\n  Loader\n} from '@mantine/core';\nimport { DateInput } from '@mantine/dates';\nimport {\n  IconSearch,\n  IconFilter,\n  IconCalendar,\n  IconMapPin,\n  IconUsers,\n  IconTag,\n  IconHeart,\n  IconX,\n  IconFilterOff,\n  IconEye\n} from '@tabler/icons-react';\nimport { useMemory } from '../hooks/useMemory';\nimport { Memory, MemorySearchFilters } from '../types';\n\ninterface MemorySearchProps {\n  onMemorySelect?: (memory: Memory) => void;\n  onFiltersChange?: (filters: MemorySearchFilters) => void;\n}\n\nexport const MemorySearch: React.FC<MemorySearchProps> = ({\n  onMemorySelect,\n  onFiltersChange\n}) => {\n  const { memories, loading, searchMemories } = useMemory();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<MemorySearchFilters>({});\n  const [searchResults, setSearchResults] = useState<Memory[]>([]);\n  const [searching, setSearching] = useState(false);\n\n  // 从现有记忆中提取选项\n  const filterOptions = useMemo(() => {\n    const locations = new Set<string>();\n    const people = new Set<string>();\n    const tags = new Set<string>();\n    const emotions = new Set<string>();\n\n    memories.forEach(memory => {\n      if (memory.location) locations.add(memory.location);\n      memory.people.forEach(person => people.add(person));\n      memory.tags.forEach(tag => tags.add(tag));\n      memory.emotions.forEach(emotion => emotions.add(emotion));\n    });\n\n    return {\n      locations: Array.from(locations).sort(),\n      people: Array.from(people).sort(),\n      tags: Array.from(tags).sort(),\n      emotions: Array.from(emotions).sort()\n    };\n  }, [memories]);\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim() && Object.keys(filters).length === 0) {\n      setSearchResults([]);\n      return;\n    }\n\n    setSearching(true);\n    try {\n      const results = await searchMemories({\n        query: searchQuery.trim() || undefined,\n        ...filters\n      });\n      setSearchResults(results);\n      onFiltersChange?.({ query: searchQuery.trim() || undefined, ...filters });\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleFilterChange = (key: keyof MemorySearchFilters, value: any) => {\n    const newFilters = { ...filters, [key]: value };\n    if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n      delete newFilters[key];\n    }\n    setFilters(newFilters);\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n    setSearchQuery('');\n    setSearchResults([]);\n    onFiltersChange?.({});\n  };\n\n  const hasActiveFilters = searchQuery.trim() || Object.keys(filters).length > 0;\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(date);\n  };\n\n  const getEmotionColor = (emotion: string) => {\n    const emotionColors: Record<string, string> = {\n      '快乐': 'yellow',\n      '悲伤': 'blue',\n      '兴奋': 'orange',\n      '平静': 'green',\n      '紧张': 'red',\n      '感激': 'violet',\n      '不舍': 'gray',\n      '成就感': 'teal',\n      '温馨': 'pink'\n    };\n    return emotionColors[emotion] || 'gray';\n  };\n\n  return (\n    <Stack gap=\"lg\" p=\"md\">\n      {/* 头部 */}\n      <Group justify=\"space-between\">\n        <Group>\n          <IconSearch size={28} color=\"var(--mantine-color-blue-6)\" />\n          <Box>\n            <Title order={2}>搜索记忆</Title>\n            <Text c=\"dimmed\" size=\"sm\">查找你的珍贵回忆</Text>\n          </Box>\n        </Group>\n        \n        {hasActiveFilters && (\n          <Button\n            variant=\"light\"\n            color=\"gray\"\n            leftSection={<IconFilterOff size={16} />}\n            onClick={clearFilters}\n          >\n            清除筛选\n          </Button>\n        )}\n      </Group>\n\n      {/* 搜索框 */}\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Stack gap=\"md\">\n          <TextInput\n            placeholder=\"搜索记忆内容、标题、地点...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.currentTarget.value)}\n            leftSection={<IconSearch size={16} />}\n            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n            size=\"md\"\n          />\n          \n          <Group>\n            <Button\n              onClick={handleSearch}\n              loading={searching}\n              leftSection={<IconSearch size={16} />}\n            >\n              搜索\n            </Button>\n            \n            <Text size=\"sm\" c=\"dimmed\">\n              共 {memories.length} 条记忆\n            </Text>\n          </Group>\n        </Stack>\n      </Card>\n\n      {/* 高级筛选 */}\n      <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n        <Stack gap=\"md\">\n          <Group>\n            <IconFilter size={20} />\n            <Title order={4}>高级筛选</Title>\n          </Group>\n          \n          <Grid>\n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <DateInput\n                label=\"开始日期\"\n                placeholder=\"选择开始日期\"\n                value={filters.startDate}\n                onChange={(date) => handleFilterChange('startDate', date)}\n                leftSection={<IconCalendar size={16} />}\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <DateInput\n                label=\"结束日期\"\n                placeholder=\"选择结束日期\"\n                value={filters.endDate}\n                onChange={(date) => handleFilterChange('endDate', date)}\n                leftSection={<IconCalendar size={16} />}\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <Select\n                label=\"地点\"\n                placeholder=\"选择地点\"\n                data={filterOptions.locations}\n                value={filters.location}\n                onChange={(value) => handleFilterChange('location', value)}\n                leftSection={<IconMapPin size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\n              <Select\n                label=\"媒体类型\"\n                placeholder=\"选择媒体类型\"\n                data={[\n                  { value: 'image', label: '有图片' },\n                  { value: 'audio', label: '有音频' },\n                  { value: 'video', label: '有视频' },\n                  { value: 'ai-generated', label: 'AI生成' }\n                ]}\n                value={filters.mediaType}\n                onChange={(value) => handleFilterChange('mediaType', value as any)}\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6 }}>\n              <MultiSelect\n                label=\"相关人物\"\n                placeholder=\"选择相关人物\"\n                data={filterOptions.people}\n                value={filters.people || []}\n                onChange={(value) => handleFilterChange('people', value)}\n                leftSection={<IconUsers size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={{ base: 12, sm: 6 }}>\n              <MultiSelect\n                label=\"情感标签\"\n                placeholder=\"选择情感标签\"\n                data={filterOptions.emotions}\n                value={filters.emotions || []}\n                onChange={(value) => handleFilterChange('emotions', value)}\n                leftSection={<IconHeart size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n            \n            <Grid.Col span={12}>\n              <MultiSelect\n                label=\"标签\"\n                placeholder=\"选择标签\"\n                data={filterOptions.tags}\n                value={filters.tags || []}\n                onChange={(value) => handleFilterChange('tags', value)}\n                leftSection={<IconTag size={16} />}\n                searchable\n                clearable\n              />\n            </Grid.Col>\n          </Grid>\n        </Stack>\n      </Card>\n\n      {/* 搜索结果 */}\n      {searching && (\n        <Center py=\"xl\">\n          <Stack align=\"center\">\n            <Loader size=\"lg\" />\n            <Text c=\"dimmed\">搜索中...</Text>\n          </Stack>\n        </Center>\n      )}\n\n      {!searching && searchResults.length > 0 && (\n        <Card shadow=\"sm\" padding=\"md\" radius=\"md\" withBorder>\n          <Stack gap=\"md\">\n            <Group justify=\"space-between\">\n              <Title order={4}>搜索结果</Title>\n              <Badge variant=\"light\">\n                找到 {searchResults.length} 条记忆\n              </Badge>\n            </Group>\n            \n            <Divider />\n            \n            <Stack gap=\"md\">\n              {searchResults.map((memory) => (\n                <Card key={memory.id} shadow=\"xs\" padding=\"md\" radius=\"md\" withBorder>\n                  <Group justify=\"space-between\" align=\"flex-start\">\n                    <Box style={{ flex: 1 }}>\n                      <Group mb=\"xs\">\n                        <Title order={5}>{memory.title}</Title>\n                        <Badge size=\"xs\" variant=\"light\">\n                          {formatDate(memory.date)}\n                        </Badge>\n                      </Group>\n                      \n                      <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"sm\">\n                        {memory.content}\n                      </Text>\n                      \n                      <Group gap=\"xs\">\n                        {memory.location && (\n                          <Badge size=\"xs\" variant=\"outline\" color=\"green\">\n                            <Group gap=\"xs\">\n                              <IconMapPin size={10} />\n                              {memory.location}\n                            </Group>\n                          </Badge>\n                        )}\n                        \n                        {memory.people.slice(0, 2).map((person, idx) => (\n                          <Badge key={idx} size=\"xs\" variant=\"outline\">\n                            {person}\n                          </Badge>\n                        ))}\n                        \n                        {memory.people.length > 2 && (\n                          <Text size=\"xs\" c=\"dimmed\">\n                            +{memory.people.length - 2} 人\n                          </Text>\n                        )}\n                        \n                        {memory.emotions.slice(0, 3).map((emotion, idx) => (\n                          <Badge \n                            key={idx} \n                            size=\"xs\" \n                            variant=\"light\"\n                            color={getEmotionColor(emotion)}\n                          >\n                            {emotion}\n                          </Badge>\n                        ))}\n                        \n                        {memory.emotions.length > 3 && (\n                          <Text size=\"xs\" c=\"dimmed\">\n                            +{memory.emotions.length - 3}\n                          </Text>\n                        )}\n                      </Group>\n                      \n                      {memory.tags.length > 0 && (\n                        <Group gap=\"xs\" mt=\"xs\">\n                          {memory.tags.slice(0, 4).map((tag, idx) => (\n                            <Badge key={idx} size=\"xs\" variant=\"light\" color=\"gray\">\n                              #{tag}\n                            </Badge>\n                          ))}\n                          {memory.tags.length > 4 && (\n                            <Text size=\"xs\" c=\"dimmed\">\n                              +{memory.tags.length - 4} 标签\n                            </Text>\n                          )}\n                        </Group>\n                      )}\n                    </Box>\n                    \n                    <ActionIcon\n                      variant=\"light\"\n                      onClick={() => onMemorySelect?.(memory)}\n                    >\n                      <IconEye size={16} />\n                    </ActionIcon>\n                  </Group>\n                </Card>\n              ))}\n            </Stack>\n          </Stack>\n        </Card>\n      )}\n\n      {!searching && hasActiveFilters && searchResults.length === 0 && (\n        <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\n          <Center>\n            <Stack align=\"center\" gap=\"md\">\n              <IconSearch size={64} color=\"var(--mantine-color-gray-5)\" />\n              <Title order={3} ta=\"center\">没有找到匹配的记忆</Title>\n              <Text c=\"dimmed\" ta=\"center\" maw={400}>\n                尝试调整搜索条件或筛选器，或者检查拼写是否正确\n              </Text>\n              <Button variant=\"light\" onClick={clearFilters}>\n                清除所有筛选条件\n              </Button>\n            </Stack>\n          </Center>\n        </Card>\n      )}\n    </Stack>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6221, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/feature.config.ts"],"sourcesContent":["import { FeatureConfig } from '@my-platform/types';\n\nexport const memoryFeatureConfig: FeatureConfig = {\n  id: 'memory',\n  name: '记忆管理',\n  description: '管理和组织个人记忆，支持AI图像生成和视频制作',\n  version: '0.1.0',\n  icon: 'IconPhoto',\n  category: 'productivity',\n  enabled: true,\n  routes: [\n    {\n      path: '/memory',\n      component: 'MemoryManager',\n      name: '记忆管理',\n      description: '查看和管理所有记忆'\n    },\n    {\n      path: '/memory/create',\n      component: 'MemoryCreator',\n      name: '创建记忆',\n      description: '添加新的记忆'\n    },\n    {\n      path: '/memory/timeline',\n      component: 'MemoryTimeline',\n      name: '时间线',\n      description: '按时间查看记忆'\n    },\n    {\n      path: '/memory/gallery',\n      component: 'MemoryGallery',\n      name: '记忆画廊',\n      description: 'AI生成的记忆图像'\n    }\n  ],\n  permissions: [\n    'memory:read',\n    'memory:write',\n    'memory:delete',\n    'memory:ai-generate'\n  ],\n  dependencies: [\n    '@my-platform/ai-knowledge',\n    '@my-platform/prompt-templates'\n  ]\n};\n\nexport default memoryFeatureConfig;"],"names":[],"mappings":";;;;AAEO,MAAM,sBAAqC;IAChD,IAAI;IACJ,MAAM;IACN,aAAa;IACb,SAAS;IACT,MAAM;IACN,UAAU;IACV,SAAS;IACT,QAAQ;QACN;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;YACN,WAAW;YACX,MAAM;YACN,aAAa;QACf;KACD;IACD,aAAa;QACX;QACA;QACA;QACA;KACD;IACD,cAAc;QACZ;QACA;KACD;AACH;uCAEe","debugId":null}},
    {"offset": {"line": 6280, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/features/memory/src/index.ts"],"sourcesContent":["// 导出所有组件\nexport { MemoryManager } from './components/MemoryManager';\nexport { MemoryTimeline } from './components/MemoryTimeline';\nexport { MemoryGallery } from './components/MemoryGallery';\nexport { MemoryCreator } from './components/MemoryCreator';\nexport { MemorySearch } from './components/MemorySearch';\n\n// 导出 hooks\nexport { useMemory } from './hooks/useMemory';\n\n// 导出类型\nexport type {\n  Memory,\n  MemoryCreationRequest,\n  MemoryUpdateRequest,\n  MemoryFilter,\n  MemorySearchFilters,\n  MemoryStats,\n  MemorySearchResult,\n  AIImageGenerationRequest,\n  AIImageGenerationResponse,\n  ImageGenerationRequest,\n  VideoGenerationRequest,\n  KeywordTrigger,\n  MemoryExportOptions\n} from './types';\n\n// 导出功能配置\nexport { default as memoryFeatureConfig } from '../feature.config';"],"names":[],"mappings":"AAAA,SAAS;;AACT;AACA;AACA;AACA;AACA;AAEA,WAAW;AACX;AAmBA,SAAS;AACT","debugId":null}},
    {"offset": {"line": 6320, "column": 0}, "map": {"version":3,"sources":["file:///Users/cavatina/projects/aicooper/apps/desktop/src/app/memory/new/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { useRouter } from 'next/navigation';\nimport { PageLayout } from '@/components/layout/PageLayout';\nimport { Group, Button } from '@mantine/core';\nimport { IconPhoto } from '@tabler/icons-react';\nimport { MemoryCreator } from '@my-platform/memory';\n\nexport default function NewMemoryPage() {\n  const router = useRouter();\n\n  return (\n    <PageLayout\n      title=\"创建记忆\"\n      description=\"记录你的珍贵时刻\"\n      icon={<IconPhoto size={28} color=\"var(--mantine-color-indigo-6)\" />}\n      breadcrumbs={[{ label: '首页', href: '/' }, { label: '记忆', href: '/' }, { label: '创建' }]}\n      onBack={() => router.back()}\n      actions={<Group><Button variant=\"light\" onClick={() => router.back()}>返回</Button></Group>}\n    >\n      <MemoryCreator onCancel={() => router.back()} onMemoryCreated={() => router.push('/')} />\n    </PageLayout>\n  );\n}\n\n\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;;;AAPA;;;;;;AASe,SAAS;;IACtB,MAAM,SAAS,CAAA,GAAA,sSAAA,CAAA,YAAS,AAAD;IAEvB,qBACE,8VAAC,gKAAA,CAAA,aAAU;QACT,OAAM;QACN,aAAY;QACZ,oBAAM,8VAAC,yTAAA,CAAA,YAAS;YAAC,MAAM;YAAI,OAAM;;;;;;QACjC,aAAa;YAAC;gBAAE,OAAO;gBAAM,MAAM;YAAI;YAAG;gBAAE,OAAO;gBAAM,MAAM;YAAI;YAAG;gBAAE,OAAO;YAAK;SAAE;QACtF,QAAQ,IAAM,OAAO,IAAI;QACzB,uBAAS,8VAAC,sZAAA,CAAA,QAAK;sBAAC,cAAA,8VAAC,wZAAA,CAAA,SAAM;gBAAC,SAAQ;gBAAQ,SAAS,IAAM,OAAO,IAAI;0BAAI;;;;;;;;;;;kBAEtE,cAAA,8VAAC,4JAAA,CAAA,gBAAa;YAAC,UAAU,IAAM,OAAO,IAAI;YAAI,iBAAiB,IAAM,OAAO,IAAI,CAAC;;;;;;;;;;;AAGvF;GAfwB;;QACP,sSAAA,CAAA,YAAS;;;KADF","debugId":null}}]
}